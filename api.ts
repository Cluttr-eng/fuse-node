/* tslint:disable */
/* eslint-disable */
/**
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * The account\'s subtype
 * @export
 * @enum {string}
 */

export const AccountSubtype = {
    Checking: 'checking',
    Savings: 'savings',
    MoneyMarket: 'money_market',
    CertificateOfDeposit: 'certificate_of_deposit',
    Treasury: 'treasury',
    CreditCard: 'credit_card',
    Hsa: 'hsa',
    Paypal: 'paypal',
    Prepaid: 'prepaid',
    CashManagement: 'cash_management',
    Ebt: 'ebt',
    Auto: 'auto',
    Business: 'business',
    Commercial: 'commercial',
    Construction: 'construction',
    Consumer: 'consumer',
    HomeEquity: 'home_equity',
    Loan: 'loan',
    Mortgage: 'mortgage',
    Overdraft: 'overdraft',
    LineOfCredit: 'line_of_credit',
    Student: 'student',
    _529: '529',
    _401A: '401_a',
    _401K: '401_k',
    _403B: '403_b',
    _457B: '457_b',
    Brokerage: 'brokerage',
    CashIsa: 'cash_isa',
    CryptoExchange: 'crypto_exchange',
    EducationSavingAccount: 'education_saving_account',
    FixedAnnuity: 'fixed_annuity',
    Gic: 'gic',
    HealthReimbursementArrangement: 'health_reimbursement_arrangement',
    Ira: 'ira',
    Isa: 'isa',
    Keogh: 'keogh',
    Lif: 'lif',
    LifeInsurance: 'life_insurance',
    Lira: 'lira',
    Lrif: 'lrif',
    Lrsp: 'lrsp',
    MutualFund: 'mutual_fund',
    NonCustodialWallet: 'non_custodial_wallet',
    NonTaxableBrokerageAccount: 'non_taxable_brokerage_account',
    OtherAnnuity: 'other_annuity',
    OtherInsurance: 'other_insurance',
    Pension: 'pension',
    Prif: 'prif',
    ProfitSharingPlan: 'profit_sharing_plan',
    Qshr: 'qshr',
    Rdsp: 'rdsp',
    Resp: 'resp',
    Retirement: 'retirement',
    Rlif: 'rlif',
    RothIra: 'roth_ira',
    Roth401K: 'roth_401_k',
    Rrif: 'rrif',
    Rrsp: 'rrsp',
    Sarsep: 'sarsep',
    SepIra: 'sep_ira',
    SimpleIra: 'simple_ira',
    Sipp: 'sipp',
    StockPlan: 'stock_plan',
    Tfsa: 'tfsa',
    Trust: 'trust',
    Ugma: 'ugma',
    Utma: 'utma',
    VariableAnnuity: 'variable_annuity',
    SmallBusiness: 'small_business',
    Personal: 'personal',
    PersonalWithCollateral: 'personal_with_collateral',
    _457: '457',
    RolloverIra: 'rollover_ira',
    Taxable: 'taxable',
    NonTaxable: 'non_taxable',
    EmployeeStockOwnershipPlan: 'employee_stock_ownership_plan',
    Individual: 'individual',
    CashManagementAccount: 'cash_management_account',
    EmployeeStockPurchasePlan: 'employee_stock_purchase_plan',
    RegisteredEducationSavingsPlan: 'registered_education_savings_plan',
    FixedAnnuityTraditionalIra: 'fixed_annuity_traditional_ira',
    InheritedTraditionalIra: 'inherited_traditional_ira',
    FixedAnnuityRothIra: 'fixed_annuity_roth_ira',
    VariableAnnuityRothIra: 'variable_annuity_roth_ira',
    InheritedRothIra: 'inherited_roth_ira',
    AdvisoryAccount: 'advisory_account',
    BrokerageMargin: 'brokerage_margin',
    CharitableGiftAccount: 'charitable_gift_account',
    ChurchAccount: 'church_account',
    Conservatorship: 'conservatorship',
    Custodial: 'custodial',
    DefinedBenefitPlan: 'defined_benefit_plan',
    DefinedContributionPlan: 'defined_contribution_plan',
    Educational: 'educational',
    Estate: 'estate',
    Executor: 'executor',
    GroupRetirementSavingsPlan: 'group_retirement_savings_plan',
    GuaranteedInvestmentCertificate: 'guaranteed_investment_certificate',
    IndexedAnnuity: 'indexed_annuity',
    InvestmentClub: 'investment_club',
    IrrevocableTrust: 'irrevocable_trust',
    JointTenantsByEntirety: 'joint_tenants_by_entirety',
    JointTenantsCommunityProperty: 'joint_tenants_community_property',
    JointTenantsInCommon: 'joint_tenants_in_common',
    JointTenantsWithRightsOfSurvivorship: 'joint_tenants_with_rights_of_survivorship',
    KeoughPlan: 'keough_plan',
    LivingTrust: 'living_trust',
    LockedInRetirementAccount: 'locked_in_retirement_account',
    LockedInRetirementInvestmentFund: 'locked_in_retirement_investment_fund',
    LockedInRetirementSavingsAccount: 'locked_in_retirement_savings_account',
    MoneyPurchasePlan: 'money_purchase_plan',
    Partnership: 'partnership',
    _409A: '409_a',
    Rpp: 'rpp',
    RevocableTrust: 'revocable_trust',
    RothConversion: 'roth_conversion',
    SoleProprietorship: 'sole_proprietorship',
    SpousalIra: 'spousal_ira',
    SpousalRothIra: 'spousal_roth_ira',
    TestamentaryTrust: 'testamentary_trust',
    ThriftSavingsPlan: 'thrift_savings_plan',
    InheritedAnnuity: 'inherited_annuity',
    CorporateAccount: 'corporate_account',
    LimitedLiabilityAccount: 'limited_liability_account',
    Boat: 'boat',
    Powersports: 'powersports',
    Rv: 'rv',
    Heloc: 'heloc',
    VehicleInsurance: 'vehicle_insurance',
    Disability: 'disability',
    Health: 'health',
    LongTermCare: 'long_term_care',
    PropertyAndCasualty: 'property_and_casualty',
    UniversalLife: 'universal_life',
    TermLife: 'term_life',
    WholeLife: 'whole_life',
    AccidentalDeathAndDismemberment: 'accidental_death_and_dismemberment',
    VariableUniversalLife: 'variable_universal_life',
    Other: 'other'
} as const;

export type AccountSubtype = typeof AccountSubtype[keyof typeof AccountSubtype];


/**
 * The account\'s type. \'-\' means we were not able to map the upstream type.
 * @export
 * @enum {string}
 */

export const AccountType = {
    Depository: 'depository',
    Credit: 'credit',
    Loan: 'loan',
    Investment: 'investment',
    Insurance: 'insurance',
    Property: 'property',
    Other: 'other',
    Minus: '-'
} as const;

export type AccountType = typeof AccountType[keyof typeof AccountType];


/**
 * 
 * @export
 * @interface AddSpendPowerTransactionRequest
 */
export interface AddSpendPowerTransactionRequest {
    /**
     * Id of the transaction
     * @type {string}
     * @memberof AddSpendPowerTransactionRequest
     */
    'id': string;
    /**
     * The status of the transaction. This will be either pending, posted or cancelled.
     * @type {string}
     * @memberof AddSpendPowerTransactionRequest
     */
    'status': AddSpendPowerTransactionRequestStatusEnum;
    /**
     * The amount of the transaction, in cents. Use positive numbers to represent money going out and negative numbers to represent money coming in.
     * @type {string}
     * @memberof AddSpendPowerTransactionRequest
     */
    'amount'?: string;
}

export const AddSpendPowerTransactionRequestStatusEnum = {
    Pending: 'pending',
    Posted: 'posted',
    Cancelled: 'cancelled'
} as const;

export type AddSpendPowerTransactionRequestStatusEnum = typeof AddSpendPowerTransactionRequestStatusEnum[keyof typeof AddSpendPowerTransactionRequestStatusEnum];

/**
 * 
 * @export
 * @interface AddSpendPowerTransactionResponse
 */
export interface AddSpendPowerTransactionResponse {
    /**
     * Response message
     * @type {string}
     * @memberof AddSpendPowerTransactionResponse
     */
    'message': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof AddSpendPowerTransactionResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Aggregator = {
    Plaid: 'plaid',
    Teller: 'teller',
    Mx: 'mx',
    Snaptrade: 'snaptrade',
    Flinks: 'flinks',
    Finicity: 'finicity'
} as const;

export type Aggregator = typeof Aggregator[keyof typeof Aggregator];


/**
 * The Asset Report in JSON format.
 * @export
 * @interface AssetReport
 */
export interface AssetReport {
    /**
     * A unique ID identifying an Asset Report.
     * @type {string}
     * @memberof AssetReport
     */
    'asset_report_id'?: string;
    /**
     * A token that can be provided to endpoints such as /asset_report/get or /asset_report/pdf/get to fetch or update an Asset Report.
     * @type {string}
     * @memberof AssetReport
     */
    'asset_report_token'?: string;
    /**
     * The date and time when the Asset Report was created, in ISO 8601 format
     * @type {string}
     * @memberof AssetReport
     */
    'date_generated'?: string;
    /**
     * The duration of transaction history you requested
     * @type {number}
     * @memberof AssetReport
     */
    'days_requested'?: number;
    /**
     * An array of Asset Reports, one for each account in the Asset Report.
     * @type {Array<AssetReportAccountsInner>}
     * @memberof AssetReport
     */
    'accounts'?: Array<AssetReportAccountsInner>;
}
/**
 * 
 * @export
 * @interface AssetReportAccountsInner
 */
export interface AssetReportAccountsInner {
    /**
     * The remote account ID of the account.
     * @type {string}
     * @memberof AssetReportAccountsInner
     */
    'remote_id'?: string;
    /**
     * 
     * @type {AssetReportAccountsInnerBalance}
     * @memberof AssetReportAccountsInner
     */
    'balance'?: AssetReportAccountsInnerBalance;
    /**
     * An array of historical balances for the account.
     * @type {Array<AssetReportAccountsInnerHistoricalBalancesInner>}
     * @memberof AssetReportAccountsInner
     */
    'historical_balances'?: Array<AssetReportAccountsInnerHistoricalBalancesInner>;
    /**
     * An array of historical transactions for the account.
     * @type {Array<AssetReportTransaction>}
     * @memberof AssetReportAccountsInner
     */
    'transactions'?: Array<AssetReportTransaction>;
}
/**
 * 
 * @export
 * @interface AssetReportAccountsInnerBalance
 */
export interface AssetReportAccountsInnerBalance {
    /**
     * Amount after factoring in pending balances
     * @type {number}
     * @memberof AssetReportAccountsInnerBalance
     */
    'available'?: number;
    /**
     * Amount without factoring in pending balances
     * @type {number}
     * @memberof AssetReportAccountsInnerBalance
     */
    'current'?: number;
    /**
     * The ISO-4217 currency code of the balance.
     * @type {string}
     * @memberof AssetReportAccountsInnerBalance
     */
    'iso_currency_code'?: string;
}
/**
 * 
 * @export
 * @interface AssetReportAccountsInnerHistoricalBalancesInner
 */
export interface AssetReportAccountsInnerHistoricalBalancesInner {
    /**
     * The date of the calculated historical balance, in an ISO 8601 format (YYYY-MM-DD)
     * @type {string}
     * @memberof AssetReportAccountsInnerHistoricalBalancesInner
     */
    'date'?: string;
    /**
     * The total amount of funds in the account, calculated from the current balance in the balance object by subtracting inflows and adding back outflows according to the posted date of each transaction.
     * @type {number}
     * @memberof AssetReportAccountsInnerHistoricalBalancesInner
     */
    'current'?: number;
    /**
     * The ISO-4217 currency code of the balance.
     * @type {string}
     * @memberof AssetReportAccountsInnerHistoricalBalancesInner
     */
    'iso_currency_code'?: string;
}
/**
 * 
 * @export
 * @interface AssetReportResponse
 */
export interface AssetReportResponse {
    /**
     * 
     * @type {AssetReport}
     * @memberof AssetReportResponse
     */
    'report'?: AssetReport;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof AssetReportResponse
     */
    'request_id'?: string;
}
/**
 * 
 * @export
 * @interface AssetReportTransaction
 */
export interface AssetReportTransaction {
    /**
     * Remote Id of the transaction, ie Plaid or Teller Id
     * @type {string}
     * @memberof AssetReportTransaction
     */
    'remote_id': string;
    /**
     * Remote Account Id of the transaction, ie Plaid Account Id
     * @type {string}
     * @memberof AssetReportTransaction
     */
    'remote_account_id': string;
    /**
     * Amount in cents associated with the transaction. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
     * @type {number}
     * @memberof AssetReportTransaction
     */
    'amount': number;
    /**
     * Date of the transaction (YYYY-MM-DD)
     * @type {string}
     * @memberof AssetReportTransaction
     */
    'date': string;
    /**
     * Description of the transaction
     * @type {string}
     * @memberof AssetReportTransaction
     */
    'description': string;
    /**
     * Categories of the transaction, ie Computers and Electronics. \'-\' means we could not map the upstream category.
     * @type {Array<string>}
     * @memberof AssetReportTransaction
     */
    'category': Array<AssetReportTransactionCategoryEnum>;
    /**
     * 
     * @type {TransactionMerchant}
     * @memberof AssetReportTransaction
     */
    'merchant': TransactionMerchant;
    /**
     * The status of the transaction. This will be either posted or pending.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    'status': AssetReportTransactionStatusEnum;
    /**
     * The ISO-4217 currency code of the transaction
     * @type {string}
     * @memberof AssetReportTransaction
     */
    'iso_currency_code'?: string;
    /**
     * 
     * @type {any}
     * @memberof AssetReportTransaction
     */
    'remote_data': any;
}

export const AssetReportTransactionCategoryEnum = {
    AccessoriesStore: 'accessories_store',
    AccountingAndBookkeeping: 'accounting_and_bookkeeping',
    Ach: 'ach',
    Acorns: 'acorns',
    Acupuncture: 'acupuncture',
    Adult: 'adult',
    AdultEducation: 'adult_education',
    AdultEntertainment: 'adult_entertainment',
    Advertising: 'advertising',
    AdvertisingAgenciesAndMediaBuyers: 'advertising_agencies_and_media_buyers',
    AdvertisingAndMarketing: 'advertising_and_marketing',
    Afghan: 'afghan',
    African: 'african',
    AgricultureAndForestry: 'agriculture_and_forestry',
    AirlinesAndAviationServices: 'airlines_and_aviation_services',
    Airports: 'airports',
    AlcoholAndBars: 'alcohol_and_bars',
    AlternativeMedicine: 'alternative_medicine',
    American: 'american',
    Anesthesiologists: 'anesthesiologists',
    AnimalShelter: 'animal_shelter',
    Antiques: 'antiques',
    ApartmentsCondosAndHouses: 'apartments_condos_and_houses',
    ApparelAndFabricProducts: 'apparel_and_fabric_products',
    Aquarium: 'aquarium',
    ArcadesAndAmusementParks: 'arcades_and_amusement_parks',
    Architects: 'architects',
    ArtAndGraphicDesign: 'art_and_graphic_design',
    ArtDealersAndGalleries: 'art_dealers_and_galleries',
    ArtRestoration: 'art_restoration',
    ArtSchool: 'art_school',
    ArtsAndCrafts: 'arts_and_crafts',
    ArtsAndEntertainment: 'arts_and_entertainment',
    Asian: 'asian',
    AssistedLivingServices: 'assisted_living_services',
    AthleticFields: 'athletic_fields',
    Atm: 'atm',
    Atms: 'atms',
    Auctions: 'auctions',
    Audiovisual: 'audiovisual',
    Australian: 'australian',
    AutoOilAndLube: 'auto_oil_and_lube',
    AutoPayment: 'auto_payment',
    AutoSmogCheck: 'auto_smog_check',
    AutoTires: 'auto_tires',
    AutoTransmission: 'auto_transmission',
    AutomationAndControlSystems: 'automation_and_control_systems',
    Automotive: 'automotive',
    BagelShop: 'bagel_shop',
    Bakery: 'bakery',
    BankFees: 'bank_fees',
    BankingAndFinance: 'banking_and_finance',
    Bar: 'bar',
    Barbecue: 'barbecue',
    Baseball: 'baseball',
    Basketball: 'basketball',
    BattingCages: 'batting_cages',
    Beaches: 'beaches',
    BeautyProducts: 'beauty_products',
    BedAndBreakfasts: 'bed_and_breakfasts',
    BeerWineAndSpirits: 'beer_wine_and_spirits',
    Benefits: 'benefits',
    Betterment: 'betterment',
    Bicycles: 'bicycles',
    Bill: 'bill',
    BilliardsAndPool: 'billiards_and_pool',
    Billpay: 'billpay',
    BloodBanksAndCenters: 'blood_banks_and_centers',
    BoardingHouses: 'boarding_houses',
    Boat: 'boat',
    BoatDealers: 'boat_dealers',
    Boating: 'boating',
    Bookstores: 'bookstores',
    Boutique: 'boutique',
    Bowling: 'bowling',
    Brazilian: 'brazilian',
    BreakfastSpot: 'breakfast_spot',
    Breweries: 'breweries',
    BuildingAndLandSurveyors: 'building_and_land_surveyors',
    BuildingsAndStructures: 'buildings_and_structures',
    Burgers: 'burgers',
    Burrito: 'burrito',
    BusStations: 'bus_stations',
    Business: 'business',
    BusinessAndStrategyConsulting: 'business_and_strategy_consulting',
    BusinessBrokersAndFranchises: 'business_brokers_and_franchises',
    BusinessServices: 'business_services',
    Cable: 'cable',
    Cafe: 'cafe',
    Cajun: 'cajun',
    Cameras: 'cameras',
    CampgroundsAndRvParks: 'campgrounds_and_rv_parks',
    CanoesAndKayaks: 'canoes_and_kayaks',
    CarAndTruckRentals: 'car_and_truck_rentals',
    CarAppraisers: 'car_appraisers',
    CarDealersAndLeasing: 'car_dealers_and_leasing',
    CarPartsAndAccessories: 'car_parts_and_accessories',
    CarService: 'car_service',
    CarWashAndDetail: 'car_wash_and_detail',
    Cardiologists: 'cardiologists',
    CardsAndStationery: 'cards_and_stationery',
    Caretakers: 'caretakers',
    Caribbean: 'caribbean',
    Carpenters: 'carpenters',
    CarpetAndFlooring: 'carpet_and_flooring',
    CashAdvance: 'cash_advance',
    CasinosAndGaming: 'casinos_and_gaming',
    Catering: 'catering',
    Cemetery: 'cemetery',
    CharitiesAndNonProfits: 'charities_and_non-profits',
    Charity: 'charity',
    CharterBuses: 'charter_buses',
    ChaseQuickpay: 'chase_quickpay',
    Check: 'check',
    CheckCashing: 'check_cashing',
    ChemicalsAndGasses: 'chemicals_and_gasses',
    Childcare: 'childcare',
    Children: 'children',
    Chinese: 'chinese',
    Chiropractors: 'chiropractors',
    Churches: 'churches',
    CircusesAndCarnivals: 'circuses_and_carnivals',
    ClassicAndAntiqueCar: 'classic_and_antique_car',
    Cleaning: 'cleaning',
    Clothing: 'clothing',
    ClothingAndAccessories: 'clothing_and_accessories',
    Coal: 'coal',
    CoffeeShop: 'coffee_shop',
    Coinbase: 'coinbase',
    Collections: 'collections',
    CollegesAndUniversities: 'colleges_and_universities',
    CombatSports: 'combat_sports',
    CommercialRealEstate: 'commercial_real_estate',
    Community: 'community',
    ComputerTraining: 'computer_training',
    Computers: 'computers',
    ComputersAndElectronics: 'computers_and_electronics',
    ComputersAndOfficeMachines: 'computers_and_office_machines',
    Construction: 'construction',
    ConstructionSupplies: 'construction_supplies',
    Contractors: 'contractors',
    ConvenienceStores: 'convenience_stores',
    CorporateHousing: 'corporate_housing',
    CorrectionalInstitutions: 'correctional_institutions',
    Costumes: 'costumes',
    CottagesAndCabins: 'cottages_and_cabins',
    CounselingAndTherapy: 'counseling_and_therapy',
    Courts: 'courts',
    CreativeServices: 'creative_services',
    Credit: 'credit',
    CreditCard: 'credit_card',
    CreditCounselingAndBankruptcyServices: 'credit_counseling_and_bankruptcy_services',
    CreditReporting: 'credit_reporting',
    CropProduction: 'crop_production',
    Cruises: 'cruises',
    Cuban: 'cuban',
    CulinaryLessonsAndSchools: 'culinary_lessons_and_schools',
    CupcakeShop: 'cupcake_shop',
    Cycling: 'cycling',
    Dance: 'dance',
    DanceAndMusic: 'dance_and_music',
    DanceHallsAndSaloons: 'dance_halls_and_saloons',
    DanceSchools: 'dance_schools',
    DatingAndEscort: 'dating_and_escort',
    DayCareAndPreschools: 'day_care_and_preschools',
    Debit: 'debit',
    Delis: 'delis',
    Dentists: 'dentists',
    DepartmentStores: 'department_stores',
    Deposit: 'deposit',
    Dermatologists: 'dermatologists',
    Dessert: 'dessert',
    Digit: 'digit',
    DigitalPurchase: 'digital_purchase',
    Diners: 'diners',
    Dining: 'dining',
    DirectMailAndEmailMarketingServices: 'direct_mail_and_email_marketing_services',
    DisabledPersonsServices: 'disabled_persons_services',
    DiscountStores: 'discount_stores',
    Distillery: 'distillery',
    Distribution: 'distribution',
    DoctorsAndDentists: 'doctors_and_dentists',
    Donuts: 'donuts',
    DoorsAndWindows: 'doors_and_windows',
    DrivingSchools: 'driving_schools',
    DrugAndAlcoholServices: 'drug_and_alcohol_services',
    Dwolla: 'dwolla',
    EarNoseAndThroat: 'ear_nose_and_throat',
    EasternEuropean: 'eastern_european',
    Education: 'education',
    Electric: 'electric',
    ElectricalEquipment: 'electrical_equipment',
    ElectricalEquipmentAndComponents: 'electrical_equipment_and_components',
    Electricians: 'electricians',
    Electronics: 'electronics',
    EmergencyServices: 'emergency_services',
    EmploymentAgencies: 'employment_agencies',
    Engineering: 'engineering',
    Entertainment: 'entertainment',
    Environmental: 'environmental',
    Equestrian: 'equestrian',
    EquipmentRental: 'equipment_rental',
    Ethiopian: 'ethiopian',
    EventsAndEventPlanning: 'events_and_event_planning',
    ExcessActivity: 'excess_activity',
    Expense: 'expense',
    FacilitiesAndNursingHomes: 'facilities_and_nursing_homes',
    FairgroundsAndRodeos: 'fairgrounds_and_rodeos',
    Falafel: 'falafel',
    FamilyMedicine: 'family_medicine',
    FarmersMarkets: 'farmers_markets',
    FastFood: 'fast_food',
    Fee: 'fee',
    FencesFireplacesAndGarageDoors: 'fences_fireplaces_and_garage_doors',
    Filipino: 'filipino',
    Financial: 'financial',
    FinancialPlanningAndInvestments: 'financial_planning_and_investments',
    FireStations: 'fire_stations',
    FishAndChips: 'fish_and_chips',
    FleaMarkets: 'flea_markets',
    Florists: 'florists',
    FoodAndBeverage: 'food_and_beverage',
    FoodAndBeverageStore: 'food_and_beverage_store',
    FoodAndDrink: 'food_and_drink',
    FoodTruck: 'food_truck',
    Football: 'football',
    ForeignTransaction: 'foreign_transaction',
    Forestry: 'forestry',
    Forests: 'forests',
    FraternitiesAndSororities: 'fraternities_and_sororities',
    FraudDispute: 'fraud_dispute',
    French: 'french',
    Fuel: 'fuel',
    FuelDealer: 'fuel_dealer',
    FundRaising: 'fund_raising',
    FuneralServices: 'funeral_services',
    FurnitureAndFixtures: 'furniture_and_fixtures',
    FurnitureAndHomeDecor: 'furniture_and_home_decor',
    Gardens: 'gardens',
    Gas: 'gas',
    GasStations: 'gas_stations',
    Gastroenterologists: 'gastroenterologists',
    Gastropub: 'gastropub',
    General: 'general',
    GeneralSurgery: 'general_surgery',
    Geological: 'geological',
    German: 'german',
    GiftAndNovelty: 'gift_and_novelty',
    Gifts: 'gifts',
    GlassProducts: 'glass_products',
    GlassesAndOptometrist: 'glasses_and_optometrist',
    GoCarts: 'go_carts',
    Golf: 'golf',
    GoodsAndMerchandise: 'goods_and_merchandise',
    GovernmentDepartmentsAndAgencies: 'government_departments_and_agencies',
    GovernmentLobbyists: 'government_lobbyists',
    Greek: 'greek',
    GunRanges: 'gun_ranges',
    Gym: 'gym',
    Gymnastics: 'gymnastics',
    GymsAndFitnessCenters: 'gyms_and_fitness_centers',
    HairRemoval: 'hair_removal',
    HairSalonsAndBarbers: 'hair_salons_and_barbers',
    HardwareAndServices: 'hardware_and_services',
    HardwareStore: 'hardware_store',
    HealthFood: 'health_food',
    Healthcare: 'healthcare',
    HealthcareServices: 'healthcare_services',
    HeatingVentilatingAndAirConditioning: 'heating_ventilating_and_air_conditioning',
    Heliports: 'heliports',
    Hiking: 'hiking',
    HistoricSites: 'historic_sites',
    HobbyAndCollectibles: 'hobby_and_collectibles',
    Hockey: 'hockey',
    HoldingAndInvestmentOffices: 'holding_and_investment_offices',
    Home: 'home',
    HomeAppliances: 'home_appliances',
    HomeImprovement: 'home_improvement',
    HomeInspectionServices: 'home_inspection_services',
    HookahLounges: 'hookah_lounges',
    HospitalsClinicsAndMedicalCenters: 'hospitals_clinics_and_medical_centers',
    Hostels: 'hostels',
    HotAirBalloons: 'hot_air_balloons',
    HotelLounge: 'hotel_lounge',
    HotelsAndMotels: 'hotels_and_motels',
    Household: 'household',
    Housewares: 'housewares',
    HousingAssistanceAndShelters: 'housing_assistance_and_shelters',
    HumanResources: 'human_resources',
    HuntingAndFishing: 'hunting_and_fishing',
    IceCream: 'ice_cream',
    Immigration: 'immigration',
    ImportAndExport: 'import_and_export',
    Income: 'income',
    Indian: 'indian',
    Indonesian: 'indonesian',
    IndustrialMachineryAndEquipment: 'industrial_machinery_and_equipment',
    IndustrialMachineryAndVehicles: 'industrial_machinery_and_vehicles',
    IndustrialSupplies: 'industrial_supplies',
    Infrastructure: 'infrastructure',
    InsufficientFunds: 'insufficient_funds',
    Insurance: 'insurance',
    Interest: 'interest',
    InterestCharged: 'interest_charged',
    InterestEarned: 'interest_earned',
    InteriorDesign: 'interior_design',
    InternalAccountTransfer: 'internal_account_transfer',
    InternalMedicine: 'internal_medicine',
    Internet: 'internet',
    InternetCafes: 'internet_cafes',
    InternetServices: 'internet_services',
    Investment: 'investment',
    Italian: 'italian',
    Japanese: 'japanese',
    JazzAndBluesCafe: 'jazz_and_blues_cafe',
    JewelryAndWatches: 'jewelry_and_watches',
    JuiceBar: 'juice_bar',
    Karaoke: 'karaoke',
    KeepTheChangeSavingsProgram: 'keep_the_change_savings_program',
    Kids: 'kids',
    KidsStore: 'kids\'_store',
    Kitchens: 'kitchens',
    Korean: 'korean',
    Lakes: 'lakes',
    Landmarks: 'landmarks',
    LandscapingAndGardeners: 'landscaping_and_gardeners',
    LatePayment: 'late_payment',
    LatinAmerican: 'latin_american',
    LaundryAndGarmentServices: 'laundry_and_garment_services',
    LawEnforcement: 'law_enforcement',
    LawnAndGarden: 'lawn_and_garden',
    Leather: 'leather',
    LeatherGoods: 'leather_goods',
    Legal: 'legal',
    Libraries: 'libraries',
    LightingFixtures: 'lighting_fixtures',
    LimosAndChauffeurs: 'limos_and_chauffeurs',
    LingerieStore: 'lingerie_store',
    LivestockAndAnimals: 'livestock_and_animals',
    Loan: 'loan',
    LoansAndMortgages: 'loans_and_mortgages',
    LodgesAndVacationRentals: 'lodges_and_vacation_rentals',
    Lodging: 'lodging',
    LoggingAndSawmills: 'logging_and_sawmills',
    Luggage: 'luggage',
    MachineShops: 'machine_shops',
    MaintenanceAndRepair: 'maintenance_and_repair',
    Management: 'management',
    ManicuresAndPedicures: 'manicures_and_pedicures',
    Manufacturing: 'manufacturing',
    MarineSupplies: 'marine_supplies',
    MarketResearchAndConsulting: 'market_research_and_consulting',
    Masonry: 'masonry',
    MassageClinicsAndTherapists: 'massage_clinics_and_therapists',
    Media: 'media',
    MediaProduction: 'media_production',
    MedicalSuppliesAndLabs: 'medical_supplies_and_labs',
    Mediterranean: 'mediterranean',
    MensStore: 'men\'s_store',
    MentalHealth: 'mental_health',
    Metal: 'metal',
    MetalProducts: 'metal_products',
    Metals: 'metals',
    Mexican: 'mexican',
    MiddleEastern: 'middle_eastern',
    Military: 'military',
    MiniatureGolf: 'miniature_golf',
    Mining: 'mining',
    MobileHomes: 'mobile_homes',
    MobilePhones: 'mobile_phones',
    MonumentsAndMemorials: 'monuments_and_memorials',
    Moroccan: 'moroccan',
    Mosques: 'mosques',
    MotorcycleMopedAndScooterRepair: 'motorcycle_moped_and_scooter_repair',
    MotorcyclesMopedsAndScooters: 'motorcycles_mopeds_and_scooters',
    Mountains: 'mountains',
    Movers: 'movers',
    MovieTheatres: 'movie_theatres',
    Museums: 'museums',
    MusicVideoAndDvd: 'music_video_and_dvd',
    MusicAndShowVenues: 'music_and_show_venues',
    MusicalInstruments: 'musical_instruments',
    NaturalParks: 'natural_parks',
    Neurologists: 'neurologists',
    NewsReporting: 'news_reporting',
    Newsstands: 'newsstands',
    NightClubs: 'night_clubs',
    Nightlife: 'nightlife',
    NonMetallicMinerals: 'non-metallic_minerals',
    NonmetallicMineralProducts: 'nonmetallic_mineral_products',
    Nurses: 'nurses',
    Nutritionists: 'nutritionists',
    ObstetriciansAndGynecologists: 'obstetricians_and_gynecologists',
    Office: 'office',
    OfficeSupplies: 'office_supplies',
    OilAndGas: 'oil_and_gas',
    Oncologists: 'oncologists',
    OnlineAdvertising: 'online_advertising',
    OnlineSubscriptions: 'online_subscriptions',
    Ophthalmologists: 'ophthalmologists',
    Optometrists: 'optometrists',
    OrganizationsAndAssociations: 'organizations_and_associations',
    OrthopedicSurgeons: 'orthopedic_surgeons',
    Other: 'other',
    Outdoors: 'outdoors',
    Outlet: 'outlet',
    Overdraft: 'overdraft',
    Packaging: 'packaging',
    Paintball: 'paintball',
    Painting: 'painting',
    Paper: 'paper',
    PaperProducts: 'paper_products',
    Parking: 'parking',
    Parks: 'parks',
    PartyCenters: 'party_centers',
    Pathologists: 'pathologists',
    PawnShops: 'pawn_shops',
    Payment: 'payment',
    Paypal: 'paypal',
    Payroll: 'payroll',
    Pediatricians: 'pediatricians',
    PersonalCare: 'personal_care',
    PersonalTrainers: 'personal_trainers',
    PestControl: 'pest_control',
    Pet: 'pet',
    Petroleum: 'petroleum',
    Pets: 'pets',
    Pharmacies: 'pharmacies',
    Phone: 'phone',
    Photography: 'photography',
    PhotosAndFrames: 'photos_and_frames',
    PhysicalTherapy: 'physical_therapy',
    Physicians: 'physicians',
    PicnicAreas: 'picnic_areas',
    Piercing: 'piercing',
    Pizza: 'pizza',
    Plaid: 'plaid',
    PlasticProducts: 'plastic_products',
    PlasticSurgeons: 'plastic_surgeons',
    Plastics: 'plastics',
    Playgrounds: 'playgrounds',
    Plumbing: 'plumbing',
    Podiatrists: 'podiatrists',
    PoliceStations: 'police_stations',
    PoolsAndSpas: 'pools_and_spas',
    Portuguese: 'portuguese',
    PostOffices: 'post_offices',
    PregnancyAndSexualHealth: 'pregnancy_and_sexual_health',
    PrimaryAndSecondarySchools: 'primary_and_secondary_schools',
    PrintTvRadioAndOutdoorAdvertising: 'print_tv_radio_and_outdoor_advertising',
    PrintingAndPublishing: 'printing_and_publishing',
    PromotionalItems: 'promotional_items',
    PropertyManagement: 'property_management',
    Psychiatrists: 'psychiatrists',
    PsychicsAndAstrologers: 'psychics_and_astrologers',
    Psychologists: 'psychologists',
    PublicAndSocialServices: 'public_and_social_services',
    PublicRelations: 'public_relations',
    PublicTransportationServices: 'public_transportation_services',
    RaceTracks: 'race_tracks',
    RacquetSports: 'racquet_sports',
    Racquetball: 'racquetball',
    Radiologists: 'radiologists',
    Rafting: 'rafting',
    Rail: 'rail',
    RealEstate: 'real_estate',
    RealEstateAgents: 'real_estate_agents',
    RealEstateAppraiser: 'real_estate_appraiser',
    RealEstateDevelopmentAndTitleCompanies: 'real_estate_development_and_title_companies',
    Recreation: 'recreation',
    RecreationCenters: 'recreation_centers',
    RefrigerationAndIce: 'refrigeration_and_ice',
    Refund: 'refund',
    Religious: 'religious',
    RenewableEnergy: 'renewable_energy',
    Rent: 'rent',
    RepairServices: 'repair_services',
    Research: 'research',
    Resorts: 'resorts',
    Respiratory: 'respiratory',
    Restaurants: 'restaurants',
    Retirement: 'retirement',
    RideShare: 'ride_share',
    Rivers: 'rivers',
    RockClimbing: 'rock_climbing',
    Roofers: 'roofers',
    Rubber: 'rubber',
    RubberProducts: 'rubber_products',
    Running: 'running',
    RvsAndMotorHomes: 'rvs_and_motor_homes',
    SalvageYards: 'salvage_yards',
    SanitaryAndWasteManagement: 'sanitary_and_waste_management',
    SaveAsYouGo: 'save_as_you_go',
    Scandinavian: 'scandinavian',
    Scientific: 'scientific',
    ScubaDiving: 'scuba_diving',
    Seafood: 'seafood',
    SearchEngineMarketingAndOptimization: 'search_engine_marketing_and_optimization',
    SecurityAndSafety: 'security_and_safety',
    SeniorCitizenServices: 'senior_citizen_services',
    Service: 'service',
    ServiceInstruments: 'service_instruments',
    Services: 'services',
    Shipping: 'shipping',
    ShippingAndFreight: 'shipping_and_freight',
    ShoeStore: 'shoe_store',
    Shopping: 'shopping',
    ShoppingCentersAndMalls: 'shopping_centers_and_malls',
    Shops: 'shops',
    Skating: 'skating',
    SkinCare: 'skin_care',
    Skydiving: 'skydiving',
    SnowSports: 'snow_sports',
    Soccer: 'soccer',
    SocialClubs: 'social_clubs',
    Software: 'software',
    SoftwareDevelopment: 'software_development',
    Spanish: 'spanish',
    Spas: 'spas',
    Specialty: 'specialty',
    Sport: 'sport',
    SportingGoods: 'sporting_goods',
    SportsAndRecreationCamps: 'sports_and_recreation_camps',
    SportsBar: 'sports_bar',
    SportsClubs: 'sports_clubs',
    SportsVenues: 'sports_venues',
    Square: 'square',
    SquareCash: 'square_cash',
    StadiumsAndArenas: 'stadiums_and_arenas',
    Steakhouses: 'steakhouses',
    StockBrokers: 'stock_brokers',
    Storage: 'storage',
    StripClub: 'strip_club',
    StudentAidAndGrants: 'student_aid_and_grants',
    Subscription: 'subscription',
    SupermarketsAndGroceries: 'supermarkets_and_groceries',
    Sushi: 'sushi',
    Swimming: 'swimming',
    SwimmingPoolMaintenanceAndServices: 'swimming_pool_maintenance_and_services',
    Swimwear: 'swimwear',
    Swiss: 'swiss',
    SymphonyAndOpera: 'symphony_and_opera',
    Synagogues: 'synagogues',
    Tailors: 'tailors',
    TanningSalons: 'tanning_salons',
    Tattooing: 'tattooing',
    Tax: 'tax',
    Taxes: 'taxes',
    Taxi: 'taxi',
    TelecommunicationServices: 'telecommunication_services',
    Television: 'television',
    Temple: 'temple',
    Tennis: 'tennis',
    Textiles: 'textiles',
    Thai: 'thai',
    TheatricalProductions: 'theatrical_productions',
    ThirdParty: 'third_party',
    Tobacco: 'tobacco',
    TollsAndFees: 'tolls_and_fees',
    TouristInformationAndServices: 'tourist_information_and_services',
    Towing: 'towing',
    Toys: 'toys',
    Transfer: 'transfer',
    TransfersAndAdjustments: 'transfers_and_adjustments',
    Transport: 'transport',
    Transportation: 'transportation',
    TransportationCenters: 'transportation_centers',
    TransportationEquipment: 'transportation_equipment',
    Travel: 'travel',
    TravelAndTransportation: 'travel_and_transportation',
    TravelAgentsAndTourOperators: 'travel_agents_and_tour_operators',
    TreeService: 'tree_service',
    Turkish: 'turkish',
    TutoringAndEducationalServices: 'tutoring_and_educational_services',
    Upholstery: 'upholstery',
    Urologists: 'urologists',
    UsedCarDealers: 'used_car_dealers',
    Utilities: 'utilities',
    VeganAndVegetarian: 'vegan_and_vegetarian',
    Venmo: 'venmo',
    Veterinarians: 'veterinarians',
    VideoGames: 'video_games',
    VintageAndThrift: 'vintage_and_thrift',
    VocationalSchools: 'vocational_schools',
    WarehousesAndWholesaleStores: 'warehouses_and_wholesale_stores',
    Water: 'water',
    WaterAndWasteManagement: 'water_and_waste_management',
    WaterSports: 'water_sports',
    WebDesignAndDevelopment: 'web_design_and_development',
    WeddingAndBridal: 'wedding_and_bridal',
    Welding: 'welding',
    Wholesale: 'wholesale',
    WineBar: 'wine_bar',
    Winery: 'winery',
    Wire: 'wire',
    WireTransfer: 'wire_transfer',
    Withdrawal: 'withdrawal',
    WomensStore: 'women\'s_store',
    WoodProducts: 'wood_products',
    WritingCopywritingAndTechnicalWriting: 'writing_copywriting_and_technical_writing',
    YogaAndPilates: 'yoga_and_pilates',
    YouthOrganizations: 'youth_organizations',
    Zoo: 'zoo',
    Minus: '-'
} as const;

export type AssetReportTransactionCategoryEnum = typeof AssetReportTransactionCategoryEnum[keyof typeof AssetReportTransactionCategoryEnum];
export const AssetReportTransactionStatusEnum = {
    Pending: 'pending',
    Posted: 'posted'
} as const;

export type AssetReportTransactionStatusEnum = typeof AssetReportTransactionStatusEnum[keyof typeof AssetReportTransactionStatusEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const CountryCode = {
    Us: 'US',
    Ca: 'CA'
} as const;

export type CountryCode = typeof CountryCode[keyof typeof CountryCode];


/**
 * 
 * @export
 * @interface CreateAssetReportRequest
 */
export interface CreateAssetReportRequest {
    /**
     * Access fuse token corresponding to the financial account to be create the Asset Report for.
     * @type {string}
     * @memberof CreateAssetReportRequest
     */
    'access_token': string;
    /**
     * The maximum integer number of days of history to include in the Asset Report
     * @type {number}
     * @memberof CreateAssetReportRequest
     */
    'days_requested': number;
}
/**
 * 
 * @export
 * @interface CreateAssetReportResponse
 */
export interface CreateAssetReportResponse {
    /**
     * A token that can be provided to endpoints such as /asset_report to fetch an asset report.
     * @type {string}
     * @memberof CreateAssetReportResponse
     */
    'asset_report_token'?: string;
    /**
     * A unique ID identifying an Asset Report.
     * @type {string}
     * @memberof CreateAssetReportResponse
     */
    'asset_report_id'?: string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof CreateAssetReportResponse
     */
    'request_id'?: string;
}
/**
 * 
 * @export
 * @interface CreateEntityRequest
 */
export interface CreateEntityRequest {
    /**
     * Id of the entity
     * @type {string}
     * @memberof CreateEntityRequest
     */
    'id'?: string;
    /**
     * Email of the entity
     * @type {string}
     * @memberof CreateEntityRequest
     */
    'email'?: string;
    /**
     * These will force the user to connect through all of these aggregators
     * @type {Array<Aggregator>}
     * @memberof CreateEntityRequest
     */
    'aggregators'?: Array<Aggregator>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateEntityRequest
     */
    'institution_ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateEntityResponse
 */
export interface CreateEntityResponse {
    /**
     * Id of the entity
     * @type {string}
     * @memberof CreateEntityResponse
     */
    'id'?: string;
    /**
     * Email of the entity
     * @type {string}
     * @memberof CreateEntityResponse
     */
    'email'?: string;
    /**
     * These will force the user to connect through all of these aggregators
     * @type {Array<Aggregator>}
     * @memberof CreateEntityResponse
     */
    'aggregators'?: Array<Aggregator>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateEntityResponse
     */
    'institution_ids'?: Array<string>;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof CreateEntityResponse
     */
    'request_id'?: string;
}
/**
 * 
 * @export
 * @interface CreateLinkTokenRequest
 */
export interface CreateLinkTokenRequest {
    /**
     * An id that is unique for an institution.
     * @type {string}
     * @memberof CreateLinkTokenRequest
     */
    'institution_id': string;
    /**
     * 
     * @type {Entity}
     * @memberof CreateLinkTokenRequest
     */
    'entity': Entity;
    /**
     * The name of your application. This is what will be displayed to users.
     * @type {string}
     * @memberof CreateLinkTokenRequest
     */
    'client_name': string;
    /**
     * The session client secret created from the \'Create session client secret\' endpoint
     * @type {string}
     * @memberof CreateLinkTokenRequest
     */
    'session_client_secret': string;
    /**
     * This field allows you to set a unique webhook URL for each individual entity. By specifying an entity-specific webhook URL, you can receive and process data events for each entity separately. If this field is left empty, the organization-wide webhook URL set in the sandbox/production environment will be used as the default for all entities.
     * @type {string}
     * @memberof CreateLinkTokenRequest
     */
    'webhook_url'?: string;
    /**
     * 
     * @type {CreateLinkTokenRequestMx}
     * @memberof CreateLinkTokenRequest
     */
    'mx'?: CreateLinkTokenRequestMx;
    /**
     * 
     * @type {CreateLinkTokenRequestPlaid}
     * @memberof CreateLinkTokenRequest
     */
    'plaid'?: CreateLinkTokenRequestPlaid;
    /**
     * 
     * @type {CreateLinkTokenRequestTeller}
     * @memberof CreateLinkTokenRequest
     */
    'teller'?: CreateLinkTokenRequestTeller;
}
/**
 * An object specifying information about the MX configuration to use for deciding which MX supported financial institutions to display.
 * @export
 * @interface CreateLinkTokenRequestMx
 */
export interface CreateLinkTokenRequestMx {
    /**
     * Follows the same schema as MX\'s request a connect url(https://docs.mx.com/api#connect_request_a_url) schema.
     * @type {object}
     * @memberof CreateLinkTokenRequestMx
     */
    'config'?: object;
}
/**
 * An object specifying information about the Plaid configuration to use when creating a link token. 
 * @export
 * @interface CreateLinkTokenRequestPlaid
 */
export interface CreateLinkTokenRequestPlaid {
    /**
     * Follows the same schema as Plaid\'s Link Token Create Schema(https://plaid.com/docs/api/tokens/#linktokencreate). \'products\', \'client_id\', \'secret\', \'client_user_id\', \'client_name\', \'webhook\', \'institution_data\' and \'country_codes\' (only US and Canada is supported right now) will be set by Fuse and override any values you set.
     * @type {object}
     * @memberof CreateLinkTokenRequestPlaid
     */
    'config'?: object;
}
/**
 * An object specifying information about the Teller configuration to use when creating a link token. 
 * @export
 * @interface CreateLinkTokenRequestTeller
 */
export interface CreateLinkTokenRequestTeller {
    /**
     * 
     * @type {CreateLinkTokenRequestTellerConfig}
     * @memberof CreateLinkTokenRequestTeller
     */
    'config'?: CreateLinkTokenRequestTellerConfig;
}
/**
 * 
 * @export
 * @interface CreateLinkTokenRequestTellerConfig
 */
export interface CreateLinkTokenRequestTellerConfig {
    /**
     * The mode of account selection: - \'disabled\': automatically connect all the supported financial accounts associated with this user\'s account at the institution (default). - \'single\': the user will see a list of supported financial accounts and will need to select one to connect - \'multiple\': the user will see a list of supported financial accounts and will need to select one or more to connect
     * @type {string}
     * @memberof CreateLinkTokenRequestTellerConfig
     */
    'selectAccount'?: CreateLinkTokenRequestTellerConfigSelectAccountEnum;
}

export const CreateLinkTokenRequestTellerConfigSelectAccountEnum = {
    Disabled: 'disabled',
    Single: 'single',
    Multiple: 'multiple'
} as const;

export type CreateLinkTokenRequestTellerConfigSelectAccountEnum = typeof CreateLinkTokenRequestTellerConfigSelectAccountEnum[keyof typeof CreateLinkTokenRequestTellerConfigSelectAccountEnum];

/**
 * 
 * @export
 * @interface CreateLinkTokenResponse
 */
export interface CreateLinkTokenResponse {
    /**
     * Token needed by the frontend sdk to initiate the connection
     * @type {string}
     * @memberof CreateLinkTokenResponse
     */
    'link_token': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof CreateLinkTokenResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface CreateSessionRequest
 */
export interface CreateSessionRequest {
    /**
     * 
     * @type {Array<Aggregator>}
     * @memberof CreateSessionRequest
     */
    'supported_financial_institution_aggregators': Array<Aggregator>;
    /**
     * List of products that you would like the institutions to support
     * @type {Array<Product>}
     * @memberof CreateSessionRequest
     */
    'products': Array<Product>;
    /**
     * List of country codes that you would like the institutions to support
     * @type {Array<CountryCode>}
     * @memberof CreateSessionRequest
     */
    'country_codes'?: Array<CountryCode>;
    /**
     * 
     * @type {Entity}
     * @memberof CreateSessionRequest
     */
    'entity': Entity;
    /**
     * The fuse access token for an existing account integration. This will perform the process to reconnect an existing disconnected account.
     * @type {string}
     * @memberof CreateSessionRequest
     */
    'access_token'?: string;
    /**
     * Set to false for web SDKs (e.g., React), and true for mobile SDKs (e.g., React Native, Flutter, iOS, Android).
     * @type {boolean}
     * @memberof CreateSessionRequest
     */
    'is_web_view'?: boolean;
}
/**
 * 
 * @export
 * @interface CreateSessionResponse
 */
export interface CreateSessionResponse {
    /**
     * 4 hours from the point of creation
     * @type {string}
     * @memberof CreateSessionResponse
     */
    'expiration': string;
    /**
     * Token needed by the frontend sdk to start the process
     * @type {string}
     * @memberof CreateSessionResponse
     */
    'client_secret': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof CreateSessionResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface CreateSpendPowerCustomizationResponse
 */
export interface CreateSpendPowerCustomizationResponse {
    /**
     * The id of the created customization.
     * @type {string}
     * @memberof CreateSpendPowerCustomizationResponse
     */
    'id': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof CreateSpendPowerCustomizationResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface CreateSpendPowerRequest
 */
export interface CreateSpendPowerRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof CreateSpendPowerRequest
     */
    'access_token': string;
    /**
     * The remote account id to create the spend power for.
     * @type {string}
     * @memberof CreateSpendPowerRequest
     */
    'remote_account_id': string;
    /**
     * The spend power customization id.
     * @type {string}
     * @memberof CreateSpendPowerRequest
     */
    'customization_id': string;
}
/**
 * 
 * @export
 * @interface CreateSpendPowerResponse
 */
export interface CreateSpendPowerResponse {
    /**
     * The id of the created spend power
     * @type {string}
     * @memberof CreateSpendPowerResponse
     */
    'id': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof CreateSpendPowerResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface Currency
 */
export interface Currency {
    /**
     * The ISO-4217 currency code
     * @type {string}
     * @memberof Currency
     */
    'code': string;
    /**
     * The name of the currency
     * @type {string}
     * @memberof Currency
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface DeleteFinancialConnectionResponse
 */
export interface DeleteFinancialConnectionResponse {
    /**
     * Id of the deleted financial connection
     * @type {string}
     * @memberof DeleteFinancialConnectionResponse
     */
    'financial_connection_id': string;
    /**
     * Access token of the deleted financial connection
     * @type {string}
     * @memberof DeleteFinancialConnectionResponse
     */
    'access_token': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof DeleteFinancialConnectionResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface DeleteSpendPowerResponse
 */
export interface DeleteSpendPowerResponse {
    /**
     * 
     * @type {SpendPower}
     * @memberof DeleteSpendPowerResponse
     */
    'spend_power': SpendPower;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof DeleteSpendPowerResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     * Unique identifier for the user or business account that is connecting to an institution. Use this id when calling the GET /entities/${entity_id} endpoint.
     * @type {string}
     * @memberof Entity
     */
    'id': string;
    /**
     * Name for the user or business account.
     * @type {string}
     * @memberof Entity
     */
    'name'?: string;
    /**
     * Email address associated with the user or business account.
     * @type {string}
     * @memberof Entity
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface ExchangeFinancialConnectionsPublicTokenRequest
 */
export interface ExchangeFinancialConnectionsPublicTokenRequest {
    /**
     * The public token created after a user connects with their financial institution
     * @type {string}
     * @memberof ExchangeFinancialConnectionsPublicTokenRequest
     */
    'public_token': string;
}
/**
 * 
 * @export
 * @interface ExchangeFinancialConnectionsPublicTokenResponse
 */
export interface ExchangeFinancialConnectionsPublicTokenResponse {
    /**
     * Token used for querying data on the user, ie account details, balances etc. This does NOT expire and should be stored securely.
     * @type {string}
     * @memberof ExchangeFinancialConnectionsPublicTokenResponse
     */
    'access_token': string;
    /**
     * The id of the new financial connection. Every webhook will be sent with this id. Use this id when calling the GET /financial_connection/${financial_connection_id} endpoint. 
     * @type {string}
     * @memberof ExchangeFinancialConnectionsPublicTokenResponse
     */
    'financial_connection_id': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof ExchangeFinancialConnectionsPublicTokenResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface FinancialConnectionData
 */
export interface FinancialConnectionData {
    /**
     * The financial connection id.
     * @type {string}
     * @memberof FinancialConnectionData
     */
    'id': string;
    /**
     * The Fuse Institution ID associated with the financial connection
     * @type {string}
     * @memberof FinancialConnectionData
     */
    'institution_id': string;
}
/**
 * 
 * @export
 * @interface FinancialConnectionDetails
 */
export interface FinancialConnectionDetails {
    /**
     * The fuse financial connection id.
     * @type {string}
     * @memberof FinancialConnectionDetails
     */
    'id': string;
    /**
     * Connection status of the current financial connection
     * @type {string}
     * @memberof FinancialConnectionDetails
     */
    'connection_status': FinancialConnectionDetailsConnectionStatusEnum;
    /**
     * Last time the connection status was updated in ISO-8601 format.
     * @type {string}
     * @memberof FinancialConnectionDetails
     */
    'connection_status_updated_at': string;
    /**
     * Whether this is an oauth connection
     * @type {boolean}
     * @memberof FinancialConnectionDetails
     */
    'is_oauth': boolean;
    /**
     * 
     * @type {Aggregator}
     * @memberof FinancialConnectionDetails
     */
    'aggregator': Aggregator;
    /**
     * 
     * @type {FinancialConnectionDetailsPlaid}
     * @memberof FinancialConnectionDetails
     */
    'plaid'?: FinancialConnectionDetailsPlaid;
    /**
     * 
     * @type {FinancialConnectionDetailsTeller}
     * @memberof FinancialConnectionDetails
     */
    'teller'?: FinancialConnectionDetailsTeller;
    /**
     * 
     * @type {FinancialConnectionDetailsMx}
     * @memberof FinancialConnectionDetails
     */
    'mx'?: FinancialConnectionDetailsMx;
}

export const FinancialConnectionDetailsConnectionStatusEnum = {
    Connected: 'connected',
    Disconnected: 'disconnected',
    Finished: 'finished'
} as const;

export type FinancialConnectionDetailsConnectionStatusEnum = typeof FinancialConnectionDetailsConnectionStatusEnum[keyof typeof FinancialConnectionDetailsConnectionStatusEnum];

/**
 * Data needed to query data from MX
 * @export
 * @interface FinancialConnectionDetailsMx
 */
export interface FinancialConnectionDetailsMx {
    /**
     * User GUID for MX
     * @type {string}
     * @memberof FinancialConnectionDetailsMx
     */
    'user_guid': string;
    /**
     * Member GUID for MX
     * @type {string}
     * @memberof FinancialConnectionDetailsMx
     */
    'member_guid': string;
}
/**
 * Data needed to query data from Plaid
 * @export
 * @interface FinancialConnectionDetailsPlaid
 */
export interface FinancialConnectionDetailsPlaid {
    /**
     * Access token for Plaid
     * @type {string}
     * @memberof FinancialConnectionDetailsPlaid
     */
    'access_token': string;
    /**
     * ID of the item associated with the access token in Plaid
     * @type {string}
     * @memberof FinancialConnectionDetailsPlaid
     */
    'item_id': string;
}
/**
 * Data needed to query data from Teller
 * @export
 * @interface FinancialConnectionDetailsTeller
 */
export interface FinancialConnectionDetailsTeller {
    /**
     * Access token for Teller
     * @type {string}
     * @memberof FinancialConnectionDetailsTeller
     */
    'access_token': string;
    /**
     * Enrollment ID associated with the access token in Teller
     * @type {string}
     * @memberof FinancialConnectionDetailsTeller
     */
    'enrollment_id': string;
}
/**
 * 
 * @export
 * @interface FinancialConnectionsAccount
 */
export interface FinancialConnectionsAccount {
    /**
     * Remote Id of the account, ie Plaid or Teller account id
     * @type {string}
     * @memberof FinancialConnectionsAccount
     */
    'remote_id': string;
    /**
     * Uniquely identifies this account across all accounts associated with your organization. See more information here: https://letsfuse.readme.io/docs/duplicate-accounts
     * @type {string}
     * @memberof FinancialConnectionsAccount
     */
    'fingerprint': string;
    /**
     * 
     * @type {FinancialConnectionsAccountInstitution}
     * @memberof FinancialConnectionsAccount
     */
    'institution'?: FinancialConnectionsAccountInstitution;
    /**
     * The partial account number.
     * @type {string}
     * @memberof FinancialConnectionsAccount
     */
    'mask'?: string;
    /**
     * The account\'s name, ie \'My Checking\'
     * @type {string}
     * @memberof FinancialConnectionsAccount
     */
    'name': string;
    /**
     * 
     * @type {AccountType}
     * @memberof FinancialConnectionsAccount
     */
    'type': AccountType;
    /**
     * 
     * @type {AccountSubtype}
     * @memberof FinancialConnectionsAccount
     */
    'subtype'?: AccountSubtype;
    /**
     * 
     * @type {FinancialConnectionsAccountCachedBalance}
     * @memberof FinancialConnectionsAccount
     */
    'balance': FinancialConnectionsAccountCachedBalance;
}


/**
 * 
 * @export
 * @interface FinancialConnectionsAccountBalance
 */
export interface FinancialConnectionsAccountBalance {
    /**
     * Remote Account Id of the transaction, ie Plaid Account Id
     * @type {string}
     * @memberof FinancialConnectionsAccountBalance
     */
    'remote_account_id': string;
    /**
     * Amount in cents after factoring in pending balances. For accounts with credit features, the available funds generally equal the credit limit. Some institutions may not provide an available balance calculation. If this is the case, Fuse will return a null value for the available balance. To ensure you have the most accurate information, we recommend obtaining the current balance by using \'balance.available || balance.current\'.
     * @type {number}
     * @memberof FinancialConnectionsAccountBalance
     */
    'available'?: number;
    /**
     * Amount in cents without factoring in pending balances
     * @type {number}
     * @memberof FinancialConnectionsAccountBalance
     */
    'current'?: number;
    /**
     * The ISO-4217 currency code of the balance.
     * @type {string}
     * @memberof FinancialConnectionsAccountBalance
     */
    'iso_currency_code'?: string;
    /**
     * The last time the account balance was updated, represented as an ISO 8601 timestamp (YYYY-MM-DDTHH:mm:ssZ). This value may not be available for some accounts.
     * @type {string}
     * @memberof FinancialConnectionsAccountBalance
     */
    'last_updated_date'?: string;
}
/**
 * 
 * @export
 * @interface FinancialConnectionsAccountCachedBalance
 */
export interface FinancialConnectionsAccountCachedBalance {
    /**
     * The amount of funds available to be withdrawn from the account, as determined by the financial institution Available balance may be cached and is not guaranteed to be up-to-date in realtime unless the value was returned by /financial_connections/balances. For accounts with credit features, the available funds generally equal the credit limit. Some institutions may not provide an available balance calculation. If this is the case, Fuse will return a null value for the available balance. To ensure you have the most accurate information, we recommend obtaining the current balance by using \'balance.available || balance.current\'.
     * @type {number}
     * @memberof FinancialConnectionsAccountCachedBalance
     */
    'available'?: number;
    /**
     * Amount without factoring in pending balances
     * @type {number}
     * @memberof FinancialConnectionsAccountCachedBalance
     */
    'current'?: number;
    /**
     * The ISO-4217 currency code of the balance.
     * @type {string}
     * @memberof FinancialConnectionsAccountCachedBalance
     */
    'iso_currency_code'?: string;
    /**
     * The date of the last update to the balance.
     * @type {string}
     * @memberof FinancialConnectionsAccountCachedBalance
     */
    'last_updated_date'?: string;
}
/**
 * 
 * @export
 * @interface FinancialConnectionsAccountDetails
 */
export interface FinancialConnectionsAccountDetails {
    /**
     * Remote Id of the account, ie Plaid or Teller account id
     * @type {string}
     * @memberof FinancialConnectionsAccountDetails
     */
    'remote_id': string;
    /**
     * 
     * @type {FinancialConnectionsAccountDetailsAch}
     * @memberof FinancialConnectionsAccountDetails
     */
    'ach': FinancialConnectionsAccountDetailsAch;
}
/**
 * 
 * @export
 * @interface FinancialConnectionsAccountDetailsAch
 */
export interface FinancialConnectionsAccountDetailsAch {
    /**
     * Account number
     * @type {string}
     * @memberof FinancialConnectionsAccountDetailsAch
     */
    'account'?: string;
    /**
     * Routing number
     * @type {string}
     * @memberof FinancialConnectionsAccountDetailsAch
     */
    'routing'?: string;
    /**
     * Wire routing number
     * @type {string}
     * @memberof FinancialConnectionsAccountDetailsAch
     */
    'wire_routing'?: string;
    /**
     * BACS routing number
     * @type {string}
     * @memberof FinancialConnectionsAccountDetailsAch
     */
    'bacs_routing'?: string;
}
/**
 * 
 * @export
 * @interface FinancialConnectionsAccountInstitution
 */
export interface FinancialConnectionsAccountInstitution {
    /**
     * 
     * @type {string}
     * @memberof FinancialConnectionsAccountInstitution
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface FinancialConnectionsAccountLiability
 */
export interface FinancialConnectionsAccountLiability {
    /**
     * Remote Id of the account, ie Plaid or Teller account id
     * @type {string}
     * @memberof FinancialConnectionsAccountLiability
     */
    'remote_id': string;
    /**
     * Uniquely identifies this account across all accounts associated with your organization. See more information here: https://letsfuse.readme.io/docs/duplicate-accounts
     * @type {string}
     * @memberof FinancialConnectionsAccountLiability
     */
    'fingerprint': string;
    /**
     * 
     * @type {FinancialConnectionsAccountInstitution}
     * @memberof FinancialConnectionsAccountLiability
     */
    'institution'?: FinancialConnectionsAccountInstitution;
    /**
     * The partial account number.
     * @type {string}
     * @memberof FinancialConnectionsAccountLiability
     */
    'mask'?: string;
    /**
     * The account\'s name, ie \'My Checking\'
     * @type {string}
     * @memberof FinancialConnectionsAccountLiability
     */
    'name': string;
    /**
     * 
     * @type {AccountType}
     * @memberof FinancialConnectionsAccountLiability
     */
    'type': AccountType;
    /**
     * 
     * @type {AccountSubtype}
     * @memberof FinancialConnectionsAccountLiability
     */
    'subtype'?: AccountSubtype;
    /**
     * 
     * @type {FinancialConnectionsAccountCachedBalance}
     * @memberof FinancialConnectionsAccountLiability
     */
    'balance': FinancialConnectionsAccountCachedBalance;
    /**
     * The various interest rates that apply to the account. If APR data is not available, this array will be empty.
     * @type {Array<FinancialConnectionsAccountLiabilityAllOfAprs>}
     * @memberof FinancialConnectionsAccountLiability
     */
    'aprs'?: Array<FinancialConnectionsAccountLiabilityAllOfAprs>;
    /**
     * The interest rate on the loan as a percentage.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiability
     */
    'interest_rate_percentage'?: number;
    /**
     * The original principal balance of the loan.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiability
     */
    'origination_principal_amount'?: number;
    /**
     * The due date for the next payment. The due date is null if a payment is not expected.
     * @type {string}
     * @memberof FinancialConnectionsAccountLiability
     */
    'next_payment_due_date'?: string;
    /**
     * The date of the last payment. Dates are returned in an ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof FinancialConnectionsAccountLiability
     */
    'last_payment_date'?: string;
    /**
     * The amount of the last payment.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiability
     */
    'last_payment_amount'?: number;
    /**
     * The minimum payment required for an account. This can apply to any debt account.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiability
     */
    'minimum_payment_amount'?: number;
}


/**
 * 
 * @export
 * @interface FinancialConnectionsAccountLiabilityAllOf
 */
export interface FinancialConnectionsAccountLiabilityAllOf {
    /**
     * The various interest rates that apply to the account. If APR data is not available, this array will be empty.
     * @type {Array<FinancialConnectionsAccountLiabilityAllOfAprs>}
     * @memberof FinancialConnectionsAccountLiabilityAllOf
     */
    'aprs'?: Array<FinancialConnectionsAccountLiabilityAllOfAprs>;
    /**
     * The interest rate on the loan as a percentage.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiabilityAllOf
     */
    'interest_rate_percentage'?: number;
    /**
     * The original principal balance of the loan.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiabilityAllOf
     */
    'origination_principal_amount'?: number;
    /**
     * The due date for the next payment. The due date is null if a payment is not expected.
     * @type {string}
     * @memberof FinancialConnectionsAccountLiabilityAllOf
     */
    'next_payment_due_date'?: string;
    /**
     * The date of the last payment. Dates are returned in an ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof FinancialConnectionsAccountLiabilityAllOf
     */
    'last_payment_date'?: string;
    /**
     * The amount of the last payment.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiabilityAllOf
     */
    'last_payment_amount'?: number;
    /**
     * The minimum payment required for an account. This can apply to any debt account.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiabilityAllOf
     */
    'minimum_payment_amount'?: number;
}
/**
 * 
 * @export
 * @interface FinancialConnectionsAccountLiabilityAllOfAprs
 */
export interface FinancialConnectionsAccountLiabilityAllOfAprs {
    /**
     * Annual Percentage Rate applied.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiabilityAllOfAprs
     */
    'apr_percentage'?: number;
    /**
     * The type of balance to which the APR applies.
     * @type {string}
     * @memberof FinancialConnectionsAccountLiabilityAllOfAprs
     */
    'apr_type'?: string;
}
/**
 * 
 * @export
 * @interface FinancialConnectionsHolding
 */
export interface FinancialConnectionsHolding {
    /**
     * The remote account ID associated with this holding.
     * @type {string}
     * @memberof FinancialConnectionsHolding
     */
    'remote_account_id': string;
    /**
     * The original total value of the holding when it was purchased.
     * @type {number}
     * @memberof FinancialConnectionsHolding
     */
    'cost_basis': number;
    /**
     * The current market value of the holding.
     * @type {number}
     * @memberof FinancialConnectionsHolding
     */
    'value': number;
    /**
     * The number of units of the security held in this holding.
     * @type {number}
     * @memberof FinancialConnectionsHolding
     */
    'quantity': number;
    /**
     * The price of the security as provided by the financial institution managing the holding.
     * @type {number}
     * @memberof FinancialConnectionsHolding
     */
    'institution_price': number;
    /**
     * 
     * @type {FinancialConnectionsInvestmentSecurity}
     * @memberof FinancialConnectionsHolding
     */
    'security': FinancialConnectionsInvestmentSecurity;
}
/**
 * 
 * @export
 * @interface FinancialConnectionsInvestmentSecurity
 */
export interface FinancialConnectionsInvestmentSecurity {
    /**
     * Remote Id of the security, ie Plaid or Snaptrade security id
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'remote_id': string;
    /**
     * The trading symbol for publicly traded securities, or a short identifier if available.
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'symbol': string;
    /**
     * The International Securities Identification Number (ISIN) uniquely identifies the security.
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'isin'?: string;
    /**
     * The Stock Exchange Daily Official List (SEDOL) code uniquely identifies the security, primarily used in the United Kingdom and Ireland.
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'sedol'?: string;
    /**
     * The Committee on Uniform Securities Identification Procedures (CUSIP) number uniquely identifies the security, primarily used in the United States and Canada.
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'cusip'?: string;
    /**
     * The closing price of the security at the end of the most recent trading day.
     * @type {number}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'close_price'?: number;
    /**
     * 
     * @type {Currency}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'currency': Currency;
    /**
     * A descriptive name for the security, suitable for display.
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'name'?: string;
    /**
     * 
     * @type {FinancialConnectionsInvestmentSecurityType}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'type'?: FinancialConnectionsInvestmentSecurityType;
    /**
     * 
     * @type {FinancialConnectionsInvestmentSecurityExchange}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'exchange'?: FinancialConnectionsInvestmentSecurityExchange;
}


/**
 * 
 * @export
 * @interface FinancialConnectionsInvestmentSecurityExchange
 */
export interface FinancialConnectionsInvestmentSecurityExchange {
    /**
     * The Market Identifier Code (MIC) associated with the specific financial market or exchange where the security is traded.
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurityExchange
     */
    'mic_code'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const FinancialConnectionsInvestmentSecurityType = {
    Cash: 'cash',
    Cryptocurrency: 'cryptocurrency',
    Derivative: 'derivative',
    Equity: 'equity',
    Etf: 'etf',
    FixedIncome: 'fixed_income',
    Loan: 'loan',
    MutualFund: 'mutual_fund',
    Other: 'other',
    GlobalDepositaryReceipt: 'global_depositary_receipt',
    OpenEndedFund: 'open_ended_fund',
    Right: 'right',
    Temporary: 'temporary',
    Warrant: 'warrant',
    ClosedEndedFund: 'closed_ended_fund',
    CommonStock: 'common_stock',
    ExchangeTradedFund: 'exchange_traded_fund',
    Bond: 'bond',
    AmericanDepositaryReceipt: 'american_depositary_receipt',
    Unit: 'unit',
    StructuredProduct: 'structured_product',
    PreferredStock: 'preferred_stock',
    RealEstate: 'real_estate',
    Automobile: 'automobile',
    DelistedOrDefunctAsset: 'delisted_or_defunct_asset',
    Minus: '-'
} as const;

export type FinancialConnectionsInvestmentSecurityType = typeof FinancialConnectionsInvestmentSecurityType[keyof typeof FinancialConnectionsInvestmentSecurityType];


/**
 * 
 * @export
 * @interface FinancialConnectionsInvestmentTransaction
 */
export interface FinancialConnectionsInvestmentTransaction {
    /**
     * The remote ID of the Investment transaction
     * @type {string}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'remote_id': string;
    /**
     * Remote Account Id of the transaction, ie Plaid Account Id
     * @type {string}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'remote_account_id': string;
    /**
     * The name of the account associated with the investment transaction
     * @type {string}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'account_name'?: string;
    /**
     * The amount of the investment transaction
     * @type {number}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'amount': number;
    /**
     * A description of the investment transaction
     * @type {string}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'description': string;
    /**
     * The fees associated with the investment transaction
     * @type {number}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'fees': number;
    /**
     * 
     * @type {Currency}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'currency': Currency;
    /**
     * The date and time of the investment transaction
     * @type {string}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'date': string;
    /**
     * The type of the investment transaction (e.g., \'buy\', \'sell\', \'dividend\')
     * @type {string}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'type': FinancialConnectionsInvestmentTransactionTypeEnum;
    /**
     * The number of units of the security involved in this transaction
     * @type {number}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'quantity': number;
    /**
     * The price of the security involved in this transaction
     * @type {number}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'price': number;
    /**
     * 
     * @type {FinancialConnectionsInvestmentSecurity}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'security': FinancialConnectionsInvestmentSecurity;
}

export const FinancialConnectionsInvestmentTransactionTypeEnum = {
    Cash: 'cash',
    Buy: 'buy',
    Sell: 'sell',
    Transfer: 'transfer',
    Fee: 'fee',
    Cancel: 'cancel',
    Minus: '-'
} as const;

export type FinancialConnectionsInvestmentTransactionTypeEnum = typeof FinancialConnectionsInvestmentTransactionTypeEnum[keyof typeof FinancialConnectionsInvestmentTransactionTypeEnum];

/**
 * 
 * @export
 * @interface FinancialConnectionsOwner
 */
export interface FinancialConnectionsOwner {
    /**
     * 
     * @type {Array<FinancialConnectionsOwnerAddressesInner>}
     * @memberof FinancialConnectionsOwner
     */
    'addresses': Array<FinancialConnectionsOwnerAddressesInner>;
    /**
     * 
     * @type {Array<FinancialConnectionsOwnerEmailsInner>}
     * @memberof FinancialConnectionsOwner
     */
    'emails': Array<FinancialConnectionsOwnerEmailsInner>;
    /**
     * List of names associated with the owner
     * @type {Array<FinancialConnectionsOwnerNamesInner>}
     * @memberof FinancialConnectionsOwner
     */
    'names': Array<FinancialConnectionsOwnerNamesInner>;
    /**
     * 
     * @type {Array<FinancialConnectionsOwnerPhoneNumbersInner>}
     * @memberof FinancialConnectionsOwner
     */
    'phone_numbers': Array<FinancialConnectionsOwnerPhoneNumbersInner>;
}
/**
 * 
 * @export
 * @interface FinancialConnectionsOwnerAddressesInner
 */
export interface FinancialConnectionsOwnerAddressesInner {
    /**
     * 
     * @type {FinancialConnectionsOwnerAddressesInnerData}
     * @memberof FinancialConnectionsOwnerAddressesInner
     */
    'data'?: FinancialConnectionsOwnerAddressesInnerData;
    /**
     * Indicating if it is the primary address
     * @type {boolean}
     * @memberof FinancialConnectionsOwnerAddressesInner
     */
    'primary'?: boolean;
}
/**
 * 
 * @export
 * @interface FinancialConnectionsOwnerAddressesInnerData
 */
export interface FinancialConnectionsOwnerAddressesInnerData {
    /**
     * City of the address
     * @type {string}
     * @memberof FinancialConnectionsOwnerAddressesInnerData
     */
    'city'?: string;
    /**
     * Country of the address
     * @type {string}
     * @memberof FinancialConnectionsOwnerAddressesInnerData
     */
    'country'?: string;
    /**
     * Postal code of the address
     * @type {string}
     * @memberof FinancialConnectionsOwnerAddressesInnerData
     */
    'postal_code'?: string;
    /**
     * Region of the address
     * @type {string}
     * @memberof FinancialConnectionsOwnerAddressesInnerData
     */
    'region'?: string;
    /**
     * Street of the address
     * @type {string}
     * @memberof FinancialConnectionsOwnerAddressesInnerData
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface FinancialConnectionsOwnerEmailsInner
 */
export interface FinancialConnectionsOwnerEmailsInner {
    /**
     * Email address
     * @type {string}
     * @memberof FinancialConnectionsOwnerEmailsInner
     */
    'data': string;
    /**
     * Indicating if it is the primary email
     * @type {boolean}
     * @memberof FinancialConnectionsOwnerEmailsInner
     */
    'primary'?: boolean;
    /**
     * Type of the email
     * @type {string}
     * @memberof FinancialConnectionsOwnerEmailsInner
     */
    'type'?: FinancialConnectionsOwnerEmailsInnerTypeEnum;
}

export const FinancialConnectionsOwnerEmailsInnerTypeEnum = {
    Primary: 'primary',
    Secondary: 'secondary',
    Other: 'other'
} as const;

export type FinancialConnectionsOwnerEmailsInnerTypeEnum = typeof FinancialConnectionsOwnerEmailsInnerTypeEnum[keyof typeof FinancialConnectionsOwnerEmailsInnerTypeEnum];

/**
 * 
 * @export
 * @interface FinancialConnectionsOwnerNamesInner
 */
export interface FinancialConnectionsOwnerNamesInner {
    /**
     * Name of the owner
     * @type {string}
     * @memberof FinancialConnectionsOwnerNamesInner
     */
    'data': string;
    /**
     * Type of name. Possible values are \"name\" or \"alias\"
     * @type {string}
     * @memberof FinancialConnectionsOwnerNamesInner
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface FinancialConnectionsOwnerPhoneNumbersInner
 */
export interface FinancialConnectionsOwnerPhoneNumbersInner {
    /**
     * The phone number
     * @type {string}
     * @memberof FinancialConnectionsOwnerPhoneNumbersInner
     */
    'data': string;
    /**
     * Indicating if it is the primary phone number
     * @type {boolean}
     * @memberof FinancialConnectionsOwnerPhoneNumbersInner
     */
    'primary'?: boolean;
    /**
     * Type of the phone number
     * @type {string}
     * @memberof FinancialConnectionsOwnerPhoneNumbersInner
     */
    'type'?: FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum;
}

export const FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum = {
    Home: 'home',
    Work: 'work',
    Mobile: 'mobile'
} as const;

export type FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum = typeof FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum[keyof typeof FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum];

/**
 * 
 * @export
 * @interface FinancialInstitution
 */
export interface FinancialInstitution {
    /**
     * Unique identifier for the financial institution id.
     * @type {string}
     * @memberof FinancialInstitution
     */
    'id': string;
    /**
     * Name for the financial institution.
     * @type {string}
     * @memberof FinancialInstitution
     */
    'name': string;
    /**
     * 
     * @type {FinancialInstitutionLogo}
     * @memberof FinancialInstitution
     */
    'logo'?: FinancialInstitutionLogo;
    /**
     * Website of the financial institution.
     * @type {string}
     * @memberof FinancialInstitution
     */
    'website'?: string;
    /**
     * List of country codes supported by this institution
     * @type {Array<CountryCode>}
     * @memberof FinancialInstitution
     */
    'country_codes': Array<CountryCode>;
}
/**
 * 
 * @export
 * @interface FinancialInstitutionLogo
 */
export interface FinancialInstitutionLogo {
    /**
     * Base64-encoded image data or URL for the image.
     * @type {string}
     * @memberof FinancialInstitutionLogo
     */
    'image': string;
    /**
     * Type of the image.
     * @type {string}
     * @memberof FinancialInstitutionLogo
     */
    'type': FinancialInstitutionLogoTypeEnum;
    /**
     * Optional format of the image, if known.
     * @type {string}
     * @memberof FinancialInstitutionLogo
     */
    'format'?: FinancialInstitutionLogoFormatEnum;
}

export const FinancialInstitutionLogoTypeEnum = {
    Base64: 'base64',
    Url: 'url'
} as const;

export type FinancialInstitutionLogoTypeEnum = typeof FinancialInstitutionLogoTypeEnum[keyof typeof FinancialInstitutionLogoTypeEnum];
export const FinancialInstitutionLogoFormatEnum = {
    Png: 'png',
    Jpeg: 'jpeg',
    Gif: 'gif',
    Svgxml: 'svg+xml'
} as const;

export type FinancialInstitutionLogoFormatEnum = typeof FinancialInstitutionLogoFormatEnum[keyof typeof FinancialInstitutionLogoFormatEnum];

/**
 * 
 * @export
 * @interface FuseApiAggregatorError
 */
export interface FuseApiAggregatorError {
    /**
     * 
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'request_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'details'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'path'?: string;
}
/**
 * 
 * @export
 * @interface FuseApiError
 */
export interface FuseApiError {
    /**
     * 
     * @type {string}
     * @memberof FuseApiError
     */
    'request_id': string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiError
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiError
     */
    'details': string;
    /**
     * 
     * @type {FuseApiErrorCode}
     * @memberof FuseApiError
     */
    'code': FuseApiErrorCode;
    /**
     * 
     * @type {FuseApiErrorType}
     * @memberof FuseApiError
     */
    'type': FuseApiErrorType;
    /**
     * 
     * @type {string}
     * @memberof FuseApiError
     */
    'source': FuseApiErrorSourceEnum;
    /**
     * 
     * @type {FuseApiErrorData}
     * @memberof FuseApiError
     */
    'data'?: FuseApiErrorData;
}

export const FuseApiErrorSourceEnum = {
    Internal: 'internal',
    Aggregator: 'aggregator'
} as const;

export type FuseApiErrorSourceEnum = typeof FuseApiErrorSourceEnum[keyof typeof FuseApiErrorSourceEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const FuseApiErrorCode = {
    AssetReportGenerationFailed: 'asset_report_generation_failed',
    AssetReportNotReady: 'asset_report_not_ready',
    ClientError: 'client_error',
    InvalidHeaders: 'invalid_headers',
    InvalidRequestBody: 'invalid_request_body',
    InternalServerError: 'internal_server_error',
    OrganizationNotFound: 'organization_not_found',
    EntityNotFound: 'entity_not_found',
    SessionNotFound: 'session_not_found',
    FinancialInstitutionNotFound: 'financial_institution_not_found',
    MissingAccessToken: 'missing_access_token',
    MissingPlaidClientIdHeader: 'missing_plaid_client_id_header',
    MissingPlaidSecretHeader: 'missing_plaid_secret_header',
    MissingMxClientIdHeader: 'missing_mx_client_id_header',
    MissingMxApiKeyHeader: 'missing_mx_api_key_header',
    MissingTellerPrivateKeyHeader: 'missing_teller_private_key_header',
    MissingTellerCertificateHeader: 'missing_teller_certificate_header',
    MissingTellerApplicationIdHeader: 'missing_teller_application_id_header',
    MissingTellerSigningSecretHeader: 'missing_teller_signing_secret_header',
    MissingSnaptradeClientIdHeader: 'missing_snaptrade_client_id_header',
    MissingSnaptradeConsumerKeyHeader: 'missing_snaptrade_consumer_key_header',
    MissingFlinksCaCustomerIdHeader: 'missing_flinks_ca_customer_id_header',
    MissingFlinksUsCustomerIdHeader: 'missing_flinks_us_customer_id_header',
    MissingFlinksCaInstanceIdHeader: 'missing_flinks_ca_instance_id_header',
    MissingFlinksUsInstanceIdHeader: 'missing_flinks_us_instance_id_header',
    MissingFuseVerificationHeader: 'missing_fuse_verification_header',
    AggregatorError: 'aggregator_error',
    AggregatorDisconnectedError: 'aggregator_disconnected_error',
    AggregatorConnectionFinishedError: 'aggregator_connection_finished_error',
    AggregatorRateLimitError: 'aggregator_rate_limit_error',
    RequestBodyMissing: 'request_body_missing',
    RequestContentTypeInvalid: 'request_content_type_invalid',
    RequestBodyInvalidJson: 'request_body_invalid_json',
    WebhookError: 'webhook_error',
    Timeout: 'timeout',
    InvalidCertificate: 'invalid_certificate',
    InvalidPrivateKey: 'invalid_private_key',
    Other: 'other'
} as const;

export type FuseApiErrorCode = typeof FuseApiErrorCode[keyof typeof FuseApiErrorCode];


/**
 * 
 * @export
 * @interface FuseApiErrorData
 */
export interface FuseApiErrorData {
    /**
     * 
     * @type {Aggregator}
     * @memberof FuseApiErrorData
     */
    'aggregator'?: Aggregator;
    /**
     * 
     * @type {Array<FuseApiAggregatorError>}
     * @memberof FuseApiErrorData
     */
    'errors'?: Array<FuseApiAggregatorError>;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const FuseApiErrorType = {
    AuthError: 'auth_error',
    NotFound: 'not_found',
    BadRequest: 'bad_request',
    ServerError: 'server_error'
} as const;

export type FuseApiErrorType = typeof FuseApiErrorType[keyof typeof FuseApiErrorType];


/**
 * 
 * @export
 * @interface FuseApiWarning
 */
export interface FuseApiWarning {
    /**
     * 
     * @type {string}
     * @memberof FuseApiWarning
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiWarning
     */
    'details'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiWarning
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiWarning
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiWarning
     */
    'source'?: FuseApiWarningSourceEnum;
    /**
     * 
     * @type {FuseApiWarningData}
     * @memberof FuseApiWarning
     */
    'data'?: FuseApiWarningData;
}

export const FuseApiWarningSourceEnum = {
    Internal: 'internal',
    Aggregator: 'aggregator'
} as const;

export type FuseApiWarningSourceEnum = typeof FuseApiWarningSourceEnum[keyof typeof FuseApiWarningSourceEnum];

/**
 * 
 * @export
 * @interface FuseApiWarningData
 */
export interface FuseApiWarningData {
    /**
     * 
     * @type {Aggregator}
     * @memberof FuseApiWarningData
     */
    'aggregator'?: Aggregator;
    /**
     * 
     * @type {Array<FuseApiWarningDataWarningsInner>}
     * @memberof FuseApiWarningData
     */
    'warnings'?: Array<FuseApiWarningDataWarningsInner>;
}


/**
 * 
 * @export
 * @interface FuseApiWarningDataWarningsInner
 */
export interface FuseApiWarningDataWarningsInner {
    /**
     * 
     * @type {string}
     * @memberof FuseApiWarningDataWarningsInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiWarningDataWarningsInner
     */
    'details'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiWarningDataWarningsInner
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiWarningDataWarningsInner
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuseApiWarningDataWarningsInner
     */
    'source'?: FuseApiWarningDataWarningsInnerSourceEnum;
}

export const FuseApiWarningDataWarningsInnerSourceEnum = {
    Internal: 'internal',
    Aggregator: 'aggregator'
} as const;

export type FuseApiWarningDataWarningsInnerSourceEnum = typeof FuseApiWarningDataWarningsInnerSourceEnum[keyof typeof FuseApiWarningDataWarningsInnerSourceEnum];

/**
 * 
 * @export
 * @interface GetAssetReportRequest
 */
export interface GetAssetReportRequest {
    /**
     * Access fuse token corresponding to the financial account to be refresh the Asset Report for.
     * @type {string}
     * @memberof GetAssetReportRequest
     */
    'access_token': string;
    /**
     * The token associated with the Asset Report to retrieve.
     * @type {string}
     * @memberof GetAssetReportRequest
     */
    'asset_report_token': string;
}
/**
 * 
 * @export
 * @interface GetEntityResponse
 */
export interface GetEntityResponse {
    /**
     * Id of the entity
     * @type {string}
     * @memberof GetEntityResponse
     */
    'id': string;
    /**
     * Email of the entity
     * @type {string}
     * @memberof GetEntityResponse
     */
    'email'?: string;
    /**
     * These will force the user to connect through all of these aggregators
     * @type {Array<Aggregator>}
     * @memberof GetEntityResponse
     */
    'aggregators'?: Array<Aggregator>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetEntityResponse
     */
    'institution_ids'?: Array<string>;
    /**
     * Data needed to query data from the various aggregators
     * @type {Array<FinancialConnectionDetails>}
     * @memberof GetEntityResponse
     */
    'financial_connections': Array<FinancialConnectionDetails>;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetEntityResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionResponse
 */
export interface GetFinancialConnectionResponse {
    /**
     * 
     * @type {FinancialConnectionDetails}
     * @memberof GetFinancialConnectionResponse
     */
    'financial_connection': FinancialConnectionDetails;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialConnectionResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionsAccountDetailsRequest
 */
export interface GetFinancialConnectionsAccountDetailsRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof GetFinancialConnectionsAccountDetailsRequest
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionsAccountDetailsResponse
 */
export interface GetFinancialConnectionsAccountDetailsResponse {
    /**
     * 
     * @type {Array<FinancialConnectionsAccountDetails>}
     * @memberof GetFinancialConnectionsAccountDetailsResponse
     */
    'account_details': Array<FinancialConnectionsAccountDetails>;
    /**
     * 
     * @type {FinancialConnectionData}
     * @memberof GetFinancialConnectionsAccountDetailsResponse
     */
    'financial_connection': FinancialConnectionData;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialConnectionsAccountDetailsResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionsAccountStatementRequest
 */
export interface GetFinancialConnectionsAccountStatementRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof GetFinancialConnectionsAccountStatementRequest
     */
    'access_token': string;
    /**
     * The remote account id to retrieve the statement for.
     * @type {string}
     * @memberof GetFinancialConnectionsAccountStatementRequest
     */
    'remote_account_id': string;
    /**
     * The year and month for the account statement to be retrieved in YYYY-MM.
     * @type {string}
     * @memberof GetFinancialConnectionsAccountStatementRequest
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionsAccountStatementResponse
 */
export interface GetFinancialConnectionsAccountStatementResponse {
    /**
     * PDF statement URL.
     * @type {string}
     * @memberof GetFinancialConnectionsAccountStatementResponse
     */
    'statement_url': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialConnectionsAccountStatementResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionsAccountsRequest
 */
export interface GetFinancialConnectionsAccountsRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof GetFinancialConnectionsAccountsRequest
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionsAccountsResponse
 */
export interface GetFinancialConnectionsAccountsResponse {
    /**
     * 
     * @type {Array<FinancialConnectionsAccount>}
     * @memberof GetFinancialConnectionsAccountsResponse
     */
    'accounts': Array<FinancialConnectionsAccount>;
    /**
     * 
     * @type {FinancialConnectionData}
     * @memberof GetFinancialConnectionsAccountsResponse
     */
    'financial_connection': FinancialConnectionData;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialConnectionsAccountsResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionsBalanceRequest
 */
export interface GetFinancialConnectionsBalanceRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof GetFinancialConnectionsBalanceRequest
     */
    'access_token': string;
    /**
     * 
     * @type {GetFinancialConnectionsBalanceRequestOptions}
     * @memberof GetFinancialConnectionsBalanceRequest
     */
    'options'?: GetFinancialConnectionsBalanceRequestOptions;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionsBalanceRequestOptions
 */
export interface GetFinancialConnectionsBalanceRequestOptions {
    /**
     * An array of remote account ids to retrieve balances for.
     * @type {Array<string>}
     * @memberof GetFinancialConnectionsBalanceRequestOptions
     */
    'remote_account_ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionsBalanceResponse
 */
export interface GetFinancialConnectionsBalanceResponse {
    /**
     * 
     * @type {Array<FinancialConnectionsAccountBalance>}
     * @memberof GetFinancialConnectionsBalanceResponse
     */
    'balances': Array<FinancialConnectionsAccountBalance>;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialConnectionsBalanceResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionsOwnersRequest
 */
export interface GetFinancialConnectionsOwnersRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof GetFinancialConnectionsOwnersRequest
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionsOwnersResponse
 */
export interface GetFinancialConnectionsOwnersResponse {
    /**
     * 
     * @type {Array<GetFinancialConnectionsOwnersResponseAccountsInner>}
     * @memberof GetFinancialConnectionsOwnersResponse
     */
    'accounts': Array<GetFinancialConnectionsOwnersResponseAccountsInner>;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionsOwnersResponseAccountsInner
 */
export interface GetFinancialConnectionsOwnersResponseAccountsInner {
    /**
     * The remote account id of the account
     * @type {string}
     * @memberof GetFinancialConnectionsOwnersResponseAccountsInner
     */
    'remote_account_id': string;
    /**
     * 
     * @type {Array<FinancialConnectionsOwner>}
     * @memberof GetFinancialConnectionsOwnersResponseAccountsInner
     */
    'owners': Array<FinancialConnectionsOwner>;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialConnectionsOwnersResponseAccountsInner
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionsTransactionsRequest
 */
export interface GetFinancialConnectionsTransactionsRequest {
    /**
     * Access token for authentication.
     * @type {string}
     * @memberof GetFinancialConnectionsTransactionsRequest
     */
    'access_token': string;
    /**
     * The earliest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof GetFinancialConnectionsTransactionsRequest
     */
    'start_date': string;
    /**
     * The latest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof GetFinancialConnectionsTransactionsRequest
     */
    'end_date': string;
    /**
     * Specify current page.
     * @type {number}
     * @memberof GetFinancialConnectionsTransactionsRequest
     */
    'page': number;
    /**
     * Number of items per page.
     * @type {number}
     * @memberof GetFinancialConnectionsTransactionsRequest
     */
    'records_per_page': number;
}
/**
 * 
 * @export
 * @interface GetFinancialConnectionsTransactionsResponse
 */
export interface GetFinancialConnectionsTransactionsResponse {
    /**
     * 
     * @type {Array<Transaction>}
     * @memberof GetFinancialConnectionsTransactionsResponse
     */
    'transactions': Array<Transaction>;
    /**
     * The total number of transactions available within the date range specified. If total_transactions is larger than the size of the transactions array, more transactions are available and can be fetched
     * @type {number}
     * @memberof GetFinancialConnectionsTransactionsResponse
     */
    'total_transactions': number;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialConnectionsTransactionsResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface GetFinancialInstitutionResponse
 */
export interface GetFinancialInstitutionResponse {
    /**
     * 
     * @type {FinancialInstitution}
     * @memberof GetFinancialInstitutionResponse
     */
    'financial_institution': FinancialInstitution;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialInstitutionResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface GetInvestmentHoldingsRequest
 */
export interface GetInvestmentHoldingsRequest {
    /**
     * The access token of the financial institution connection
     * @type {string}
     * @memberof GetInvestmentHoldingsRequest
     */
    'access_token': string;
    /**
     * 
     * @type {GetInvestmentHoldingsRequestOptions}
     * @memberof GetInvestmentHoldingsRequest
     */
    'options'?: GetInvestmentHoldingsRequestOptions;
}
/**
 * 
 * @export
 * @interface GetInvestmentHoldingsRequestOptions
 */
export interface GetInvestmentHoldingsRequestOptions {
    /**
     * An array of account_ids to retrieve holdings for.
     * @type {Array<string>}
     * @memberof GetInvestmentHoldingsRequestOptions
     */
    'remote_account_ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetInvestmentHoldingsResponse
 */
export interface GetInvestmentHoldingsResponse {
    /**
     * 
     * @type {Array<FinancialConnectionsAccount>}
     * @memberof GetInvestmentHoldingsResponse
     */
    'accounts': Array<FinancialConnectionsAccount>;
    /**
     * 
     * @type {Array<FinancialConnectionsHolding>}
     * @memberof GetInvestmentHoldingsResponse
     */
    'holdings': Array<FinancialConnectionsHolding>;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetInvestmentHoldingsResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface GetInvestmentTransactionsRequest
 */
export interface GetInvestmentTransactionsRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof GetInvestmentTransactionsRequest
     */
    'access_token': string;
    /**
     * The earliest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof GetInvestmentTransactionsRequest
     */
    'start_date'?: string;
    /**
     * The latest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof GetInvestmentTransactionsRequest
     */
    'end_date'?: string;
    /**
     * Specify current page.
     * @type {number}
     * @memberof GetInvestmentTransactionsRequest
     */
    'page'?: number;
    /**
     * Number of items per page.
     * @type {number}
     * @memberof GetInvestmentTransactionsRequest
     */
    'records_per_page'?: number;
    /**
     * 
     * @type {GetInvestmentTransactionsRequestOptions}
     * @memberof GetInvestmentTransactionsRequest
     */
    'options'?: GetInvestmentTransactionsRequestOptions;
}
/**
 * 
 * @export
 * @interface GetInvestmentTransactionsRequestOptions
 */
export interface GetInvestmentTransactionsRequestOptions {
    /**
     * An array of account_ids to retrieve transactions for.
     * @type {Array<string>}
     * @memberof GetInvestmentTransactionsRequestOptions
     */
    'remote_account_ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetInvestmentTransactionsResponse
 */
export interface GetInvestmentTransactionsResponse {
    /**
     * 
     * @type {Array<FinancialConnectionsAccount>}
     * @memberof GetInvestmentTransactionsResponse
     */
    'accounts': Array<FinancialConnectionsAccount>;
    /**
     * 
     * @type {Array<FinancialConnectionsInvestmentTransaction>}
     * @memberof GetInvestmentTransactionsResponse
     */
    'investment_transactions': Array<FinancialConnectionsInvestmentTransaction>;
    /**
     * The total number of transactions within the specified date range.
     * @type {number}
     * @memberof GetInvestmentTransactionsResponse
     */
    'total_transactions'?: number;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetInvestmentTransactionsResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface GetLiabilitiesRequest
 */
export interface GetLiabilitiesRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof GetLiabilitiesRequest
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface GetLiabilitiesResponse
 */
export interface GetLiabilitiesResponse {
    /**
     * 
     * @type {Array<FinancialConnectionsAccountLiability>}
     * @memberof GetLiabilitiesResponse
     */
    'liabilities'?: Array<FinancialConnectionsAccountLiability>;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetLiabilitiesResponse
     */
    'request_id'?: string;
}
/**
 * 
 * @export
 * @interface GetSpendPowerResponse
 */
export interface GetSpendPowerResponse {
    /**
     * 
     * @type {SpendPower}
     * @memberof GetSpendPowerResponse
     */
    'spend_power': SpendPower;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetSpendPowerResponse
     */
    'request_id': string;
}
/**
 * The input data for the financial connections to be migrated into the unified Fuse API.
 * @export
 * @interface MigrateFinancialConnectionsAggregatorConnectionData
 */
export interface MigrateFinancialConnectionsAggregatorConnectionData {
    /**
     * 
     * @type {MigrateFinancialConnectionsAggregatorConnectionDataPlaid}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionData
     */
    'plaid'?: MigrateFinancialConnectionsAggregatorConnectionDataPlaid;
    /**
     * 
     * @type {MigrateFinancialConnectionsAggregatorConnectionDataMx}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionData
     */
    'mx'?: MigrateFinancialConnectionsAggregatorConnectionDataMx;
    /**
     * 
     * @type {MigrateFinancialConnectionsAggregatorConnectionDataTeller}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionData
     */
    'teller'?: MigrateFinancialConnectionsAggregatorConnectionDataTeller;
}
/**
 * Details of the MX connection to migrate into the unified Fuse API.
 * @export
 * @interface MigrateFinancialConnectionsAggregatorConnectionDataMx
 */
export interface MigrateFinancialConnectionsAggregatorConnectionDataMx {
    /**
     * The unique identifier (GUID) of the user within the MX platform.
     * @type {string}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionDataMx
     */
    'user_guid': string;
    /**
     * The unique identifier (GUID) of the member (connection) associated with the user within the MX platform.
     * @type {string}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionDataMx
     */
    'member_guid'?: string;
}
/**
 * Details of the Plaid connection to migrate into the unified Fuse API.
 * @export
 * @interface MigrateFinancialConnectionsAggregatorConnectionDataPlaid
 */
export interface MigrateFinancialConnectionsAggregatorConnectionDataPlaid {
    /**
     * The Plaid access token associated with the user\'s financial accounts.
     * @type {string}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionDataPlaid
     */
    'access_token': string;
    /**
     * If true, any webhooks received for this new financial connection will be sent to the webhook url used when the item was created. If false, the webhook url set at the organization sandbox/production environment level will be used instead.
     * @type {boolean}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionDataPlaid
     */
    'use_item_webhook'?: boolean;
}
/**
 * Details of the Teller connection to migrate into the unified Fuse API.
 * @export
 * @interface MigrateFinancialConnectionsAggregatorConnectionDataTeller
 */
export interface MigrateFinancialConnectionsAggregatorConnectionDataTeller {
    /**
     * The Teller access token associated with the user\'s financial accounts.
     * @type {string}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionDataTeller
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface MigrateFinancialConnectionsTokenRequest
 */
export interface MigrateFinancialConnectionsTokenRequest {
    /**
     * 
     * @type {MigrateFinancialConnectionsAggregatorConnectionData}
     * @memberof MigrateFinancialConnectionsTokenRequest
     */
    'connection_data': MigrateFinancialConnectionsAggregatorConnectionData;
    /**
     * The aggregator being migrated (either \'plaid\', \'mx\' or \'teller).
     * @type {string}
     * @memberof MigrateFinancialConnectionsTokenRequest
     */
    'aggregator': MigrateFinancialConnectionsTokenRequestAggregatorEnum;
    /**
     * 
     * @type {MigrateFinancialConnectionsTokenRequestEntity}
     * @memberof MigrateFinancialConnectionsTokenRequest
     */
    'entity': MigrateFinancialConnectionsTokenRequestEntity;
    /**
     * A list of Fuse products that the migrated connection will have access to.
     * @type {Array<Product>}
     * @memberof MigrateFinancialConnectionsTokenRequest
     */
    'fuse_products': Array<Product>;
}

export const MigrateFinancialConnectionsTokenRequestAggregatorEnum = {
    Plaid: 'plaid',
    Mx: 'mx',
    Teller: 'teller'
} as const;

export type MigrateFinancialConnectionsTokenRequestAggregatorEnum = typeof MigrateFinancialConnectionsTokenRequestAggregatorEnum[keyof typeof MigrateFinancialConnectionsTokenRequestAggregatorEnum];

/**
 * 
 * @export
 * @interface MigrateFinancialConnectionsTokenRequestEntity
 */
export interface MigrateFinancialConnectionsTokenRequestEntity {
    /**
     * The unique identifier of the entity (user or business) associated with the financial connections.
     * @type {string}
     * @memberof MigrateFinancialConnectionsTokenRequestEntity
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface MigrateFinancialConnectionsTokenResponse
 */
export interface MigrateFinancialConnectionsTokenResponse {
    /**
     * 
     * @type {MigrateFinancialConnectionsAggregatorConnectionData}
     * @memberof MigrateFinancialConnectionsTokenResponse
     */
    'connection_data': MigrateFinancialConnectionsAggregatorConnectionData;
    /**
     * Fuse access token for the fuse connection
     * @type {string}
     * @memberof MigrateFinancialConnectionsTokenResponse
     */
    'fuse_access_token': string;
    /**
     * Financial connection id for the fuse connection
     * @type {string}
     * @memberof MigrateFinancialConnectionsTokenResponse
     */
    'fuse_financial_connection_id': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof MigrateFinancialConnectionsTokenResponse
     */
    'request_id'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Product = {
    AccountDetails: 'account_details',
    Balance: 'balance',
    Ownership: 'ownership',
    Transactions: 'transactions',
    Investments: 'investments',
    Assets: 'assets'
} as const;

export type Product = typeof Product[keyof typeof Product];


/**
 * 
 * @export
 * @interface RefreshAssetReportRequest
 */
export interface RefreshAssetReportRequest {
    /**
     * Access fuse token corresponding to the financial account to be refresh the Asset Report for.
     * @type {string}
     * @memberof RefreshAssetReportRequest
     */
    'access_token': string;
    /**
     * The asset_report_token returned by the original call to /asset_report/create
     * @type {string}
     * @memberof RefreshAssetReportRequest
     */
    'asset_report_token': string;
    /**
     * The maximum integer number of days of history to include in the Asset Report
     * @type {number}
     * @memberof RefreshAssetReportRequest
     */
    'days_requested'?: number;
}
/**
 * 
 * @export
 * @interface RefreshAssetReportResponse
 */
export interface RefreshAssetReportResponse {
    /**
     * A token that can be provided to endpoints such as /asset_report to fetch an asset report.
     * @type {string}
     * @memberof RefreshAssetReportResponse
     */
    'asset_report_token'?: string;
    /**
     * A unique ID identifying an Asset Report.
     * @type {string}
     * @memberof RefreshAssetReportResponse
     */
    'asset_report_id'?: string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof RefreshAssetReportResponse
     */
    'request_id'?: string;
}
/**
 * 
 * @export
 * @interface SpendPower
 */
export interface SpendPower {
    /**
     * The id of the spend power
     * @type {string}
     * @memberof SpendPower
     */
    'id': string;
    /**
     * The customization id of the spend power.
     * @type {string}
     * @memberof SpendPower
     */
    'customization_id': string;
    /**
     * The amount, in cents, of the users spend limit.
     * @type {string}
     * @memberof SpendPower
     */
    'spend_limit': string;
    /**
     * The amount, in cents, that the user has already spent.
     * @type {string}
     * @memberof SpendPower
     */
    'current_spend': string;
    /**
     * The accumulative amount, in cents, of all the combined pending payments.
     * @type {string}
     * @memberof SpendPower
     */
    'pending_payments_amount': string;
    /**
     * The currency.
     * @type {string}
     * @memberof SpendPower
     */
    'currency': string;
    /**
     * The datetime of when the spend power was most recently updated.
     * @type {string}
     * @memberof SpendPower
     */
    'last_updated': string;
}
/**
 * 
 * @export
 * @interface SpendPowerCustomization
 */
export interface SpendPowerCustomization {
    /**
     * The timeframe to base the spend power on.
     * @type {string}
     * @memberof SpendPowerCustomization
     */
    'timeframe': SpendPowerCustomizationTimeframeEnum;
    /**
     * The minimum allowed limit for the spend power, in cents.
     * @type {string}
     * @memberof SpendPowerCustomization
     */
    'min_limit': string;
    /**
     * The maximum allowed limit for the spend power, in cents.
     * @type {string}
     * @memberof SpendPowerCustomization
     */
    'max_limit': string;
}

export const SpendPowerCustomizationTimeframeEnum = {
    Daily: 'daily',
    Weekly: 'weekly',
    Monthly: 'monthly'
} as const;

export type SpendPowerCustomizationTimeframeEnum = typeof SpendPowerCustomizationTimeframeEnum[keyof typeof SpendPowerCustomizationTimeframeEnum];

/**
 * 
 * @export
 * @interface SyncFinancialConnectionsDataResponse
 */
export interface SyncFinancialConnectionsDataResponse {
    /**
     * Response message
     * @type {string}
     * @memberof SyncFinancialConnectionsDataResponse
     */
    'message'?: string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof SyncFinancialConnectionsDataResponse
     */
    'request_id'?: string;
}
/**
 * 
 * @export
 * @interface SyncTransactionsRequest
 */
export interface SyncTransactionsRequest {
    /**
     * The access token of the financial institution connection
     * @type {string}
     * @memberof SyncTransactionsRequest
     */
    'access_token': string;
    /**
     * The cursor value represents the last update requested. Providing it will cause the response to only return changes after this update. If omitted, the entire history of updates will be returned, starting with the first-added transactions on the item.
     * @type {string}
     * @memberof SyncTransactionsRequest
     */
    'cursor'?: string;
    /**
     * The number of transaction updates to fetch.
     * @type {number}
     * @memberof SyncTransactionsRequest
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface SyncTransactionsResponse
 */
export interface SyncTransactionsResponse {
    /**
     * Transactions that have been added to the item since `cursor` ordered by ascending last modified time.
     * @type {Array<Transaction>}
     * @memberof SyncTransactionsResponse
     */
    'added'?: Array<Transaction>;
    /**
     * Transactions that have been modified on the item since `cursor` ordered by ascending last modified time.
     * @type {Array<Transaction>}
     * @memberof SyncTransactionsResponse
     */
    'modified'?: Array<Transaction>;
    /**
     * Transactions that have been removed from the item since `cursor` ordered by ascending last modified time.
     * @type {Array<SyncTransactionsResponseRemovedInner>}
     * @memberof SyncTransactionsResponse
     */
    'removed'?: Array<SyncTransactionsResponseRemovedInner>;
    /**
     * Cursor used for fetching any future updates after the latest update provided in this response. The cursor obtained after all pages have been pulled (indicated by `has_next` being `false`) will be valid for at least 1 year. This cursor should be persisted for later calls.
     * @type {string}
     * @memberof SyncTransactionsResponse
     */
    'next_cursor'?: string;
    /**
     * Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with `cursor` set to `next_cursor`. If `has_next` is true, it\'s important to pull all available pages, to make it less likely for underlying data changes to conflict with pagination.
     * @type {boolean}
     * @memberof SyncTransactionsResponse
     */
    'has_next'?: boolean;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof SyncTransactionsResponse
     */
    'request_id'?: string;
}
/**
 * 
 * @export
 * @interface SyncTransactionsResponseRemovedInner
 */
export interface SyncTransactionsResponseRemovedInner {
    /**
     * 
     * @type {string}
     * @memberof SyncTransactionsResponseRemovedInner
     */
    'transaction_id'?: string;
}
/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * Remote Id of the transaction, ie Plaid or Teller Id
     * @type {string}
     * @memberof Transaction
     */
    'remote_id': string;
    /**
     * Remote Account Id of the transaction, ie Plaid Account Id
     * @type {string}
     * @memberof Transaction
     */
    'remote_account_id': string;
    /**
     * Amount in cents associated with the transaction. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
     * @type {number}
     * @memberof Transaction
     */
    'amount': number;
    /**
     * Date of the transaction (YYYY-MM-DD)
     * @type {string}
     * @memberof Transaction
     */
    'date': string;
    /**
     * Description of the transaction
     * @type {string}
     * @memberof Transaction
     */
    'description': string;
    /**
     * Categories of the transaction, ie Computers and Electronics
     * @type {Array<string>}
     * @memberof Transaction
     */
    'category': Array<TransactionCategoryEnum>;
    /**
     * 
     * @type {TransactionMerchant}
     * @memberof Transaction
     */
    'merchant': TransactionMerchant;
    /**
     * The status of the transaction. This will be either posted or pending.
     * @type {string}
     * @memberof Transaction
     */
    'status': TransactionStatusEnum;
    /**
     * Type of the transaction, ie adjustment. \'-\' means we were not able to map the upstream type.
     * @type {string}
     * @memberof Transaction
     */
    'type': TransactionTypeEnum;
    /**
     * The ISO-4217 currency code of the transaction
     * @type {string}
     * @memberof Transaction
     */
    'iso_currency_code'?: string;
    /**
     * 
     * @type {any}
     * @memberof Transaction
     */
    'remote_data': any;
}

export const TransactionCategoryEnum = {
    AccessoriesStore: 'accessories_store',
    AccountingAndBookkeeping: 'accounting_and_bookkeeping',
    Ach: 'ach',
    Acorns: 'acorns',
    Acupuncture: 'acupuncture',
    Adult: 'adult',
    AdultEducation: 'adult_education',
    AdultEntertainment: 'adult_entertainment',
    Advertising: 'advertising',
    AdvertisingAgenciesAndMediaBuyers: 'advertising_agencies_and_media_buyers',
    AdvertisingAndMarketing: 'advertising_and_marketing',
    Afghan: 'afghan',
    African: 'african',
    AgricultureAndForestry: 'agriculture_and_forestry',
    AirlinesAndAviationServices: 'airlines_and_aviation_services',
    Airports: 'airports',
    AlcoholAndBars: 'alcohol_and_bars',
    AlternativeMedicine: 'alternative_medicine',
    American: 'american',
    Anesthesiologists: 'anesthesiologists',
    AnimalShelter: 'animal_shelter',
    Antiques: 'antiques',
    ApartmentsCondosAndHouses: 'apartments_condos_and_houses',
    ApparelAndFabricProducts: 'apparel_and_fabric_products',
    Aquarium: 'aquarium',
    ArcadesAndAmusementParks: 'arcades_and_amusement_parks',
    Architects: 'architects',
    ArtAndGraphicDesign: 'art_and_graphic_design',
    ArtDealersAndGalleries: 'art_dealers_and_galleries',
    ArtRestoration: 'art_restoration',
    ArtSchool: 'art_school',
    ArtsAndCrafts: 'arts_and_crafts',
    ArtsAndEntertainment: 'arts_and_entertainment',
    Asian: 'asian',
    AssistedLivingServices: 'assisted_living_services',
    AthleticFields: 'athletic_fields',
    Atm: 'atm',
    Atms: 'atms',
    Auctions: 'auctions',
    Audiovisual: 'audiovisual',
    Australian: 'australian',
    AutoOilAndLube: 'auto_oil_and_lube',
    AutoPayment: 'auto_payment',
    AutoSmogCheck: 'auto_smog_check',
    AutoTires: 'auto_tires',
    AutoTransmission: 'auto_transmission',
    AutomationAndControlSystems: 'automation_and_control_systems',
    Automotive: 'automotive',
    BagelShop: 'bagel_shop',
    Bakery: 'bakery',
    BankFees: 'bank_fees',
    BankingAndFinance: 'banking_and_finance',
    Bar: 'bar',
    Barbecue: 'barbecue',
    Baseball: 'baseball',
    Basketball: 'basketball',
    BattingCages: 'batting_cages',
    Beaches: 'beaches',
    BeautyProducts: 'beauty_products',
    BedAndBreakfasts: 'bed_and_breakfasts',
    BeerWineAndSpirits: 'beer_wine_and_spirits',
    Benefits: 'benefits',
    Betterment: 'betterment',
    Bicycles: 'bicycles',
    Bill: 'bill',
    BilliardsAndPool: 'billiards_and_pool',
    Billpay: 'billpay',
    BloodBanksAndCenters: 'blood_banks_and_centers',
    BoardingHouses: 'boarding_houses',
    Boat: 'boat',
    BoatDealers: 'boat_dealers',
    Boating: 'boating',
    Bookstores: 'bookstores',
    Boutique: 'boutique',
    Bowling: 'bowling',
    Brazilian: 'brazilian',
    BreakfastSpot: 'breakfast_spot',
    Breweries: 'breweries',
    BuildingAndLandSurveyors: 'building_and_land_surveyors',
    BuildingsAndStructures: 'buildings_and_structures',
    Burgers: 'burgers',
    Burrito: 'burrito',
    BusStations: 'bus_stations',
    Business: 'business',
    BusinessAndStrategyConsulting: 'business_and_strategy_consulting',
    BusinessBrokersAndFranchises: 'business_brokers_and_franchises',
    BusinessServices: 'business_services',
    Cable: 'cable',
    Cafe: 'cafe',
    Cajun: 'cajun',
    Cameras: 'cameras',
    CampgroundsAndRvParks: 'campgrounds_and_rv_parks',
    CanoesAndKayaks: 'canoes_and_kayaks',
    CarAndTruckRentals: 'car_and_truck_rentals',
    CarAppraisers: 'car_appraisers',
    CarDealersAndLeasing: 'car_dealers_and_leasing',
    CarPartsAndAccessories: 'car_parts_and_accessories',
    CarService: 'car_service',
    CarWashAndDetail: 'car_wash_and_detail',
    Cardiologists: 'cardiologists',
    CardsAndStationery: 'cards_and_stationery',
    Caretakers: 'caretakers',
    Caribbean: 'caribbean',
    Carpenters: 'carpenters',
    CarpetAndFlooring: 'carpet_and_flooring',
    CashAdvance: 'cash_advance',
    CasinosAndGaming: 'casinos_and_gaming',
    Catering: 'catering',
    Cemetery: 'cemetery',
    CharitiesAndNonProfits: 'charities_and_non-profits',
    Charity: 'charity',
    CharterBuses: 'charter_buses',
    ChaseQuickpay: 'chase_quickpay',
    Check: 'check',
    CheckCashing: 'check_cashing',
    ChemicalsAndGasses: 'chemicals_and_gasses',
    Childcare: 'childcare',
    Children: 'children',
    Chinese: 'chinese',
    Chiropractors: 'chiropractors',
    Churches: 'churches',
    CircusesAndCarnivals: 'circuses_and_carnivals',
    ClassicAndAntiqueCar: 'classic_and_antique_car',
    Cleaning: 'cleaning',
    Clothing: 'clothing',
    ClothingAndAccessories: 'clothing_and_accessories',
    Coal: 'coal',
    CoffeeShop: 'coffee_shop',
    Coinbase: 'coinbase',
    Collections: 'collections',
    CollegesAndUniversities: 'colleges_and_universities',
    CombatSports: 'combat_sports',
    CommercialRealEstate: 'commercial_real_estate',
    Community: 'community',
    ComputerTraining: 'computer_training',
    Computers: 'computers',
    ComputersAndElectronics: 'computers_and_electronics',
    ComputersAndOfficeMachines: 'computers_and_office_machines',
    Construction: 'construction',
    ConstructionSupplies: 'construction_supplies',
    Contractors: 'contractors',
    ConvenienceStores: 'convenience_stores',
    CorporateHousing: 'corporate_housing',
    CorrectionalInstitutions: 'correctional_institutions',
    Costumes: 'costumes',
    CottagesAndCabins: 'cottages_and_cabins',
    CounselingAndTherapy: 'counseling_and_therapy',
    Courts: 'courts',
    CreativeServices: 'creative_services',
    Credit: 'credit',
    CreditCard: 'credit_card',
    CreditCounselingAndBankruptcyServices: 'credit_counseling_and_bankruptcy_services',
    CreditReporting: 'credit_reporting',
    CropProduction: 'crop_production',
    Cruises: 'cruises',
    Cuban: 'cuban',
    CulinaryLessonsAndSchools: 'culinary_lessons_and_schools',
    CupcakeShop: 'cupcake_shop',
    Cycling: 'cycling',
    Dance: 'dance',
    DanceAndMusic: 'dance_and_music',
    DanceHallsAndSaloons: 'dance_halls_and_saloons',
    DanceSchools: 'dance_schools',
    DatingAndEscort: 'dating_and_escort',
    DayCareAndPreschools: 'day_care_and_preschools',
    Debit: 'debit',
    Delis: 'delis',
    Dentists: 'dentists',
    DepartmentStores: 'department_stores',
    Deposit: 'deposit',
    Dermatologists: 'dermatologists',
    Dessert: 'dessert',
    Digit: 'digit',
    DigitalPurchase: 'digital_purchase',
    Diners: 'diners',
    Dining: 'dining',
    DirectMailAndEmailMarketingServices: 'direct_mail_and_email_marketing_services',
    DisabledPersonsServices: 'disabled_persons_services',
    DiscountStores: 'discount_stores',
    Distillery: 'distillery',
    Distribution: 'distribution',
    DoctorsAndDentists: 'doctors_and_dentists',
    Donuts: 'donuts',
    DoorsAndWindows: 'doors_and_windows',
    DrivingSchools: 'driving_schools',
    DrugAndAlcoholServices: 'drug_and_alcohol_services',
    Dwolla: 'dwolla',
    EarNoseAndThroat: 'ear_nose_and_throat',
    EasternEuropean: 'eastern_european',
    Education: 'education',
    Electric: 'electric',
    ElectricalEquipment: 'electrical_equipment',
    ElectricalEquipmentAndComponents: 'electrical_equipment_and_components',
    Electricians: 'electricians',
    Electronics: 'electronics',
    EmergencyServices: 'emergency_services',
    EmploymentAgencies: 'employment_agencies',
    Engineering: 'engineering',
    Entertainment: 'entertainment',
    Environmental: 'environmental',
    Equestrian: 'equestrian',
    EquipmentRental: 'equipment_rental',
    Ethiopian: 'ethiopian',
    EventsAndEventPlanning: 'events_and_event_planning',
    ExcessActivity: 'excess_activity',
    Expense: 'expense',
    FacilitiesAndNursingHomes: 'facilities_and_nursing_homes',
    FairgroundsAndRodeos: 'fairgrounds_and_rodeos',
    Falafel: 'falafel',
    FamilyMedicine: 'family_medicine',
    FarmersMarkets: 'farmers_markets',
    FastFood: 'fast_food',
    Fee: 'fee',
    FencesFireplacesAndGarageDoors: 'fences_fireplaces_and_garage_doors',
    Filipino: 'filipino',
    Financial: 'financial',
    FinancialPlanningAndInvestments: 'financial_planning_and_investments',
    FireStations: 'fire_stations',
    FishAndChips: 'fish_and_chips',
    FleaMarkets: 'flea_markets',
    Florists: 'florists',
    FoodAndBeverage: 'food_and_beverage',
    FoodAndBeverageStore: 'food_and_beverage_store',
    FoodAndDrink: 'food_and_drink',
    FoodTruck: 'food_truck',
    Football: 'football',
    ForeignTransaction: 'foreign_transaction',
    Forestry: 'forestry',
    Forests: 'forests',
    FraternitiesAndSororities: 'fraternities_and_sororities',
    FraudDispute: 'fraud_dispute',
    French: 'french',
    Fuel: 'fuel',
    FuelDealer: 'fuel_dealer',
    FundRaising: 'fund_raising',
    FuneralServices: 'funeral_services',
    FurnitureAndFixtures: 'furniture_and_fixtures',
    FurnitureAndHomeDecor: 'furniture_and_home_decor',
    Gardens: 'gardens',
    Gas: 'gas',
    GasStations: 'gas_stations',
    Gastroenterologists: 'gastroenterologists',
    Gastropub: 'gastropub',
    General: 'general',
    GeneralSurgery: 'general_surgery',
    Geological: 'geological',
    German: 'german',
    GiftAndNovelty: 'gift_and_novelty',
    Gifts: 'gifts',
    GlassProducts: 'glass_products',
    GlassesAndOptometrist: 'glasses_and_optometrist',
    GoCarts: 'go_carts',
    Golf: 'golf',
    GoodsAndMerchandise: 'goods_and_merchandise',
    GovernmentDepartmentsAndAgencies: 'government_departments_and_agencies',
    GovernmentLobbyists: 'government_lobbyists',
    Greek: 'greek',
    GunRanges: 'gun_ranges',
    Gym: 'gym',
    Gymnastics: 'gymnastics',
    GymsAndFitnessCenters: 'gyms_and_fitness_centers',
    HairRemoval: 'hair_removal',
    HairSalonsAndBarbers: 'hair_salons_and_barbers',
    HardwareAndServices: 'hardware_and_services',
    HardwareStore: 'hardware_store',
    HealthFood: 'health_food',
    Healthcare: 'healthcare',
    HealthcareServices: 'healthcare_services',
    HeatingVentilatingAndAirConditioning: 'heating_ventilating_and_air_conditioning',
    Heliports: 'heliports',
    Hiking: 'hiking',
    HistoricSites: 'historic_sites',
    HobbyAndCollectibles: 'hobby_and_collectibles',
    Hockey: 'hockey',
    HoldingAndInvestmentOffices: 'holding_and_investment_offices',
    Home: 'home',
    HomeAppliances: 'home_appliances',
    HomeImprovement: 'home_improvement',
    HomeInspectionServices: 'home_inspection_services',
    HookahLounges: 'hookah_lounges',
    HospitalsClinicsAndMedicalCenters: 'hospitals_clinics_and_medical_centers',
    Hostels: 'hostels',
    HotAirBalloons: 'hot_air_balloons',
    HotelLounge: 'hotel_lounge',
    HotelsAndMotels: 'hotels_and_motels',
    Household: 'household',
    Housewares: 'housewares',
    HousingAssistanceAndShelters: 'housing_assistance_and_shelters',
    HumanResources: 'human_resources',
    HuntingAndFishing: 'hunting_and_fishing',
    IceCream: 'ice_cream',
    Immigration: 'immigration',
    ImportAndExport: 'import_and_export',
    Income: 'income',
    Indian: 'indian',
    Indonesian: 'indonesian',
    IndustrialMachineryAndEquipment: 'industrial_machinery_and_equipment',
    IndustrialMachineryAndVehicles: 'industrial_machinery_and_vehicles',
    IndustrialSupplies: 'industrial_supplies',
    Infrastructure: 'infrastructure',
    InsufficientFunds: 'insufficient_funds',
    Insurance: 'insurance',
    Interest: 'interest',
    InterestCharged: 'interest_charged',
    InterestEarned: 'interest_earned',
    InteriorDesign: 'interior_design',
    InternalAccountTransfer: 'internal_account_transfer',
    InternalMedicine: 'internal_medicine',
    Internet: 'internet',
    InternetCafes: 'internet_cafes',
    InternetServices: 'internet_services',
    Investment: 'investment',
    Italian: 'italian',
    Japanese: 'japanese',
    JazzAndBluesCafe: 'jazz_and_blues_cafe',
    JewelryAndWatches: 'jewelry_and_watches',
    JuiceBar: 'juice_bar',
    Karaoke: 'karaoke',
    KeepTheChangeSavingsProgram: 'keep_the_change_savings_program',
    Kids: 'kids',
    KidsStore: 'kids\'_store',
    Kitchens: 'kitchens',
    Korean: 'korean',
    Lakes: 'lakes',
    Landmarks: 'landmarks',
    LandscapingAndGardeners: 'landscaping_and_gardeners',
    LatePayment: 'late_payment',
    LatinAmerican: 'latin_american',
    LaundryAndGarmentServices: 'laundry_and_garment_services',
    LawEnforcement: 'law_enforcement',
    LawnAndGarden: 'lawn_and_garden',
    Leather: 'leather',
    LeatherGoods: 'leather_goods',
    Legal: 'legal',
    Libraries: 'libraries',
    LightingFixtures: 'lighting_fixtures',
    LimosAndChauffeurs: 'limos_and_chauffeurs',
    LingerieStore: 'lingerie_store',
    LivestockAndAnimals: 'livestock_and_animals',
    Loan: 'loan',
    LoansAndMortgages: 'loans_and_mortgages',
    LodgesAndVacationRentals: 'lodges_and_vacation_rentals',
    Lodging: 'lodging',
    LoggingAndSawmills: 'logging_and_sawmills',
    Luggage: 'luggage',
    MachineShops: 'machine_shops',
    MaintenanceAndRepair: 'maintenance_and_repair',
    Management: 'management',
    ManicuresAndPedicures: 'manicures_and_pedicures',
    Manufacturing: 'manufacturing',
    MarineSupplies: 'marine_supplies',
    MarketResearchAndConsulting: 'market_research_and_consulting',
    Masonry: 'masonry',
    MassageClinicsAndTherapists: 'massage_clinics_and_therapists',
    Media: 'media',
    MediaProduction: 'media_production',
    MedicalSuppliesAndLabs: 'medical_supplies_and_labs',
    Mediterranean: 'mediterranean',
    MensStore: 'men\'s_store',
    MentalHealth: 'mental_health',
    Metal: 'metal',
    MetalProducts: 'metal_products',
    Metals: 'metals',
    Mexican: 'mexican',
    MiddleEastern: 'middle_eastern',
    Military: 'military',
    MiniatureGolf: 'miniature_golf',
    Mining: 'mining',
    MobileHomes: 'mobile_homes',
    MobilePhones: 'mobile_phones',
    MonumentsAndMemorials: 'monuments_and_memorials',
    Moroccan: 'moroccan',
    Mosques: 'mosques',
    MotorcycleMopedAndScooterRepair: 'motorcycle_moped_and_scooter_repair',
    MotorcyclesMopedsAndScooters: 'motorcycles_mopeds_and_scooters',
    Mountains: 'mountains',
    Movers: 'movers',
    MovieTheatres: 'movie_theatres',
    Museums: 'museums',
    MusicVideoAndDvd: 'music_video_and_dvd',
    MusicAndShowVenues: 'music_and_show_venues',
    MusicalInstruments: 'musical_instruments',
    NaturalParks: 'natural_parks',
    Neurologists: 'neurologists',
    NewsReporting: 'news_reporting',
    Newsstands: 'newsstands',
    NightClubs: 'night_clubs',
    Nightlife: 'nightlife',
    NonMetallicMinerals: 'non-metallic_minerals',
    NonmetallicMineralProducts: 'nonmetallic_mineral_products',
    Nurses: 'nurses',
    Nutritionists: 'nutritionists',
    ObstetriciansAndGynecologists: 'obstetricians_and_gynecologists',
    Office: 'office',
    OfficeSupplies: 'office_supplies',
    OilAndGas: 'oil_and_gas',
    Oncologists: 'oncologists',
    OnlineAdvertising: 'online_advertising',
    OnlineSubscriptions: 'online_subscriptions',
    Ophthalmologists: 'ophthalmologists',
    Optometrists: 'optometrists',
    OrganizationsAndAssociations: 'organizations_and_associations',
    OrthopedicSurgeons: 'orthopedic_surgeons',
    Other: 'other',
    Outdoors: 'outdoors',
    Outlet: 'outlet',
    Overdraft: 'overdraft',
    Packaging: 'packaging',
    Paintball: 'paintball',
    Painting: 'painting',
    Paper: 'paper',
    PaperProducts: 'paper_products',
    Parking: 'parking',
    Parks: 'parks',
    PartyCenters: 'party_centers',
    Pathologists: 'pathologists',
    PawnShops: 'pawn_shops',
    Payment: 'payment',
    Paypal: 'paypal',
    Payroll: 'payroll',
    Pediatricians: 'pediatricians',
    PersonalCare: 'personal_care',
    PersonalTrainers: 'personal_trainers',
    PestControl: 'pest_control',
    Pet: 'pet',
    Petroleum: 'petroleum',
    Pets: 'pets',
    Pharmacies: 'pharmacies',
    Phone: 'phone',
    Photography: 'photography',
    PhotosAndFrames: 'photos_and_frames',
    PhysicalTherapy: 'physical_therapy',
    Physicians: 'physicians',
    PicnicAreas: 'picnic_areas',
    Piercing: 'piercing',
    Pizza: 'pizza',
    Plaid: 'plaid',
    PlasticProducts: 'plastic_products',
    PlasticSurgeons: 'plastic_surgeons',
    Plastics: 'plastics',
    Playgrounds: 'playgrounds',
    Plumbing: 'plumbing',
    Podiatrists: 'podiatrists',
    PoliceStations: 'police_stations',
    PoolsAndSpas: 'pools_and_spas',
    Portuguese: 'portuguese',
    PostOffices: 'post_offices',
    PregnancyAndSexualHealth: 'pregnancy_and_sexual_health',
    PrimaryAndSecondarySchools: 'primary_and_secondary_schools',
    PrintTvRadioAndOutdoorAdvertising: 'print_tv_radio_and_outdoor_advertising',
    PrintingAndPublishing: 'printing_and_publishing',
    PromotionalItems: 'promotional_items',
    PropertyManagement: 'property_management',
    Psychiatrists: 'psychiatrists',
    PsychicsAndAstrologers: 'psychics_and_astrologers',
    Psychologists: 'psychologists',
    PublicAndSocialServices: 'public_and_social_services',
    PublicRelations: 'public_relations',
    PublicTransportationServices: 'public_transportation_services',
    RaceTracks: 'race_tracks',
    RacquetSports: 'racquet_sports',
    Racquetball: 'racquetball',
    Radiologists: 'radiologists',
    Rafting: 'rafting',
    Rail: 'rail',
    RealEstate: 'real_estate',
    RealEstateAgents: 'real_estate_agents',
    RealEstateAppraiser: 'real_estate_appraiser',
    RealEstateDevelopmentAndTitleCompanies: 'real_estate_development_and_title_companies',
    Recreation: 'recreation',
    RecreationCenters: 'recreation_centers',
    RefrigerationAndIce: 'refrigeration_and_ice',
    Refund: 'refund',
    Religious: 'religious',
    RenewableEnergy: 'renewable_energy',
    Rent: 'rent',
    RepairServices: 'repair_services',
    Research: 'research',
    Resorts: 'resorts',
    Respiratory: 'respiratory',
    Restaurants: 'restaurants',
    Retirement: 'retirement',
    RideShare: 'ride_share',
    Rivers: 'rivers',
    RockClimbing: 'rock_climbing',
    Roofers: 'roofers',
    Rubber: 'rubber',
    RubberProducts: 'rubber_products',
    Running: 'running',
    RvsAndMotorHomes: 'rvs_and_motor_homes',
    SalvageYards: 'salvage_yards',
    SanitaryAndWasteManagement: 'sanitary_and_waste_management',
    SaveAsYouGo: 'save_as_you_go',
    Scandinavian: 'scandinavian',
    Scientific: 'scientific',
    ScubaDiving: 'scuba_diving',
    Seafood: 'seafood',
    SearchEngineMarketingAndOptimization: 'search_engine_marketing_and_optimization',
    SecurityAndSafety: 'security_and_safety',
    SeniorCitizenServices: 'senior_citizen_services',
    Service: 'service',
    ServiceInstruments: 'service_instruments',
    Services: 'services',
    Shipping: 'shipping',
    ShippingAndFreight: 'shipping_and_freight',
    ShoeStore: 'shoe_store',
    Shopping: 'shopping',
    ShoppingCentersAndMalls: 'shopping_centers_and_malls',
    Shops: 'shops',
    Skating: 'skating',
    SkinCare: 'skin_care',
    Skydiving: 'skydiving',
    SnowSports: 'snow_sports',
    Soccer: 'soccer',
    SocialClubs: 'social_clubs',
    Software: 'software',
    SoftwareDevelopment: 'software_development',
    Spanish: 'spanish',
    Spas: 'spas',
    Specialty: 'specialty',
    Sport: 'sport',
    SportingGoods: 'sporting_goods',
    SportsAndRecreationCamps: 'sports_and_recreation_camps',
    SportsBar: 'sports_bar',
    SportsClubs: 'sports_clubs',
    SportsVenues: 'sports_venues',
    Square: 'square',
    SquareCash: 'square_cash',
    StadiumsAndArenas: 'stadiums_and_arenas',
    Steakhouses: 'steakhouses',
    StockBrokers: 'stock_brokers',
    Storage: 'storage',
    StripClub: 'strip_club',
    StudentAidAndGrants: 'student_aid_and_grants',
    Subscription: 'subscription',
    SupermarketsAndGroceries: 'supermarkets_and_groceries',
    Sushi: 'sushi',
    Swimming: 'swimming',
    SwimmingPoolMaintenanceAndServices: 'swimming_pool_maintenance_and_services',
    Swimwear: 'swimwear',
    Swiss: 'swiss',
    SymphonyAndOpera: 'symphony_and_opera',
    Synagogues: 'synagogues',
    Tailors: 'tailors',
    TanningSalons: 'tanning_salons',
    Tattooing: 'tattooing',
    Tax: 'tax',
    Taxes: 'taxes',
    Taxi: 'taxi',
    TelecommunicationServices: 'telecommunication_services',
    Television: 'television',
    Temple: 'temple',
    Tennis: 'tennis',
    Textiles: 'textiles',
    Thai: 'thai',
    TheatricalProductions: 'theatrical_productions',
    ThirdParty: 'third_party',
    Tobacco: 'tobacco',
    TollsAndFees: 'tolls_and_fees',
    TouristInformationAndServices: 'tourist_information_and_services',
    Towing: 'towing',
    Toys: 'toys',
    Transfer: 'transfer',
    TransfersAndAdjustments: 'transfers_and_adjustments',
    Transport: 'transport',
    Transportation: 'transportation',
    TransportationCenters: 'transportation_centers',
    TransportationEquipment: 'transportation_equipment',
    Travel: 'travel',
    TravelAndTransportation: 'travel_and_transportation',
    TravelAgentsAndTourOperators: 'travel_agents_and_tour_operators',
    TreeService: 'tree_service',
    Turkish: 'turkish',
    TutoringAndEducationalServices: 'tutoring_and_educational_services',
    Upholstery: 'upholstery',
    Urologists: 'urologists',
    UsedCarDealers: 'used_car_dealers',
    Utilities: 'utilities',
    VeganAndVegetarian: 'vegan_and_vegetarian',
    Venmo: 'venmo',
    Veterinarians: 'veterinarians',
    VideoGames: 'video_games',
    VintageAndThrift: 'vintage_and_thrift',
    VocationalSchools: 'vocational_schools',
    WarehousesAndWholesaleStores: 'warehouses_and_wholesale_stores',
    Water: 'water',
    WaterAndWasteManagement: 'water_and_waste_management',
    WaterSports: 'water_sports',
    WebDesignAndDevelopment: 'web_design_and_development',
    WeddingAndBridal: 'wedding_and_bridal',
    Welding: 'welding',
    Wholesale: 'wholesale',
    WineBar: 'wine_bar',
    Winery: 'winery',
    Wire: 'wire',
    WireTransfer: 'wire_transfer',
    Withdrawal: 'withdrawal',
    WomensStore: 'women\'s_store',
    WoodProducts: 'wood_products',
    WritingCopywritingAndTechnicalWriting: 'writing_copywriting_and_technical_writing',
    YogaAndPilates: 'yoga_and_pilates',
    YouthOrganizations: 'youth_organizations',
    Zoo: 'zoo'
} as const;

export type TransactionCategoryEnum = typeof TransactionCategoryEnum[keyof typeof TransactionCategoryEnum];
export const TransactionStatusEnum = {
    Pending: 'pending',
    Posted: 'posted'
} as const;

export type TransactionStatusEnum = typeof TransactionStatusEnum[keyof typeof TransactionStatusEnum];
export const TransactionTypeEnum = {
    Ach: 'ach',
    Adjustment: 'adjustment',
    Atm: 'atm',
    BankCharge: 'bank_charge',
    BillPayment: 'bill_payment',
    CardPayment: 'card_payment',
    Cash: 'cash',
    Cashback: 'cashback',
    Charge: 'charge',
    Cheque: 'cheque',
    Credit: 'credit',
    Debit: 'debit',
    Deposit: 'deposit',
    DigitalPayment: 'digital_payment',
    DirectDebit: 'direct_debit',
    Fee: 'fee',
    InStore: 'in_store',
    Interest: 'interest',
    Online: 'online',
    Other: 'other',
    Payment: 'payment',
    Purchase: 'purchase',
    StandingOrder: 'standing_order',
    Transaction: 'transaction',
    Transfer: 'transfer',
    Wire: 'wire',
    Withdrawal: 'withdrawal',
    Minus: '-'
} as const;

export type TransactionTypeEnum = typeof TransactionTypeEnum[keyof typeof TransactionTypeEnum];

/**
 * 
 * @export
 * @interface TransactionMerchant
 */
export interface TransactionMerchant {
    /**
     * Merchant name
     * @type {string}
     * @memberof TransactionMerchant
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UpdateEntityRequest
 */
export interface UpdateEntityRequest {
    /**
     * Email of the entity
     * @type {string}
     * @memberof UpdateEntityRequest
     */
    'email'?: string;
    /**
     * These will force the user to connect through all of these aggregators
     * @type {Array<Aggregator>}
     * @memberof UpdateEntityRequest
     */
    'aggregators'?: Array<Aggregator>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateEntityRequest
     */
    'institution_ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateEntityResponse
 */
export interface UpdateEntityResponse {
    /**
     * Id of the entity
     * @type {string}
     * @memberof UpdateEntityResponse
     */
    'id'?: string;
    /**
     * Email of the entity
     * @type {string}
     * @memberof UpdateEntityResponse
     */
    'email'?: string;
    /**
     * These will force the user to connect through all of these aggregators
     * @type {Array<Aggregator>}
     * @memberof UpdateEntityResponse
     */
    'aggregators'?: Array<Aggregator>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateEntityResponse
     */
    'institution_ids'?: Array<string>;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof UpdateEntityResponse
     */
    'request_id'?: string;
}
/**
 * 
 * @export
 * @interface UpdateSpendPowerCustomizationResponse
 */
export interface UpdateSpendPowerCustomizationResponse {
    /**
     * The id of the updated customization.
     * @type {string}
     * @memberof UpdateSpendPowerCustomizationResponse
     */
    'id': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof UpdateSpendPowerCustomizationResponse
     */
    'request_id': string;
}
/**
 * 
 * @export
 * @interface WebhookEvent
 */
export interface WebhookEvent {
    /**
     * 
     * @type {WebhookType}
     * @memberof WebhookEvent
     */
    'type': WebhookType;
    /**
     * Financial connection id associated with the webhook
     * @type {string}
     * @memberof WebhookEvent
     */
    'financial_connection_id': string;
    /**
     * 
     * @type {string}
     * @memberof WebhookEvent
     */
    'environment': WebhookEventEnvironmentEnum;
    /**
     * 
     * @type {WebhookSource}
     * @memberof WebhookEvent
     */
    'source': WebhookSource;
    /**
     * Aggregator verification data needed to verify the webhook
     * @type {string}
     * @memberof WebhookEvent
     */
    'verification_token'?: string;
    /**
     * Exists for assets.report_ready webhooks
     * @type {string}
     * @memberof WebhookEvent
     */
    'asset_report_id'?: string;
    /**
     * Exists for transactions.updates webhooks
     * @type {number}
     * @memberof WebhookEvent
     */
    'new_transactions_count'?: number;
    /**
     * Exists for transactions.updates webhooks. Indicates if historical transaction information (up to 24 months) is ready to be queried.
     * @type {boolean}
     * @memberof WebhookEvent
     */
    'historical_transactions_available'?: boolean;
    /**
     * Exists for transactions.updates webhooks. Currently only supported by Plaid.
     * @type {Array<string>}
     * @memberof WebhookEvent
     */
    'removed_transaction_ids'?: Array<string>;
    /**
     * 
     * @type {any}
     * @memberof WebhookEvent
     */
    'remote_data': any;
}

export const WebhookEventEnvironmentEnum = {
    Sandbox: 'sandbox',
    Production: 'production'
} as const;

export type WebhookEventEnvironmentEnum = typeof WebhookEventEnvironmentEnum[keyof typeof WebhookEventEnvironmentEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const WebhookSource = {
    Plaid: 'plaid',
    Teller: 'teller',
    Mx: 'mx',
    Fuse: 'fuse',
    Snaptrade: 'snaptrade'
} as const;

export type WebhookSource = typeof WebhookSource[keyof typeof WebhookSource];


/**
 * 
 * @export
 * @enum {string}
 */

export const WebhookType = {
    FinancialConnectionSyncData: 'financial_connection.sync_data',
    FinancialConnectionDisconnected: 'financial_connection.disconnected',
    FinancialConnectionFinished: 'financial_connection.finished',
    TransactionsUpdates: 'transactions.updates',
    AssetsReportReady: 'assets.report_ready'
} as const;

export type WebhookType = typeof WebhookType[keyof typeof WebhookType];



/**
 * FuseApi - axios parameter creator
 * @export
 */
export const FuseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} spendPowerId 
         * @param {AddSpendPowerTransactionRequest} [addSpendPowerTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSpendPowerTransaction: async (spendPowerId: string, addSpendPowerTransactionRequest?: AddSpendPowerTransactionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spendPowerId' is not null or undefined
            assertParamExists('addSpendPowerTransaction', 'spendPowerId', spendPowerId)
            const localVarPath = `/v1/financial_connections/spend-power/{spend_power_id}/transaction`
                .replace(`{${"spend_power_id"}}`, encodeURIComponent(String(spendPowerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addSpendPowerTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {CreateAssetReportRequest} [createAssetReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetReport: async (createAssetReportRequest?: CreateAssetReportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial_connections/asset_report/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAssetReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a link token to start the process of a user connecting to a specific financial institution.
         * @param {CreateLinkTokenRequest} [createLinkTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLinkToken: async (createLinkTokenRequest?: CreateLinkTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/link/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createLinkTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {CreateSessionRequest} [createSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: async (createSessionRequest?: CreateSessionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSessionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts the background process that will determine the spend power depending on the customization passed in.
         * @param {CreateSpendPowerRequest} [createSpendPowerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpendPower: async (createSpendPowerRequest?: CreateSpendPowerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial_connections/spend-power`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSpendPowerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpendPowerCustomization} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpendPowerCustomization: async (body?: SpendPowerCustomization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial_connections/spend-power/customization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a financial connection
         * @param {string} financialConnectionIdToDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFinancialConnection: async (financialConnectionIdToDelete: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'financialConnectionIdToDelete' is not null or undefined
            assertParamExists('deleteFinancialConnection', 'financialConnectionIdToDelete', financialConnectionIdToDelete)
            const localVarPath = `/v1/financial_connections/{financial_connection_id_to_delete}`
                .replace(`{${"financial_connection_id_to_delete"}}`, encodeURIComponent(String(financialConnectionIdToDelete)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API to exchange a public token for an access token and financial connection id
         * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeFinancialConnectionsPublicToken: async (exchangeFinancialConnectionsPublicTokenRequest?: ExchangeFinancialConnectionsPublicTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial_connections/public_token/exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exchangeFinancialConnectionsPublicTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {GetAssetReportRequest} [getAssetReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetReport: async (getAssetReportRequest?: GetAssetReportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial_connections/asset_report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getAssetReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the \'create session\' endpoint
         * @summary Get entity
         * @param {string} entityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity: async (entityId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('getEntity', 'entityId', entityId)
            const localVarPath = `/v1/entities/{entity_id}`
                .replace(`{${"entity_id"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get financial connection details
         * @param {string} financialConnectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnection: async (financialConnectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'financialConnectionId' is not null or undefined
            assertParamExists('getFinancialConnection', 'financialConnectionId', financialConnectionId)
            const localVarPath = `/v1/financial_connections/{financial_connection_id}`
                .replace(`{${"financial_connection_id"}}`, encodeURIComponent(String(financialConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get account details
         * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountDetails: async (getFinancialConnectionsAccountDetailsRequest: GetFinancialConnectionsAccountDetailsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getFinancialConnectionsAccountDetailsRequest' is not null or undefined
            assertParamExists('getFinancialConnectionsAccountDetails', 'getFinancialConnectionsAccountDetailsRequest', getFinancialConnectionsAccountDetailsRequest)
            const localVarPath = `/v1/financial_connections/accounts/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getFinancialConnectionsAccountDetailsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
         * @param {GetFinancialConnectionsAccountStatementRequest} [getFinancialConnectionsAccountStatementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountStatement: async (getFinancialConnectionsAccountStatementRequest?: GetFinancialConnectionsAccountStatementRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial_connections/accounts/statement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getFinancialConnectionsAccountStatementRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get accounts
         * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccounts: async (getFinancialConnectionsAccountsRequest: GetFinancialConnectionsAccountsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getFinancialConnectionsAccountsRequest' is not null or undefined
            assertParamExists('getFinancialConnectionsAccounts', 'getFinancialConnectionsAccountsRequest', getFinancialConnectionsAccountsRequest)
            const localVarPath = `/v1/financial_connections/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getFinancialConnectionsAccountsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get balances
         * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsBalances: async (getFinancialConnectionsBalanceRequest: GetFinancialConnectionsBalanceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getFinancialConnectionsBalanceRequest' is not null or undefined
            assertParamExists('getFinancialConnectionsBalances', 'getFinancialConnectionsBalanceRequest', getFinancialConnectionsBalanceRequest)
            const localVarPath = `/v1/financial_connections/balances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getFinancialConnectionsBalanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get account owners
         * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsOwners: async (getFinancialConnectionsOwnersRequest: GetFinancialConnectionsOwnersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getFinancialConnectionsOwnersRequest' is not null or undefined
            assertParamExists('getFinancialConnectionsOwners', 'getFinancialConnectionsOwnersRequest', getFinancialConnectionsOwnersRequest)
            const localVarPath = `/v1/financial_connections/owners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getFinancialConnectionsOwnersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get transactions
         * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsTransactions: async (getFinancialConnectionsTransactionsRequest: GetFinancialConnectionsTransactionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getFinancialConnectionsTransactionsRequest' is not null or undefined
            assertParamExists('getFinancialConnectionsTransactions', 'getFinancialConnectionsTransactionsRequest', getFinancialConnectionsTransactionsRequest)
            const localVarPath = `/v1/financial_connections/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getFinancialConnectionsTransactionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Receive metadata for a financial institution
         * @summary Get a financial institution
         * @param {string} institutionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialInstitution: async (institutionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'institutionId' is not null or undefined
            assertParamExists('getFinancialInstitution', 'institutionId', institutionId)
            const localVarPath = `/v1/financial_connections/institutions/{institution_id}`
                .replace(`{${"institution_id"}}`, encodeURIComponent(String(institutionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get investment holdings
         * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentHoldings: async (getInvestmentHoldingsRequest: GetInvestmentHoldingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getInvestmentHoldingsRequest' is not null or undefined
            assertParamExists('getInvestmentHoldings', 'getInvestmentHoldingsRequest', getInvestmentHoldingsRequest)
            const localVarPath = `/v1/financial_connections/investments/holdings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getInvestmentHoldingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get investment transactions
         * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentTransactions: async (getInvestmentTransactionsRequest: GetInvestmentTransactionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getInvestmentTransactionsRequest' is not null or undefined
            assertParamExists('getInvestmentTransactions', 'getInvestmentTransactionsRequest', getInvestmentTransactionsRequest)
            const localVarPath = `/v1/financial_connections/investments/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getInvestmentTransactionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} spendPowerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpendPower: async (spendPowerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spendPowerId' is not null or undefined
            assertParamExists('getSpendPower', 'spendPowerId', spendPowerId)
            const localVarPath = `/v1/financial_connections/spend-power/{spend_power_id}`
                .replace(`{${"spend_power_id"}}`, encodeURIComponent(String(spendPowerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
         * @summary Migrate financial connection
         * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateFinancialConnection: async (migrateFinancialConnectionsTokenRequest?: MigrateFinancialConnectionsTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial_connections/migrate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(migrateFinancialConnectionsTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {RefreshAssetReportRequest} [refreshAssetReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAssetReport: async (refreshAssetReportRequest?: RefreshAssetReportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial_connections/asset_report/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshAssetReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsData: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('syncFinancialConnectionsData', 'body', body)
            const localVarPath = `/v1/financial_connections/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpendPowerCustomization} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpendPowerCustomization: async (body?: SpendPowerCustomization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/financial_connections/spend-power/customization/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get liabilities
         * @param {GetLiabilitiesRequest} getLiabilitiesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FinancialConnectionsLiabilitiesPost: async (getLiabilitiesRequest: GetLiabilitiesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getLiabilitiesRequest' is not null or undefined
            assertParamExists('v1FinancialConnectionsLiabilitiesPost', 'getLiabilitiesRequest', getLiabilitiesRequest)
            const localVarPath = `/v1/financial_connections/liabilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getLiabilitiesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FuseApi - functional programming interface
 * @export
 */
export const FuseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FuseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} spendPowerId 
         * @param {AddSpendPowerTransactionRequest} [addSpendPowerTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSpendPowerTransaction(spendPowerId: string, addSpendPowerTransactionRequest?: AddSpendPowerTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddSpendPowerTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSpendPowerTransaction(spendPowerId, addSpendPowerTransactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {CreateAssetReportRequest} [createAssetReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssetReport(createAssetReportRequest?: CreateAssetReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAssetReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssetReport(createAssetReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a link token to start the process of a user connecting to a specific financial institution.
         * @param {CreateLinkTokenRequest} [createLinkTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLinkToken(createLinkTokenRequest?: CreateLinkTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLinkTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLinkToken(createLinkTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {CreateSessionRequest} [createSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSession(createSessionRequest?: CreateSessionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSessionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(createSessionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Starts the background process that will determine the spend power depending on the customization passed in.
         * @param {CreateSpendPowerRequest} [createSpendPowerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSpendPower(createSpendPowerRequest?: CreateSpendPowerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSpendPowerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSpendPower(createSpendPowerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SpendPowerCustomization} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSpendPowerCustomization(body?: SpendPowerCustomization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSpendPowerCustomizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSpendPowerCustomization(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a financial connection
         * @param {string} financialConnectionIdToDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFinancialConnection(financialConnectionIdToDelete: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFinancialConnectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFinancialConnection(financialConnectionIdToDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API to exchange a public token for an access token and financial connection id
         * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest?: ExchangeFinancialConnectionsPublicTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeFinancialConnectionsPublicTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {GetAssetReportRequest} [getAssetReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetReport(getAssetReportRequest?: GetAssetReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshAssetReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetReport(getAssetReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the \'create session\' endpoint
         * @summary Get entity
         * @param {string} entityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntity(entityId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEntityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntity(entityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get financial connection details
         * @param {string} financialConnectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFinancialConnection(financialConnectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialConnectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFinancialConnection(financialConnectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get account details
         * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest: GetFinancialConnectionsAccountDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialConnectionsAccountDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
         * @param {GetFinancialConnectionsAccountStatementRequest} [getFinancialConnectionsAccountStatementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest?: GetFinancialConnectionsAccountStatementRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialConnectionsAccountStatementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get accounts
         * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest: GetFinancialConnectionsAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialConnectionsAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get balances
         * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest: GetFinancialConnectionsBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialConnectionsBalanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get account owners
         * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest: GetFinancialConnectionsOwnersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialConnectionsOwnersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get transactions
         * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest: GetFinancialConnectionsTransactionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialConnectionsTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Receive metadata for a financial institution
         * @summary Get a financial institution
         * @param {string} institutionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFinancialInstitution(institutionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialInstitutionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFinancialInstitution(institutionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get investment holdings
         * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvestmentHoldings(getInvestmentHoldingsRequest: GetInvestmentHoldingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInvestmentHoldingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvestmentHoldings(getInvestmentHoldingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get investment transactions
         * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvestmentTransactions(getInvestmentTransactionsRequest: GetInvestmentTransactionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInvestmentTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvestmentTransactions(getInvestmentTransactionsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} spendPowerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpendPower(spendPowerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSpendPowerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpendPower(spendPowerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
         * @summary Migrate financial connection
         * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async migrateFinancialConnection(migrateFinancialConnectionsTokenRequest?: MigrateFinancialConnectionsTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MigrateFinancialConnectionsTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {RefreshAssetReportRequest} [refreshAssetReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshAssetReport(refreshAssetReportRequest?: RefreshAssetReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshAssetReport(refreshAssetReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncFinancialConnectionsData(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncFinancialConnectionsDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncFinancialConnectionsData(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SpendPowerCustomization} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSpendPowerCustomization(body?: SpendPowerCustomization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateSpendPowerCustomizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSpendPowerCustomization(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get liabilities
         * @param {GetLiabilitiesRequest} getLiabilitiesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest: GetLiabilitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLiabilitiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FuseApi - factory interface
 * @export
 */
export const FuseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FuseApiFp(configuration)
    return {
        /**
         * 
         * @param {string} spendPowerId 
         * @param {AddSpendPowerTransactionRequest} [addSpendPowerTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSpendPowerTransaction(spendPowerId: string, addSpendPowerTransactionRequest?: AddSpendPowerTransactionRequest, options?: any): AxiosPromise<AddSpendPowerTransactionResponse> {
            return localVarFp.addSpendPowerTransaction(spendPowerId, addSpendPowerTransactionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {CreateAssetReportRequest} [createAssetReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetReport(createAssetReportRequest?: CreateAssetReportRequest, options?: any): AxiosPromise<CreateAssetReportResponse> {
            return localVarFp.createAssetReport(createAssetReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a link token to start the process of a user connecting to a specific financial institution.
         * @param {CreateLinkTokenRequest} [createLinkTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLinkToken(createLinkTokenRequest?: CreateLinkTokenRequest, options?: any): AxiosPromise<CreateLinkTokenResponse> {
            return localVarFp.createLinkToken(createLinkTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {CreateSessionRequest} [createSessionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(createSessionRequest?: CreateSessionRequest, options?: any): AxiosPromise<CreateSessionResponse> {
            return localVarFp.createSession(createSessionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts the background process that will determine the spend power depending on the customization passed in.
         * @param {CreateSpendPowerRequest} [createSpendPowerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpendPower(createSpendPowerRequest?: CreateSpendPowerRequest, options?: any): AxiosPromise<CreateSpendPowerResponse> {
            return localVarFp.createSpendPower(createSpendPowerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpendPowerCustomization} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpendPowerCustomization(body?: SpendPowerCustomization, options?: any): AxiosPromise<CreateSpendPowerCustomizationResponse> {
            return localVarFp.createSpendPowerCustomization(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a financial connection
         * @param {string} financialConnectionIdToDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFinancialConnection(financialConnectionIdToDelete: string, options?: any): AxiosPromise<DeleteFinancialConnectionResponse> {
            return localVarFp.deleteFinancialConnection(financialConnectionIdToDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * API to exchange a public token for an access token and financial connection id
         * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest?: ExchangeFinancialConnectionsPublicTokenRequest, options?: any): AxiosPromise<ExchangeFinancialConnectionsPublicTokenResponse> {
            return localVarFp.exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {GetAssetReportRequest} [getAssetReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetReport(getAssetReportRequest?: GetAssetReportRequest, options?: any): AxiosPromise<RefreshAssetReportResponse> {
            return localVarFp.getAssetReport(getAssetReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the \'create session\' endpoint
         * @summary Get entity
         * @param {string} entityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity(entityId: string, options?: any): AxiosPromise<GetEntityResponse> {
            return localVarFp.getEntity(entityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get financial connection details
         * @param {string} financialConnectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnection(financialConnectionId: string, options?: any): AxiosPromise<GetFinancialConnectionResponse> {
            return localVarFp.getFinancialConnection(financialConnectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get account details
         * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest: GetFinancialConnectionsAccountDetailsRequest, options?: any): AxiosPromise<GetFinancialConnectionsAccountDetailsResponse> {
            return localVarFp.getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
         * @param {GetFinancialConnectionsAccountStatementRequest} [getFinancialConnectionsAccountStatementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest?: GetFinancialConnectionsAccountStatementRequest, options?: any): AxiosPromise<GetFinancialConnectionsAccountStatementResponse> {
            return localVarFp.getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get accounts
         * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest: GetFinancialConnectionsAccountsRequest, options?: any): AxiosPromise<GetFinancialConnectionsAccountsResponse> {
            return localVarFp.getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get balances
         * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest: GetFinancialConnectionsBalanceRequest, options?: any): AxiosPromise<GetFinancialConnectionsBalanceResponse> {
            return localVarFp.getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get account owners
         * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest: GetFinancialConnectionsOwnersRequest, options?: any): AxiosPromise<GetFinancialConnectionsOwnersResponse> {
            return localVarFp.getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get transactions
         * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest: GetFinancialConnectionsTransactionsRequest, options?: any): AxiosPromise<GetFinancialConnectionsTransactionsResponse> {
            return localVarFp.getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Receive metadata for a financial institution
         * @summary Get a financial institution
         * @param {string} institutionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialInstitution(institutionId: string, options?: any): AxiosPromise<GetFinancialInstitutionResponse> {
            return localVarFp.getFinancialInstitution(institutionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get investment holdings
         * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentHoldings(getInvestmentHoldingsRequest: GetInvestmentHoldingsRequest, options?: any): AxiosPromise<GetInvestmentHoldingsResponse> {
            return localVarFp.getInvestmentHoldings(getInvestmentHoldingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get investment transactions
         * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentTransactions(getInvestmentTransactionsRequest: GetInvestmentTransactionsRequest, options?: any): AxiosPromise<GetInvestmentTransactionsResponse> {
            return localVarFp.getInvestmentTransactions(getInvestmentTransactionsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} spendPowerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpendPower(spendPowerId: string, options?: any): AxiosPromise<GetSpendPowerResponse> {
            return localVarFp.getSpendPower(spendPowerId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
         * @summary Migrate financial connection
         * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateFinancialConnection(migrateFinancialConnectionsTokenRequest?: MigrateFinancialConnectionsTokenRequest, options?: any): AxiosPromise<MigrateFinancialConnectionsTokenResponse> {
            return localVarFp.migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {RefreshAssetReportRequest} [refreshAssetReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAssetReport(refreshAssetReportRequest?: RefreshAssetReportRequest, options?: any): AxiosPromise<AssetReportResponse> {
            return localVarFp.refreshAssetReport(refreshAssetReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsData(body: object, options?: any): AxiosPromise<SyncFinancialConnectionsDataResponse> {
            return localVarFp.syncFinancialConnectionsData(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpendPowerCustomization} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpendPowerCustomization(body?: SpendPowerCustomization, options?: any): AxiosPromise<UpdateSpendPowerCustomizationResponse> {
            return localVarFp.updateSpendPowerCustomization(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get liabilities
         * @param {GetLiabilitiesRequest} getLiabilitiesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest: GetLiabilitiesRequest, options?: any): AxiosPromise<GetLiabilitiesResponse> {
            return localVarFp.v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FuseApi - object-oriented interface
 * @export
 * @class FuseApi
 * @extends {BaseAPI}
 */
export class FuseApi extends BaseAPI {
    /**
     * 
     * @param {string} spendPowerId 
     * @param {AddSpendPowerTransactionRequest} [addSpendPowerTransactionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public addSpendPowerTransaction(spendPowerId: string, addSpendPowerTransactionRequest?: AddSpendPowerTransactionRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).addSpendPowerTransaction(spendPowerId, addSpendPowerTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {CreateAssetReportRequest} [createAssetReportRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public createAssetReport(createAssetReportRequest?: CreateAssetReportRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).createAssetReport(createAssetReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a link token to start the process of a user connecting to a specific financial institution.
     * @param {CreateLinkTokenRequest} [createLinkTokenRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public createLinkToken(createLinkTokenRequest?: CreateLinkTokenRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).createLinkToken(createLinkTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
     * @param {CreateSessionRequest} [createSessionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public createSession(createSessionRequest?: CreateSessionRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).createSession(createSessionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts the background process that will determine the spend power depending on the customization passed in.
     * @param {CreateSpendPowerRequest} [createSpendPowerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public createSpendPower(createSpendPowerRequest?: CreateSpendPowerRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).createSpendPower(createSpendPowerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpendPowerCustomization} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public createSpendPowerCustomization(body?: SpendPowerCustomization, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).createSpendPowerCustomization(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a financial connection
     * @param {string} financialConnectionIdToDelete 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public deleteFinancialConnection(financialConnectionIdToDelete: string, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).deleteFinancialConnection(financialConnectionIdToDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API to exchange a public token for an access token and financial connection id
     * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest?: ExchangeFinancialConnectionsPublicTokenRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {GetAssetReportRequest} [getAssetReportRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public getAssetReport(getAssetReportRequest?: GetAssetReportRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).getAssetReport(getAssetReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the \'create session\' endpoint
     * @summary Get entity
     * @param {string} entityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public getEntity(entityId: string, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).getEntity(entityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get financial connection details
     * @param {string} financialConnectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public getFinancialConnection(financialConnectionId: string, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).getFinancialConnection(financialConnectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get account details
     * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest: GetFinancialConnectionsAccountDetailsRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
     * @param {GetFinancialConnectionsAccountStatementRequest} [getFinancialConnectionsAccountStatementRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest?: GetFinancialConnectionsAccountStatementRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get accounts
     * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest: GetFinancialConnectionsAccountsRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get balances
     * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest: GetFinancialConnectionsBalanceRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get account owners
     * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest: GetFinancialConnectionsOwnersRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get transactions
     * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest: GetFinancialConnectionsTransactionsRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Receive metadata for a financial institution
     * @summary Get a financial institution
     * @param {string} institutionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public getFinancialInstitution(institutionId: string, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).getFinancialInstitution(institutionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get investment holdings
     * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public getInvestmentHoldings(getInvestmentHoldingsRequest: GetInvestmentHoldingsRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).getInvestmentHoldings(getInvestmentHoldingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get investment transactions
     * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public getInvestmentTransactions(getInvestmentTransactionsRequest: GetInvestmentTransactionsRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).getInvestmentTransactions(getInvestmentTransactionsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} spendPowerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public getSpendPower(spendPowerId: string, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).getSpendPower(spendPowerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
     * @summary Migrate financial connection
     * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public migrateFinancialConnection(migrateFinancialConnectionsTokenRequest?: MigrateFinancialConnectionsTokenRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {RefreshAssetReportRequest} [refreshAssetReportRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public refreshAssetReport(refreshAssetReportRequest?: RefreshAssetReportRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).refreshAssetReport(refreshAssetReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
     * @summary Sync financial connections data
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public syncFinancialConnectionsData(body: object, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).syncFinancialConnectionsData(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpendPowerCustomization} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public updateSpendPowerCustomization(body?: SpendPowerCustomization, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).updateSpendPowerCustomization(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get liabilities
     * @param {GetLiabilitiesRequest} getLiabilitiesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    public v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest: GetLiabilitiesRequest, options?: AxiosRequestConfig) {
        return FuseApiFp(this.configuration).v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SpendPowerApi - axios parameter creator
 * @export
 */
export const SpendPowerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} spendPowerId 
         * @param {string} fuseClientId 
         * @param {string} fuseApiKey 
         * @param {string} [plaidClientId] 
         * @param {string} [plaidSecret] 
         * @param {string} [tellerApplicationId] 
         * @param {string} [tellerCertificate] 
         * @param {string} [tellerPrivateKey] 
         * @param {string} [tellerTokenSigningKey] 
         * @param {string} [tellerSigningSecret] 
         * @param {string} [mxClientId] 
         * @param {string} [mxApiKey] 
         * @param {string} [snaptradeClientId] 
         * @param {string} [snaptradeConsumerKey] 
         * @param {string} [flinksCustomerId] 
         * @param {string} [flinksUsInstanceId] 
         * @param {string} [flinksCaInstanceId] 
         * @param {string} [finicityPartnerId] 
         * @param {string} [finicityPartnerSecret] 
         * @param {string} [finicityAppKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpendPower: async (spendPowerId: string, fuseClientId: string, fuseApiKey: string, plaidClientId?: string, plaidSecret?: string, tellerApplicationId?: string, tellerCertificate?: string, tellerPrivateKey?: string, tellerTokenSigningKey?: string, tellerSigningSecret?: string, mxClientId?: string, mxApiKey?: string, snaptradeClientId?: string, snaptradeConsumerKey?: string, flinksCustomerId?: string, flinksUsInstanceId?: string, flinksCaInstanceId?: string, finicityPartnerId?: string, finicityPartnerSecret?: string, finicityAppKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spendPowerId' is not null or undefined
            assertParamExists('deleteSpendPower', 'spendPowerId', spendPowerId)
            // verify required parameter 'fuseClientId' is not null or undefined
            assertParamExists('deleteSpendPower', 'fuseClientId', fuseClientId)
            // verify required parameter 'fuseApiKey' is not null or undefined
            assertParamExists('deleteSpendPower', 'fuseApiKey', fuseApiKey)
            const localVarPath = `/v1/financial_connections/spend-power/{spend_power_id}`
                .replace(`{${"spend_power_id"}}`, encodeURIComponent(String(spendPowerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication fuseApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Api-Key", configuration)

            // authentication fuseClientId required
            await setApiKeyToObject(localVarHeaderParameter, "Fuse-Client-Id", configuration)

            if (fuseClientId != null) {
                localVarHeaderParameter['Fuse-Client-Id'] = String(fuseClientId);
            }

            if (fuseApiKey != null) {
                localVarHeaderParameter['Fuse-Api-Key'] = String(fuseApiKey);
            }

            if (plaidClientId != null) {
                localVarHeaderParameter['Plaid-Client-Id'] = String(plaidClientId);
            }

            if (plaidSecret != null) {
                localVarHeaderParameter['Plaid-Secret'] = String(plaidSecret);
            }

            if (tellerApplicationId != null) {
                localVarHeaderParameter['Teller-Application-Id'] = String(tellerApplicationId);
            }

            if (tellerCertificate != null) {
                localVarHeaderParameter['Teller-Certificate'] = String(tellerCertificate);
            }

            if (tellerPrivateKey != null) {
                localVarHeaderParameter['Teller-Private-Key'] = String(tellerPrivateKey);
            }

            if (tellerTokenSigningKey != null) {
                localVarHeaderParameter['Teller-Token-Signing-Key'] = String(tellerTokenSigningKey);
            }

            if (tellerSigningSecret != null) {
                localVarHeaderParameter['Teller-Signing-Secret'] = String(tellerSigningSecret);
            }

            if (mxClientId != null) {
                localVarHeaderParameter['Mx-Client-Id'] = String(mxClientId);
            }

            if (mxApiKey != null) {
                localVarHeaderParameter['Mx-Api-Key'] = String(mxApiKey);
            }

            if (snaptradeClientId != null) {
                localVarHeaderParameter['Snaptrade-Client-Id'] = String(snaptradeClientId);
            }

            if (snaptradeConsumerKey != null) {
                localVarHeaderParameter['Snaptrade-Consumer-Key'] = String(snaptradeConsumerKey);
            }

            if (flinksCustomerId != null) {
                localVarHeaderParameter['Flinks-Customer-Id'] = String(flinksCustomerId);
            }

            if (flinksUsInstanceId != null) {
                localVarHeaderParameter['Flinks-Us-Instance-Id'] = String(flinksUsInstanceId);
            }

            if (flinksCaInstanceId != null) {
                localVarHeaderParameter['Flinks-Ca-Instance-Id'] = String(flinksCaInstanceId);
            }

            if (finicityPartnerId != null) {
                localVarHeaderParameter['Finicity-Partner-Id'] = String(finicityPartnerId);
            }

            if (finicityPartnerSecret != null) {
                localVarHeaderParameter['Finicity-Partner-Secret'] = String(finicityPartnerSecret);
            }

            if (finicityAppKey != null) {
                localVarHeaderParameter['Finicity-App-Key'] = String(finicityAppKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpendPowerApi - functional programming interface
 * @export
 */
export const SpendPowerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpendPowerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} spendPowerId 
         * @param {string} fuseClientId 
         * @param {string} fuseApiKey 
         * @param {string} [plaidClientId] 
         * @param {string} [plaidSecret] 
         * @param {string} [tellerApplicationId] 
         * @param {string} [tellerCertificate] 
         * @param {string} [tellerPrivateKey] 
         * @param {string} [tellerTokenSigningKey] 
         * @param {string} [tellerSigningSecret] 
         * @param {string} [mxClientId] 
         * @param {string} [mxApiKey] 
         * @param {string} [snaptradeClientId] 
         * @param {string} [snaptradeConsumerKey] 
         * @param {string} [flinksCustomerId] 
         * @param {string} [flinksUsInstanceId] 
         * @param {string} [flinksCaInstanceId] 
         * @param {string} [finicityPartnerId] 
         * @param {string} [finicityPartnerSecret] 
         * @param {string} [finicityAppKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpendPower(spendPowerId: string, fuseClientId: string, fuseApiKey: string, plaidClientId?: string, plaidSecret?: string, tellerApplicationId?: string, tellerCertificate?: string, tellerPrivateKey?: string, tellerTokenSigningKey?: string, tellerSigningSecret?: string, mxClientId?: string, mxApiKey?: string, snaptradeClientId?: string, snaptradeConsumerKey?: string, flinksCustomerId?: string, flinksUsInstanceId?: string, flinksCaInstanceId?: string, finicityPartnerId?: string, finicityPartnerSecret?: string, finicityAppKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteSpendPowerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSpendPower(spendPowerId, fuseClientId, fuseApiKey, plaidClientId, plaidSecret, tellerApplicationId, tellerCertificate, tellerPrivateKey, tellerTokenSigningKey, tellerSigningSecret, mxClientId, mxApiKey, snaptradeClientId, snaptradeConsumerKey, flinksCustomerId, flinksUsInstanceId, flinksCaInstanceId, finicityPartnerId, finicityPartnerSecret, finicityAppKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SpendPowerApi - factory interface
 * @export
 */
export const SpendPowerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpendPowerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} spendPowerId 
         * @param {string} fuseClientId 
         * @param {string} fuseApiKey 
         * @param {string} [plaidClientId] 
         * @param {string} [plaidSecret] 
         * @param {string} [tellerApplicationId] 
         * @param {string} [tellerCertificate] 
         * @param {string} [tellerPrivateKey] 
         * @param {string} [tellerTokenSigningKey] 
         * @param {string} [tellerSigningSecret] 
         * @param {string} [mxClientId] 
         * @param {string} [mxApiKey] 
         * @param {string} [snaptradeClientId] 
         * @param {string} [snaptradeConsumerKey] 
         * @param {string} [flinksCustomerId] 
         * @param {string} [flinksUsInstanceId] 
         * @param {string} [flinksCaInstanceId] 
         * @param {string} [finicityPartnerId] 
         * @param {string} [finicityPartnerSecret] 
         * @param {string} [finicityAppKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpendPower(spendPowerId: string, fuseClientId: string, fuseApiKey: string, plaidClientId?: string, plaidSecret?: string, tellerApplicationId?: string, tellerCertificate?: string, tellerPrivateKey?: string, tellerTokenSigningKey?: string, tellerSigningSecret?: string, mxClientId?: string, mxApiKey?: string, snaptradeClientId?: string, snaptradeConsumerKey?: string, flinksCustomerId?: string, flinksUsInstanceId?: string, flinksCaInstanceId?: string, finicityPartnerId?: string, finicityPartnerSecret?: string, finicityAppKey?: string, options?: any): AxiosPromise<DeleteSpendPowerResponse> {
            return localVarFp.deleteSpendPower(spendPowerId, fuseClientId, fuseApiKey, plaidClientId, plaidSecret, tellerApplicationId, tellerCertificate, tellerPrivateKey, tellerTokenSigningKey, tellerSigningSecret, mxClientId, mxApiKey, snaptradeClientId, snaptradeConsumerKey, flinksCustomerId, flinksUsInstanceId, flinksCaInstanceId, finicityPartnerId, finicityPartnerSecret, finicityAppKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpendPowerApi - object-oriented interface
 * @export
 * @class SpendPowerApi
 * @extends {BaseAPI}
 */
export class SpendPowerApi extends BaseAPI {
    /**
     * 
     * @param {string} spendPowerId 
     * @param {string} fuseClientId 
     * @param {string} fuseApiKey 
     * @param {string} [plaidClientId] 
     * @param {string} [plaidSecret] 
     * @param {string} [tellerApplicationId] 
     * @param {string} [tellerCertificate] 
     * @param {string} [tellerPrivateKey] 
     * @param {string} [tellerTokenSigningKey] 
     * @param {string} [tellerSigningSecret] 
     * @param {string} [mxClientId] 
     * @param {string} [mxApiKey] 
     * @param {string} [snaptradeClientId] 
     * @param {string} [snaptradeConsumerKey] 
     * @param {string} [flinksCustomerId] 
     * @param {string} [flinksUsInstanceId] 
     * @param {string} [flinksCaInstanceId] 
     * @param {string} [finicityPartnerId] 
     * @param {string} [finicityPartnerSecret] 
     * @param {string} [finicityAppKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpendPowerApi
     */
    public deleteSpendPower(spendPowerId: string, fuseClientId: string, fuseApiKey: string, plaidClientId?: string, plaidSecret?: string, tellerApplicationId?: string, tellerCertificate?: string, tellerPrivateKey?: string, tellerTokenSigningKey?: string, tellerSigningSecret?: string, mxClientId?: string, mxApiKey?: string, snaptradeClientId?: string, snaptradeConsumerKey?: string, flinksCustomerId?: string, flinksUsInstanceId?: string, flinksCaInstanceId?: string, finicityPartnerId?: string, finicityPartnerSecret?: string, finicityAppKey?: string, options?: AxiosRequestConfig) {
        return SpendPowerApiFp(this.configuration).deleteSpendPower(spendPowerId, fuseClientId, fuseApiKey, plaidClientId, plaidSecret, tellerApplicationId, tellerCertificate, tellerPrivateKey, tellerTokenSigningKey, tellerSigningSecret, mxClientId, mxApiKey, snaptradeClientId, snaptradeConsumerKey, flinksCustomerId, flinksUsInstanceId, flinksCaInstanceId, finicityPartnerId, finicityPartnerSecret, finicityAppKey, options).then((request) => request(this.axios, this.basePath));
    }
}


