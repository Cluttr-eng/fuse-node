/**
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 * The account\'s subtype
 * @export
 * @enum {string}
 */
export declare const AccountSubtype: {
    readonly Checking: "checking";
    readonly Savings: "savings";
    readonly CheckingOrSavings: "checking_or_savings";
    readonly BusinessCheckingOrSavings: "business_checking_or_savings";
    readonly BusinessSavings: "business_savings";
    readonly MoneyMarket: "money_market";
    readonly CertificateOfDeposit: "certificate_of_deposit";
    readonly Treasury: "treasury";
    readonly CreditCard: "credit_card";
    readonly DebitCard: "debit_card";
    readonly Bonds: "bonds";
    readonly Hsa: "hsa";
    readonly Paypal: "paypal";
    readonly Prepaid: "prepaid";
    readonly CashManagement: "cash_management";
    readonly Ebt: "ebt";
    readonly Auto: "auto";
    readonly Business: "business";
    readonly Commercial: "commercial";
    readonly Construction: "construction";
    readonly Consumer: "consumer";
    readonly HomeEquity: "home_equity";
    readonly Foreign: "foreign";
    readonly Loan: "loan";
    readonly Mortgage: "mortgage";
    readonly Overdraft: "overdraft";
    readonly LineOfCredit: "line_of_credit";
    readonly Student: "student";
    readonly _529: "529";
    readonly _401A: "401_a";
    readonly _401K: "401_k";
    readonly _403B: "403_b";
    readonly _457B: "457_b";
    readonly Funds: "funds";
    readonly Brokerage: "brokerage";
    readonly Securities: "securities";
    readonly Stocks: "stocks";
    readonly CashIsa: "cash_isa";
    readonly CryptoExchange: "crypto_exchange";
    readonly EducationSavingAccount: "education_saving_account";
    readonly FixedAnnuity: "fixed_annuity";
    readonly Gic: "gic";
    readonly HealthReimbursementArrangement: "health_reimbursement_arrangement";
    readonly Ira: "ira";
    readonly Isa: "isa";
    readonly Keogh: "keogh";
    readonly Lif: "lif";
    readonly LifeInsurance: "life_insurance";
    readonly Lira: "lira";
    readonly Lrif: "lrif";
    readonly Lrsp: "lrsp";
    readonly MutualFund: "mutual_fund";
    readonly NonCustodialWallet: "non_custodial_wallet";
    readonly NonTaxableBrokerageAccount: "non_taxable_brokerage_account";
    readonly OtherAnnuity: "other_annuity";
    readonly OtherInsurance: "other_insurance";
    readonly Pension: "pension";
    readonly Prif: "prif";
    readonly ProfitSharingPlan: "profit_sharing_plan";
    readonly Qshr: "qshr";
    readonly Rdsp: "rdsp";
    readonly Resp: "resp";
    readonly Retirement: "retirement";
    readonly Rlif: "rlif";
    readonly RothIra: "roth_ira";
    readonly Roth401K: "roth_401_k";
    readonly Rrif: "rrif";
    readonly Rrsp: "rrsp";
    readonly Sarsep: "sarsep";
    readonly SepIra: "sep_ira";
    readonly SimpleIra: "simple_ira";
    readonly Sipp: "sipp";
    readonly StockPlan: "stock_plan";
    readonly Tfsa: "tfsa";
    readonly Trust: "trust";
    readonly Ugma: "ugma";
    readonly Utma: "utma";
    readonly VariableAnnuity: "variable_annuity";
    readonly SmallBusiness: "small_business";
    readonly Personal: "personal";
    readonly PersonalWithCollateral: "personal_with_collateral";
    readonly _457: "457";
    readonly RolloverIra: "rollover_ira";
    readonly Taxable: "taxable";
    readonly NonTaxable: "non_taxable";
    readonly EmployeeStockOwnershipPlan: "employee_stock_ownership_plan";
    readonly Individual: "individual";
    readonly CashManagementAccount: "cash_management_account";
    readonly EmployeeStockPurchasePlan: "employee_stock_purchase_plan";
    readonly RegisteredEducationSavingsPlan: "registered_education_savings_plan";
    readonly FixedAnnuityTraditionalIra: "fixed_annuity_traditional_ira";
    readonly InheritedTraditionalIra: "inherited_traditional_ira";
    readonly FixedAnnuityRothIra: "fixed_annuity_roth_ira";
    readonly VariableAnnuityRothIra: "variable_annuity_roth_ira";
    readonly InheritedRothIra: "inherited_roth_ira";
    readonly AdvisoryAccount: "advisory_account";
    readonly BrokerageMargin: "brokerage_margin";
    readonly CharitableGiftAccount: "charitable_gift_account";
    readonly ChurchAccount: "church_account";
    readonly Conservatorship: "conservatorship";
    readonly Custodial: "custodial";
    readonly DefinedBenefitPlan: "defined_benefit_plan";
    readonly DefinedContributionPlan: "defined_contribution_plan";
    readonly Educational: "educational";
    readonly Estate: "estate";
    readonly Executor: "executor";
    readonly GroupRetirementSavingsPlan: "group_retirement_savings_plan";
    readonly GuaranteedInvestmentCertificate: "guaranteed_investment_certificate";
    readonly IndexedAnnuity: "indexed_annuity";
    readonly InvestmentClub: "investment_club";
    readonly IrrevocableTrust: "irrevocable_trust";
    readonly JointTenantsByEntirety: "joint_tenants_by_entirety";
    readonly JointTenantsCommunityProperty: "joint_tenants_community_property";
    readonly JointTenantsInCommon: "joint_tenants_in_common";
    readonly JointTenantsWithRightsOfSurvivorship: "joint_tenants_with_rights_of_survivorship";
    readonly KeoughPlan: "keough_plan";
    readonly LivingTrust: "living_trust";
    readonly LockedInRetirementAccount: "locked_in_retirement_account";
    readonly LockedInRetirementInvestmentFund: "locked_in_retirement_investment_fund";
    readonly LockedInRetirementSavingsAccount: "locked_in_retirement_savings_account";
    readonly MoneyPurchasePlan: "money_purchase_plan";
    readonly Partnership: "partnership";
    readonly _409A: "409_a";
    readonly Rpp: "rpp";
    readonly RevocableTrust: "revocable_trust";
    readonly RothConversion: "roth_conversion";
    readonly SoleProprietorship: "sole_proprietorship";
    readonly SpousalIra: "spousal_ira";
    readonly SpousalRothIra: "spousal_roth_ira";
    readonly TestamentaryTrust: "testamentary_trust";
    readonly ThriftSavingsPlan: "thrift_savings_plan";
    readonly InheritedAnnuity: "inherited_annuity";
    readonly CorporateAccount: "corporate_account";
    readonly LimitedLiabilityAccount: "limited_liability_account";
    readonly Boat: "boat";
    readonly Powersports: "powersports";
    readonly Rv: "rv";
    readonly Heloc: "heloc";
    readonly VehicleInsurance: "vehicle_insurance";
    readonly Disability: "disability";
    readonly Health: "health";
    readonly LongTermCare: "long_term_care";
    readonly PropertyAndCasualty: "property_and_casualty";
    readonly UniversalLife: "universal_life";
    readonly TermLife: "term_life";
    readonly WholeLife: "whole_life";
    readonly AccidentalDeathAndDismemberment: "accidental_death_and_dismemberment";
    readonly VariableUniversalLife: "variable_universal_life";
    readonly Revolving: "revolving";
    readonly Other: "other";
    readonly TimeDeposit: "time_deposit";
    readonly Minus: "-";
};
export type AccountSubtype = typeof AccountSubtype[keyof typeof AccountSubtype];
/**
 * The account\'s type. \'-\' means we were not able to map the upstream type.
 * @export
 * @enum {string}
 */
export declare const AccountType: {
    readonly Depository: "depository";
    readonly Credit: "credit";
    readonly Loan: "loan";
    readonly Investment: "investment";
    readonly Insurance: "insurance";
    readonly Property: "property";
    readonly Other: "other";
    readonly Minus: "-";
};
export type AccountType = typeof AccountType[keyof typeof AccountType];
/**
 *
 * @export
 * @interface AddAccountEventsRequest
 */
export interface AddAccountEventsRequest {
    /**
     *
     * @type {Array<AddAccountEventsRequestEventsInner>}
     * @memberof AddAccountEventsRequest
     */
    'events': Array<AddAccountEventsRequestEventsInner>;
}
/**
 * @type AddAccountEventsRequestEventsInner
 * @export
 */
export type AddAccountEventsRequestEventsInner = ExternalTransactionEvent | InAppTransactionEvent | UpdatedBalanceEvent;
/**
 *
 * @export
 * @interface AddAccountEventsResponse
 */
export interface AddAccountEventsResponse {
    /**
     * Response message
     * @type {string}
     * @memberof AddAccountEventsResponse
     */
    'message': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof AddAccountEventsResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const Aggregator: {
    readonly Basiq: "basiq";
    readonly Belvo: "belvo";
    readonly Finicity: "finicity";
    readonly Finverse: "finverse";
    readonly Flinks: "flinks";
    readonly Mono: "mono";
    readonly Mx: "mx";
    readonly Plaid: "plaid";
    readonly Snaptrade: "snaptrade";
    readonly Teller: "teller";
    readonly Truelayer: "truelayer";
};
export type Aggregator = typeof Aggregator[keyof typeof Aggregator];
/**
 * The Asset Report in JSON format.
 * @export
 * @interface AssetReport
 */
export interface AssetReport {
    /**
     * A unique ID identifying an Asset Report.
     * @type {string}
     * @memberof AssetReport
     */
    'asset_report_id'?: string;
    /**
     * A token that can be provided to endpoints such as /asset_report/get or /asset_report/pdf/get to fetch or update an Asset Report.
     * @type {string}
     * @memberof AssetReport
     */
    'asset_report_token'?: string;
    /**
     * The date and time when the Asset Report was created, in ISO 8601 format
     * @type {string}
     * @memberof AssetReport
     */
    'date_generated'?: string;
    /**
     * The duration of transaction history you requested
     * @type {number}
     * @memberof AssetReport
     */
    'days_requested'?: number;
    /**
     * An array of Asset Reports, one for each account in the Asset Report.
     * @type {Array<AssetReportAccountsInner>}
     * @memberof AssetReport
     */
    'accounts'?: Array<AssetReportAccountsInner>;
}
/**
 *
 * @export
 * @interface AssetReportAccountsInner
 */
export interface AssetReportAccountsInner {
    /**
     * The remote account ID of the account.
     * @type {string}
     * @memberof AssetReportAccountsInner
     */
    'remote_id'?: string;
    /**
     *
     * @type {AssetReportAccountsInnerBalance}
     * @memberof AssetReportAccountsInner
     */
    'balance'?: AssetReportAccountsInnerBalance;
    /**
     * An array of historical balances for the account.
     * @type {Array<AssetReportAccountsInnerHistoricalBalancesInner>}
     * @memberof AssetReportAccountsInner
     */
    'historical_balances'?: Array<AssetReportAccountsInnerHistoricalBalancesInner>;
    /**
     * An array of historical transactions for the account.
     * @type {Array<AssetReportTransaction>}
     * @memberof AssetReportAccountsInner
     */
    'transactions'?: Array<AssetReportTransaction>;
}
/**
 *
 * @export
 * @interface AssetReportAccountsInnerBalance
 */
export interface AssetReportAccountsInnerBalance {
    /**
     * Amount after factoring in pending balances
     * @type {number}
     * @memberof AssetReportAccountsInnerBalance
     */
    'available'?: number;
    /**
     * Amount without factoring in pending balances
     * @type {number}
     * @memberof AssetReportAccountsInnerBalance
     */
    'current'?: number;
    /**
     * The ISO-4217 currency code of the balance.
     * @type {string}
     * @memberof AssetReportAccountsInnerBalance
     */
    'iso_currency_code'?: string;
}
/**
 *
 * @export
 * @interface AssetReportAccountsInnerHistoricalBalancesInner
 */
export interface AssetReportAccountsInnerHistoricalBalancesInner {
    /**
     * The date of the calculated historical balance, in an ISO 8601 format (YYYY-MM-DD)
     * @type {string}
     * @memberof AssetReportAccountsInnerHistoricalBalancesInner
     */
    'date'?: string;
    /**
     * The total amount of funds in the account, calculated from the current balance in the balance object by subtracting inflows and adding back outflows according to the posted date of each transaction.
     * @type {number}
     * @memberof AssetReportAccountsInnerHistoricalBalancesInner
     */
    'current'?: number;
    /**
     * The ISO-4217 currency code of the balance.
     * @type {string}
     * @memberof AssetReportAccountsInnerHistoricalBalancesInner
     */
    'iso_currency_code'?: string;
}
/**
 *
 * @export
 * @interface AssetReportResponse
 */
export interface AssetReportResponse {
    /**
     *
     * @type {AssetReport}
     * @memberof AssetReportResponse
     */
    'report'?: AssetReport;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof AssetReportResponse
     */
    'request_id'?: string;
}
/**
 *
 * @export
 * @interface AssetReportTransaction
 */
export interface AssetReportTransaction {
    /**
     * Remote Id of the transaction, ie Plaid or Teller Id
     * @type {string}
     * @memberof AssetReportTransaction
     */
    'remote_id': string;
    /**
     * Remote Account Id of the transaction, ie Plaid Account Id
     * @type {string}
     * @memberof AssetReportTransaction
     */
    'remote_account_id': string;
    /**
     * Amount in cents associated with the transaction. The format of this value is a double. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
     * @type {number}
     * @memberof AssetReportTransaction
     */
    'amount': number;
    /**
     * Date of the transaction (YYYY-MM-DD)
     * @type {string}
     * @memberof AssetReportTransaction
     */
    'date': string;
    /**
     * Description of the transaction
     * @type {string}
     * @memberof AssetReportTransaction
     */
    'description': string;
    /**
     * Categories of the transaction, ie Computers and Electronics. \'-\' means we could not map the upstream category.
     * @type {Array<string>}
     * @memberof AssetReportTransaction
     */
    'category': Array<AssetReportTransactionCategoryEnum>;
    /**
     *
     * @type {TransactionMerchant}
     * @memberof AssetReportTransaction
     */
    'merchant': TransactionMerchant;
    /**
     * The status of the transaction. This will be either posted or pending.
     * @type {string}
     * @memberof AssetReportTransaction
     */
    'status': AssetReportTransactionStatusEnum;
    /**
     * The ISO-4217 currency code of the transaction
     * @type {string}
     * @memberof AssetReportTransaction
     */
    'iso_currency_code'?: string;
    /**
     *
     * @type {any}
     * @memberof AssetReportTransaction
     */
    'remote_data': any;
}
export declare const AssetReportTransactionCategoryEnum: {
    readonly AccessoriesStore: "accessories_store";
    readonly AccountingAndBookkeeping: "accounting_and_bookkeeping";
    readonly Ach: "ach";
    readonly Acorns: "acorns";
    readonly Acupuncture: "acupuncture";
    readonly Adult: "adult";
    readonly AdultEducation: "adult_education";
    readonly AdultEntertainment: "adult_entertainment";
    readonly Advertising: "advertising";
    readonly AdvertisingAgenciesAndMediaBuyers: "advertising_agencies_and_media_buyers";
    readonly AdvertisingAndMarketing: "advertising_and_marketing";
    readonly Afghan: "afghan";
    readonly African: "african";
    readonly AgricultureAndForestry: "agriculture_and_forestry";
    readonly AirlinesAndAviationServices: "airlines_and_aviation_services";
    readonly Airports: "airports";
    readonly AlcoholAndBars: "alcohol_and_bars";
    readonly AlternativeMedicine: "alternative_medicine";
    readonly American: "american";
    readonly Anesthesiologists: "anesthesiologists";
    readonly AnimalShelter: "animal_shelter";
    readonly Antiques: "antiques";
    readonly ApartmentsCondosAndHouses: "apartments_condos_and_houses";
    readonly ApparelAndFabricProducts: "apparel_and_fabric_products";
    readonly Aquarium: "aquarium";
    readonly ArcadesAndAmusementParks: "arcades_and_amusement_parks";
    readonly Architects: "architects";
    readonly ArtAndGraphicDesign: "art_and_graphic_design";
    readonly ArtDealersAndGalleries: "art_dealers_and_galleries";
    readonly ArtRestoration: "art_restoration";
    readonly ArtSchool: "art_school";
    readonly ArtsAndCrafts: "arts_and_crafts";
    readonly ArtsAndEntertainment: "arts_and_entertainment";
    readonly Asian: "asian";
    readonly AssistedLivingServices: "assisted_living_services";
    readonly AthleticFields: "athletic_fields";
    readonly Atm: "atm";
    readonly Atms: "atms";
    readonly Auctions: "auctions";
    readonly Audiovisual: "audiovisual";
    readonly Australian: "australian";
    readonly AutoOilAndLube: "auto_oil_and_lube";
    readonly AutoPayment: "auto_payment";
    readonly AutoSmogCheck: "auto_smog_check";
    readonly AutoTires: "auto_tires";
    readonly AutoTransmission: "auto_transmission";
    readonly AutomationAndControlSystems: "automation_and_control_systems";
    readonly Automotive: "automotive";
    readonly BagelShop: "bagel_shop";
    readonly Bakery: "bakery";
    readonly BankFees: "bank_fees";
    readonly BankingAndFinance: "banking_and_finance";
    readonly Bar: "bar";
    readonly Barbecue: "barbecue";
    readonly Baseball: "baseball";
    readonly Basketball: "basketball";
    readonly BattingCages: "batting_cages";
    readonly Beaches: "beaches";
    readonly BeautyProducts: "beauty_products";
    readonly BedAndBreakfasts: "bed_and_breakfasts";
    readonly BeerWineAndSpirits: "beer_wine_and_spirits";
    readonly Benefits: "benefits";
    readonly Betterment: "betterment";
    readonly Bicycles: "bicycles";
    readonly Bill: "bill";
    readonly BilliardsAndPool: "billiards_and_pool";
    readonly Billpay: "billpay";
    readonly BloodBanksAndCenters: "blood_banks_and_centers";
    readonly BoardingHouses: "boarding_houses";
    readonly Boat: "boat";
    readonly BoatDealers: "boat_dealers";
    readonly Boating: "boating";
    readonly BooksAndSupplies: "books_and_supplies";
    readonly Bookstores: "bookstores";
    readonly Boutique: "boutique";
    readonly Bowling: "bowling";
    readonly Brazilian: "brazilian";
    readonly BreakfastSpot: "breakfast_spot";
    readonly Breweries: "breweries";
    readonly BuildingAndLandSurveyors: "building_and_land_surveyors";
    readonly BuildingsAndStructures: "buildings_and_structures";
    readonly Burgers: "burgers";
    readonly Burrito: "burrito";
    readonly BusStations: "bus_stations";
    readonly Business: "business";
    readonly BusinessAndStrategyConsulting: "business_and_strategy_consulting";
    readonly BusinessBrokersAndFranchises: "business_brokers_and_franchises";
    readonly BusinessServices: "business_services";
    readonly Cable: "cable";
    readonly Cafe: "cafe";
    readonly Cajun: "cajun";
    readonly Cameras: "cameras";
    readonly CampgroundsAndRvParks: "campgrounds_and_rv_parks";
    readonly CanoesAndKayaks: "canoes_and_kayaks";
    readonly CarAndTruckRentals: "car_and_truck_rentals";
    readonly CarAppraisers: "car_appraisers";
    readonly CarDealersAndLeasing: "car_dealers_and_leasing";
    readonly CarPartsAndAccessories: "car_parts_and_accessories";
    readonly CarService: "car_service";
    readonly CarWashAndDetail: "car_wash_and_detail";
    readonly Cardiologists: "cardiologists";
    readonly CardsAndStationery: "cards_and_stationery";
    readonly Caretakers: "caretakers";
    readonly Caribbean: "caribbean";
    readonly Carpenters: "carpenters";
    readonly CarpetAndFlooring: "carpet_and_flooring";
    readonly CashAdvance: "cash_advance";
    readonly CasinosAndGaming: "casinos_and_gaming";
    readonly Catering: "catering";
    readonly Cemetery: "cemetery";
    readonly CharitiesAndNonProfits: "charities_and_non-profits";
    readonly Charity: "charity";
    readonly CharterBuses: "charter_buses";
    readonly ChaseQuickpay: "chase_quickpay";
    readonly Check: "check";
    readonly CheckCashing: "check_cashing";
    readonly ChemicalsAndGasses: "chemicals_and_gasses";
    readonly Childcare: "childcare";
    readonly Children: "children";
    readonly Chinese: "chinese";
    readonly Chiropractors: "chiropractors";
    readonly Churches: "churches";
    readonly CircusesAndCarnivals: "circuses_and_carnivals";
    readonly ClassicAndAntiqueCar: "classic_and_antique_car";
    readonly Cleaning: "cleaning";
    readonly Clothing: "clothing";
    readonly ClothingAndAccessories: "clothing_and_accessories";
    readonly Coal: "coal";
    readonly CoffeeShop: "coffee_shop";
    readonly Coinbase: "coinbase";
    readonly Collections: "collections";
    readonly CollegesAndUniversities: "colleges_and_universities";
    readonly CombatSports: "combat_sports";
    readonly CommercialRealEstate: "commercial_real_estate";
    readonly Community: "community";
    readonly ComputerTraining: "computer_training";
    readonly Computers: "computers";
    readonly ComputersAndElectronics: "computers_and_electronics";
    readonly ComputersAndOfficeMachines: "computers_and_office_machines";
    readonly Construction: "construction";
    readonly ConstructionSupplies: "construction_supplies";
    readonly Contractors: "contractors";
    readonly ConvenienceStores: "convenience_stores";
    readonly CorporateHousing: "corporate_housing";
    readonly CorrectionalInstitutions: "correctional_institutions";
    readonly Costumes: "costumes";
    readonly CottagesAndCabins: "cottages_and_cabins";
    readonly CounselingAndTherapy: "counseling_and_therapy";
    readonly Courts: "courts";
    readonly CreativeServices: "creative_services";
    readonly Credit: "credit";
    readonly CreditCard: "credit_card";
    readonly CreditCounselingAndBankruptcyServices: "credit_counseling_and_bankruptcy_services";
    readonly CreditReporting: "credit_reporting";
    readonly CropProduction: "crop_production";
    readonly Cruises: "cruises";
    readonly Cuban: "cuban";
    readonly CulinaryLessonsAndSchools: "culinary_lessons_and_schools";
    readonly CupcakeShop: "cupcake_shop";
    readonly Cycling: "cycling";
    readonly Dance: "dance";
    readonly DanceAndMusic: "dance_and_music";
    readonly DanceHallsAndSaloons: "dance_halls_and_saloons";
    readonly DanceSchools: "dance_schools";
    readonly DatingAndEscort: "dating_and_escort";
    readonly DayCareAndPreschools: "day_care_and_preschools";
    readonly Debit: "debit";
    readonly Delis: "delis";
    readonly Dentists: "dentists";
    readonly DepartmentStores: "department_stores";
    readonly Deposit: "deposit";
    readonly Dermatologists: "dermatologists";
    readonly Dessert: "dessert";
    readonly Digit: "digit";
    readonly DigitalPurchase: "digital_purchase";
    readonly Diners: "diners";
    readonly Dining: "dining";
    readonly DirectMailAndEmailMarketingServices: "direct_mail_and_email_marketing_services";
    readonly DisabledPersonsServices: "disabled_persons_services";
    readonly DiscountStores: "discount_stores";
    readonly Distillery: "distillery";
    readonly Distribution: "distribution";
    readonly DoctorsAndDentists: "doctors_and_dentists";
    readonly Donuts: "donuts";
    readonly DoorsAndWindows: "doors_and_windows";
    readonly DrivingSchools: "driving_schools";
    readonly DrugAndAlcoholServices: "drug_and_alcohol_services";
    readonly Dwolla: "dwolla";
    readonly EarNoseAndThroat: "ear_nose_and_throat";
    readonly EasternEuropean: "eastern_european";
    readonly Education: "education";
    readonly Electric: "electric";
    readonly ElectricalEquipment: "electrical_equipment";
    readonly ElectricalEquipmentAndComponents: "electrical_equipment_and_components";
    readonly Electricians: "electricians";
    readonly Electronics: "electronics";
    readonly EmergencyServices: "emergency_services";
    readonly EmploymentAgencies: "employment_agencies";
    readonly Engineering: "engineering";
    readonly Entertainment: "entertainment";
    readonly Environmental: "environmental";
    readonly Equestrian: "equestrian";
    readonly EquipmentRental: "equipment_rental";
    readonly Ethiopian: "ethiopian";
    readonly EventsAndEventPlanning: "events_and_event_planning";
    readonly ExcessActivity: "excess_activity";
    readonly Expense: "expense";
    readonly FacilitiesAndNursingHomes: "facilities_and_nursing_homes";
    readonly FairgroundsAndRodeos: "fairgrounds_and_rodeos";
    readonly Falafel: "falafel";
    readonly FamilyMedicine: "family_medicine";
    readonly FarmersMarkets: "farmers_markets";
    readonly FastFood: "fast_food";
    readonly Fee: "fee";
    readonly FencesFireplacesAndGarageDoors: "fences_fireplaces_and_garage_doors";
    readonly Filipino: "filipino";
    readonly Financial: "financial";
    readonly FinancialPlanningAndInvestments: "financial_planning_and_investments";
    readonly FireStations: "fire_stations";
    readonly FishAndChips: "fish_and_chips";
    readonly FleaMarkets: "flea_markets";
    readonly Florists: "florists";
    readonly FoodAndBeverage: "food_and_beverage";
    readonly FoodAndBeverageStore: "food_and_beverage_store";
    readonly FoodAndDrink: "food_and_drink";
    readonly FoodTruck: "food_truck";
    readonly Football: "football";
    readonly ForeignTransaction: "foreign_transaction";
    readonly Forestry: "forestry";
    readonly Forests: "forests";
    readonly FraternitiesAndSororities: "fraternities_and_sororities";
    readonly FraudDispute: "fraud_dispute";
    readonly French: "french";
    readonly Fuel: "fuel";
    readonly FuelDealer: "fuel_dealer";
    readonly FundRaising: "fund_raising";
    readonly FuneralServices: "funeral_services";
    readonly FurnitureAndFixtures: "furniture_and_fixtures";
    readonly FurnitureAndHomeDecor: "furniture_and_home_decor";
    readonly Gardens: "gardens";
    readonly Gas: "gas";
    readonly GasStations: "gas_stations";
    readonly Gastroenterologists: "gastroenterologists";
    readonly Gastropub: "gastropub";
    readonly General: "general";
    readonly GeneralSurgery: "general_surgery";
    readonly Geological: "geological";
    readonly German: "german";
    readonly GiftAndNovelty: "gift_and_novelty";
    readonly Gifts: "gifts";
    readonly GlassProducts: "glass_products";
    readonly GlassesAndOptometrist: "glasses_and_optometrist";
    readonly GoCarts: "go_carts";
    readonly Golf: "golf";
    readonly GoodsAndMerchandise: "goods_and_merchandise";
    readonly GovernmentDepartmentsAndAgencies: "government_departments_and_agencies";
    readonly GovernmentLobbyists: "government_lobbyists";
    readonly Greek: "greek";
    readonly GunRanges: "gun_ranges";
    readonly Gym: "gym";
    readonly Gymnastics: "gymnastics";
    readonly GymsAndFitnessCenters: "gyms_and_fitness_centers";
    readonly HairRemoval: "hair_removal";
    readonly HairSalonsAndBarbers: "hair_salons_and_barbers";
    readonly HardwareAndServices: "hardware_and_services";
    readonly HardwareStore: "hardware_store";
    readonly HealthFood: "health_food";
    readonly Healthcare: "healthcare";
    readonly HealthcareServices: "healthcare_services";
    readonly HeatingVentilatingAndAirConditioning: "heating_ventilating_and_air_conditioning";
    readonly Heliports: "heliports";
    readonly Hiking: "hiking";
    readonly HistoricSites: "historic_sites";
    readonly HobbyAndCollectibles: "hobby_and_collectibles";
    readonly Hockey: "hockey";
    readonly HoldingAndInvestmentOffices: "holding_and_investment_offices";
    readonly Home: "home";
    readonly HomeAppliances: "home_appliances";
    readonly HomeImprovement: "home_improvement";
    readonly HomeInspectionServices: "home_inspection_services";
    readonly HookahLounges: "hookah_lounges";
    readonly HospitalsClinicsAndMedicalCenters: "hospitals_clinics_and_medical_centers";
    readonly Hostels: "hostels";
    readonly HotAirBalloons: "hot_air_balloons";
    readonly HotelLounge: "hotel_lounge";
    readonly HotelsAndMotels: "hotels_and_motels";
    readonly Household: "household";
    readonly Housewares: "housewares";
    readonly HousingAssistanceAndShelters: "housing_assistance_and_shelters";
    readonly HumanResources: "human_resources";
    readonly HuntingAndFishing: "hunting_and_fishing";
    readonly IceCream: "ice_cream";
    readonly Immigration: "immigration";
    readonly ImportAndExport: "import_and_export";
    readonly Income: "income";
    readonly Indian: "indian";
    readonly Indonesian: "indonesian";
    readonly IndustrialMachineryAndEquipment: "industrial_machinery_and_equipment";
    readonly IndustrialMachineryAndVehicles: "industrial_machinery_and_vehicles";
    readonly IndustrialSupplies: "industrial_supplies";
    readonly Infrastructure: "infrastructure";
    readonly InsufficientFunds: "insufficient_funds";
    readonly Insurance: "insurance";
    readonly Interest: "interest";
    readonly InterestCharged: "interest_charged";
    readonly InterestEarned: "interest_earned";
    readonly InteriorDesign: "interior_design";
    readonly InternalAccountTransfer: "internal_account_transfer";
    readonly InternalMedicine: "internal_medicine";
    readonly Internet: "internet";
    readonly InternetCafes: "internet_cafes";
    readonly InternetServices: "internet_services";
    readonly Investment: "investment";
    readonly Italian: "italian";
    readonly Japanese: "japanese";
    readonly JazzAndBluesCafe: "jazz_and_blues_cafe";
    readonly JewelryAndWatches: "jewelry_and_watches";
    readonly JuiceBar: "juice_bar";
    readonly Karaoke: "karaoke";
    readonly KeepTheChangeSavingsProgram: "keep_the_change_savings_program";
    readonly Kids: "kids";
    readonly KidsStore: "kids'_store";
    readonly Kitchens: "kitchens";
    readonly Korean: "korean";
    readonly Lakes: "lakes";
    readonly Landmarks: "landmarks";
    readonly LandscapingAndGardeners: "landscaping_and_gardeners";
    readonly LatePayment: "late_payment";
    readonly LatinAmerican: "latin_american";
    readonly LaundryAndGarmentServices: "laundry_and_garment_services";
    readonly LawEnforcement: "law_enforcement";
    readonly LawnAndGarden: "lawn_and_garden";
    readonly Leather: "leather";
    readonly LeatherGoods: "leather_goods";
    readonly Legal: "legal";
    readonly Libraries: "libraries";
    readonly LightingFixtures: "lighting_fixtures";
    readonly LimosAndChauffeurs: "limos_and_chauffeurs";
    readonly LingerieStore: "lingerie_store";
    readonly LivestockAndAnimals: "livestock_and_animals";
    readonly Loan: "loan";
    readonly LoansAndMortgages: "loans_and_mortgages";
    readonly LodgesAndVacationRentals: "lodges_and_vacation_rentals";
    readonly Lodging: "lodging";
    readonly LoggingAndSawmills: "logging_and_sawmills";
    readonly Luggage: "luggage";
    readonly MachineShops: "machine_shops";
    readonly MaintenanceAndRepair: "maintenance_and_repair";
    readonly Management: "management";
    readonly ManicuresAndPedicures: "manicures_and_pedicures";
    readonly Manufacturing: "manufacturing";
    readonly MarineSupplies: "marine_supplies";
    readonly MarketResearchAndConsulting: "market_research_and_consulting";
    readonly Masonry: "masonry";
    readonly MassageClinicsAndTherapists: "massage_clinics_and_therapists";
    readonly Media: "media";
    readonly MediaProduction: "media_production";
    readonly MedicalSuppliesAndLabs: "medical_supplies_and_labs";
    readonly Mediterranean: "mediterranean";
    readonly MensStore: "men's_store";
    readonly MentalHealth: "mental_health";
    readonly Metal: "metal";
    readonly MetalProducts: "metal_products";
    readonly Metals: "metals";
    readonly Mexican: "mexican";
    readonly MiddleEastern: "middle_eastern";
    readonly Military: "military";
    readonly MiniatureGolf: "miniature_golf";
    readonly Mining: "mining";
    readonly MobileHomes: "mobile_homes";
    readonly MobilePhones: "mobile_phones";
    readonly MonumentsAndMemorials: "monuments_and_memorials";
    readonly Moroccan: "moroccan";
    readonly Mosques: "mosques";
    readonly MotorcycleMopedAndScooterRepair: "motorcycle_moped_and_scooter_repair";
    readonly MotorcyclesMopedsAndScooters: "motorcycles_mopeds_and_scooters";
    readonly Mountains: "mountains";
    readonly Movers: "movers";
    readonly MovieTheatres: "movie_theatres";
    readonly Museums: "museums";
    readonly MusicVideoAndDvd: "music_video_and_dvd";
    readonly MusicAndShowVenues: "music_and_show_venues";
    readonly MusicalInstruments: "musical_instruments";
    readonly NaturalParks: "natural_parks";
    readonly Neurologists: "neurologists";
    readonly NewsReporting: "news_reporting";
    readonly Newsstands: "newsstands";
    readonly NightClubs: "night_clubs";
    readonly Nightlife: "nightlife";
    readonly NonMetallicMinerals: "non-metallic_minerals";
    readonly NonmetallicMineralProducts: "nonmetallic_mineral_products";
    readonly Nurses: "nurses";
    readonly Nutritionists: "nutritionists";
    readonly ObstetriciansAndGynecologists: "obstetricians_and_gynecologists";
    readonly Office: "office";
    readonly OfficeSupplies: "office_supplies";
    readonly OilAndGas: "oil_and_gas";
    readonly Oncologists: "oncologists";
    readonly OnlineAdvertising: "online_advertising";
    readonly OnlineSubscriptions: "online_subscriptions";
    readonly Ophthalmologists: "ophthalmologists";
    readonly Optometrists: "optometrists";
    readonly OrganizationsAndAssociations: "organizations_and_associations";
    readonly OrthopedicSurgeons: "orthopedic_surgeons";
    readonly Other: "other";
    readonly Outdoors: "outdoors";
    readonly Outlet: "outlet";
    readonly Overdraft: "overdraft";
    readonly Packaging: "packaging";
    readonly Paintball: "paintball";
    readonly Painting: "painting";
    readonly Paper: "paper";
    readonly PaperProducts: "paper_products";
    readonly Parking: "parking";
    readonly Parks: "parks";
    readonly PartyCenters: "party_centers";
    readonly Pathologists: "pathologists";
    readonly PawnShops: "pawn_shops";
    readonly Payment: "payment";
    readonly Paypal: "paypal";
    readonly Payroll: "payroll";
    readonly Pediatricians: "pediatricians";
    readonly PersonalCare: "personal_care";
    readonly PersonalTrainers: "personal_trainers";
    readonly PestControl: "pest_control";
    readonly Pet: "pet";
    readonly Petroleum: "petroleum";
    readonly Pets: "pets";
    readonly Pharmacies: "pharmacies";
    readonly Phone: "phone";
    readonly Photography: "photography";
    readonly PhotosAndFrames: "photos_and_frames";
    readonly PhysicalTherapy: "physical_therapy";
    readonly Physicians: "physicians";
    readonly PicnicAreas: "picnic_areas";
    readonly Piercing: "piercing";
    readonly Pizza: "pizza";
    readonly Plaid: "plaid";
    readonly PlasticProducts: "plastic_products";
    readonly PlasticSurgeons: "plastic_surgeons";
    readonly Plastics: "plastics";
    readonly Playgrounds: "playgrounds";
    readonly Plumbing: "plumbing";
    readonly Podiatrists: "podiatrists";
    readonly PoliceStations: "police_stations";
    readonly PoolsAndSpas: "pools_and_spas";
    readonly Portuguese: "portuguese";
    readonly PostOffices: "post_offices";
    readonly PregnancyAndSexualHealth: "pregnancy_and_sexual_health";
    readonly PrimaryAndSecondarySchools: "primary_and_secondary_schools";
    readonly PrintTvRadioAndOutdoorAdvertising: "print_tv_radio_and_outdoor_advertising";
    readonly PrintingAndPublishing: "printing_and_publishing";
    readonly PromotionalItems: "promotional_items";
    readonly PropertyManagement: "property_management";
    readonly Psychiatrists: "psychiatrists";
    readonly PsychicsAndAstrologers: "psychics_and_astrologers";
    readonly Psychologists: "psychologists";
    readonly PublicAndSocialServices: "public_and_social_services";
    readonly PublicRelations: "public_relations";
    readonly PublicTransportationServices: "public_transportation_services";
    readonly RaceTracks: "race_tracks";
    readonly RacquetSports: "racquet_sports";
    readonly Racquetball: "racquetball";
    readonly Radiologists: "radiologists";
    readonly Rafting: "rafting";
    readonly Rail: "rail";
    readonly RealEstate: "real_estate";
    readonly RealEstateAgents: "real_estate_agents";
    readonly RealEstateAppraiser: "real_estate_appraiser";
    readonly RealEstateDevelopmentAndTitleCompanies: "real_estate_development_and_title_companies";
    readonly Recreation: "recreation";
    readonly RecreationCenters: "recreation_centers";
    readonly RefrigerationAndIce: "refrigeration_and_ice";
    readonly Refund: "refund";
    readonly Religious: "religious";
    readonly RenewableEnergy: "renewable_energy";
    readonly Rent: "rent";
    readonly RepairServices: "repair_services";
    readonly Research: "research";
    readonly Resorts: "resorts";
    readonly Respiratory: "respiratory";
    readonly Restaurants: "restaurants";
    readonly Retirement: "retirement";
    readonly RideShare: "ride_share";
    readonly Rivers: "rivers";
    readonly RockClimbing: "rock_climbing";
    readonly Roofers: "roofers";
    readonly Rubber: "rubber";
    readonly RubberProducts: "rubber_products";
    readonly Running: "running";
    readonly RvsAndMotorHomes: "rvs_and_motor_homes";
    readonly SalvageYards: "salvage_yards";
    readonly SanitaryAndWasteManagement: "sanitary_and_waste_management";
    readonly SaveAsYouGo: "save_as_you_go";
    readonly Scandinavian: "scandinavian";
    readonly Scientific: "scientific";
    readonly ScubaDiving: "scuba_diving";
    readonly Seafood: "seafood";
    readonly SearchEngineMarketingAndOptimization: "search_engine_marketing_and_optimization";
    readonly SecurityAndSafety: "security_and_safety";
    readonly SeniorCitizenServices: "senior_citizen_services";
    readonly Service: "service";
    readonly ServiceInstruments: "service_instruments";
    readonly Services: "services";
    readonly Shipping: "shipping";
    readonly ShippingAndFreight: "shipping_and_freight";
    readonly ShoeStore: "shoe_store";
    readonly Shopping: "shopping";
    readonly ShoppingCentersAndMalls: "shopping_centers_and_malls";
    readonly Shops: "shops";
    readonly Skating: "skating";
    readonly SkinCare: "skin_care";
    readonly Skydiving: "skydiving";
    readonly SnowSports: "snow_sports";
    readonly Soccer: "soccer";
    readonly SocialClubs: "social_clubs";
    readonly Software: "software";
    readonly SoftwareDevelopment: "software_development";
    readonly Spanish: "spanish";
    readonly Spas: "spas";
    readonly Specialty: "specialty";
    readonly Sport: "sport";
    readonly SportingGoods: "sporting_goods";
    readonly SportsAndRecreationCamps: "sports_and_recreation_camps";
    readonly SportsBar: "sports_bar";
    readonly SportsClubs: "sports_clubs";
    readonly SportsVenues: "sports_venues";
    readonly Square: "square";
    readonly SquareCash: "square_cash";
    readonly StadiumsAndArenas: "stadiums_and_arenas";
    readonly Steakhouses: "steakhouses";
    readonly StockBrokers: "stock_brokers";
    readonly Storage: "storage";
    readonly StripClub: "strip_club";
    readonly StudentAidAndGrants: "student_aid_and_grants";
    readonly Subscription: "subscription";
    readonly SupermarketsAndGroceries: "supermarkets_and_groceries";
    readonly Sushi: "sushi";
    readonly Swimming: "swimming";
    readonly SwimmingPoolMaintenanceAndServices: "swimming_pool_maintenance_and_services";
    readonly Swimwear: "swimwear";
    readonly Swiss: "swiss";
    readonly SymphonyAndOpera: "symphony_and_opera";
    readonly Synagogues: "synagogues";
    readonly Tailors: "tailors";
    readonly TanningSalons: "tanning_salons";
    readonly Tattooing: "tattooing";
    readonly Tax: "tax";
    readonly Taxes: "taxes";
    readonly Taxi: "taxi";
    readonly TelecommunicationServices: "telecommunication_services";
    readonly Television: "television";
    readonly Temple: "temple";
    readonly Tennis: "tennis";
    readonly Textiles: "textiles";
    readonly Thai: "thai";
    readonly TheatricalProductions: "theatrical_productions";
    readonly ThirdParty: "third_party";
    readonly Tobacco: "tobacco";
    readonly TollsAndFees: "tolls_and_fees";
    readonly TouristInformationAndServices: "tourist_information_and_services";
    readonly Towing: "towing";
    readonly Toys: "toys";
    readonly Transfer: "transfer";
    readonly TransfersAndAdjustments: "transfers_and_adjustments";
    readonly Transport: "transport";
    readonly Transportation: "transportation";
    readonly TransportationCenters: "transportation_centers";
    readonly TransportationEquipment: "transportation_equipment";
    readonly Travel: "travel";
    readonly TravelAndTransportation: "travel_and_transportation";
    readonly TravelAgentsAndTourOperators: "travel_agents_and_tour_operators";
    readonly TreeService: "tree_service";
    readonly Turkish: "turkish";
    readonly TutoringAndEducationalServices: "tutoring_and_educational_services";
    readonly Upholstery: "upholstery";
    readonly Urologists: "urologists";
    readonly UsedCarDealers: "used_car_dealers";
    readonly Utilities: "utilities";
    readonly VeganAndVegetarian: "vegan_and_vegetarian";
    readonly Venmo: "venmo";
    readonly Veterinarians: "veterinarians";
    readonly VideoGames: "video_games";
    readonly VintageAndThrift: "vintage_and_thrift";
    readonly VocationalSchools: "vocational_schools";
    readonly WarehousesAndWholesaleStores: "warehouses_and_wholesale_stores";
    readonly Water: "water";
    readonly WaterAndWasteManagement: "water_and_waste_management";
    readonly WaterSports: "water_sports";
    readonly WebDesignAndDevelopment: "web_design_and_development";
    readonly WeddingAndBridal: "wedding_and_bridal";
    readonly Welding: "welding";
    readonly Wholesale: "wholesale";
    readonly WineBar: "wine_bar";
    readonly Winery: "winery";
    readonly Wire: "wire";
    readonly WireTransfer: "wire_transfer";
    readonly Withdrawal: "withdrawal";
    readonly WomensStore: "women's_store";
    readonly WoodProducts: "wood_products";
    readonly WritingCopywritingAndTechnicalWriting: "writing_copywriting_and_technical_writing";
    readonly YogaAndPilates: "yoga_and_pilates";
    readonly YouthOrganizations: "youth_organizations";
    readonly Zoo: "zoo";
    readonly Minus: "-";
};
export type AssetReportTransactionCategoryEnum = typeof AssetReportTransactionCategoryEnum[keyof typeof AssetReportTransactionCategoryEnum];
export declare const AssetReportTransactionStatusEnum: {
    readonly Pending: "pending";
    readonly Posted: "posted";
};
export type AssetReportTransactionStatusEnum = typeof AssetReportTransactionStatusEnum[keyof typeof AssetReportTransactionStatusEnum];
/**
 *
 * @export
 * @interface ConsumerRiskReport
 */
export interface ConsumerRiskReport {
    /**
     *
     * @type {string}
     * @memberof ConsumerRiskReport
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ConsumerRiskReport
     */
    'customization_id': string;
    /**
     * The total limit for the current timeframe, in cents.
     * @type {number}
     * @memberof ConsumerRiskReport
     */
    'spend_limit': number;
    /**
     * The total current spend in the current timeframe, in cents, without factoring in pending payments.
     * @type {number}
     * @memberof ConsumerRiskReport
     */
    'current_spend': number;
    /**
     * The total unpaid amount, in cents, from all timeframes.
     * @type {number}
     * @memberof ConsumerRiskReport
     */
    'pending_payments_amount': number;
    /**
     * The ISO-4217 currency code of the transaction
     * @type {string}
     * @memberof ConsumerRiskReport
     */
    'iso_currency_code': string;
    /**
     * The datetime of when the consumer risk report was most recently updated, in ISO-8601 format.
     * @type {string}
     * @memberof ConsumerRiskReport
     */
    'last_updated': string;
    /**
     *
     * @type {FinanceScore}
     * @memberof ConsumerRiskReport
     */
    'finance_score': FinanceScore;
    /**
     * Predicted balance for the timeframe.
     * @type {number}
     * @memberof ConsumerRiskReport
     */
    'predicted_balance': number;
}
/**
 *
 * @export
 * @interface ConsumerRiskReportCustomization
 */
export interface ConsumerRiskReportCustomization {
    /**
     *
     * @type {string}
     * @memberof ConsumerRiskReportCustomization
     */
    'id': string;
    /**
     *
     * @type {ConsumerRiskReportTimeFrame}
     * @memberof ConsumerRiskReportCustomization
     */
    'timeframe': ConsumerRiskReportTimeFrame;
    /**
     * The minimum allowed limit, in cents.
     * @type {number}
     * @memberof ConsumerRiskReportCustomization
     */
    'min_limit': number;
    /**
     * The maximum allowed limit, in cents.
     * @type {number}
     * @memberof ConsumerRiskReportCustomization
     */
    'max_limit': number;
    /**
     * This parameter indicates the risk tolerance associated with spend limits. A high risk tolerance allow for higher limits, increasing both potential gains and losses. A Lower risk tolerance enforces strict limits, reducing the potential for loss but also limiting transaction volume for reliable users.
     * @type {number}
     * @memberof ConsumerRiskReportCustomization
     */
    'risk_tolerance'?: number;
}
/**
 * The timeframe to base the consumer risk report on.
 * @export
 * @enum {string}
 */
export declare const ConsumerRiskReportTimeFrame: {
    readonly Daily: "daily";
    readonly Weekly: "weekly";
    readonly Monthly: "monthly";
};
export type ConsumerRiskReportTimeFrame = typeof ConsumerRiskReportTimeFrame[keyof typeof ConsumerRiskReportTimeFrame];
/**
 *
 * @export
 * @enum {string}
 */
export declare const CountryCode: {
    readonly Ae: "AE";
    readonly Am: "AM";
    readonly Ar: "AR";
    readonly At: "AT";
    readonly Au: "AU";
    readonly Bd: "BD";
    readonly Be: "BE";
    readonly Bh: "BH";
    readonly Bm: "BM";
    readonly Bn: "BN";
    readonly Br: "BR";
    readonly Bw: "BW";
    readonly Ca: "CA";
    readonly Ch: "CH";
    readonly Ci: "CI";
    readonly Cl: "CL";
    readonly Cm: "CM";
    readonly Cn: "CN";
    readonly Co: "CO";
    readonly Cz: "CZ";
    readonly De: "DE";
    readonly Dz: "DZ";
    readonly Eg: "EG";
    readonly Es: "ES";
    readonly Fi: "FI";
    readonly Fk: "FK";
    readonly Fr: "FR";
    readonly Gb: "GB";
    readonly Gg: "GG";
    readonly Gh: "GH";
    readonly Gm: "GM";
    readonly Gr: "GR";
    readonly Hk: "HK";
    readonly Id: "ID";
    readonly Ie: "IE";
    readonly Il: "IL";
    readonly Im: "IM";
    readonly In: "IN";
    readonly It: "IT";
    readonly Je: "JE";
    readonly Jo: "JO";
    readonly Jp: "JP";
    readonly Ke: "KE";
    readonly Kh: "KH";
    readonly Kr: "KR";
    readonly Kw: "KW";
    readonly La: "LA";
    readonly Lb: "LB";
    readonly Lk: "LK";
    readonly Lt: "LT";
    readonly Lu: "LU";
    readonly Mc: "MC";
    readonly Mo: "MO";
    readonly Mt: "MT";
    readonly Mu: "MU";
    readonly Mv: "MV";
    readonly Mx: "MX";
    readonly My: "MY";
    readonly Ng: "NG";
    readonly Nl: "NL";
    readonly Np: "NP";
    readonly Nz: "NZ";
    readonly Om: "OM";
    readonly Pe: "PE";
    readonly Ph: "PH";
    readonly Pk: "PK";
    readonly Pl: "PL";
    readonly Pt: "PT";
    readonly Qa: "QA";
    readonly Ru: "RU";
    readonly Sa: "SA";
    readonly Se: "SE";
    readonly Sg: "SG";
    readonly Sl: "SL";
    readonly Th: "TH";
    readonly Tr: "TR";
    readonly Tw: "TW";
    readonly Tz: "TZ";
    readonly Ug: "UG";
    readonly Us: "US";
    readonly Uy: "UY";
    readonly Vn: "VN";
    readonly Za: "ZA";
    readonly Zm: "ZM";
    readonly Zw: "ZW";
};
export type CountryCode = typeof CountryCode[keyof typeof CountryCode];
/**
 *
 * @export
 * @interface CreateAssetReportRequest
 */
export interface CreateAssetReportRequest {
    /**
     * Access fuse token corresponding to the financial account to be create the Asset Report for.
     * @type {string}
     * @memberof CreateAssetReportRequest
     */
    'access_token': string;
    /**
     * The maximum integer number of days of history to include in the Asset Report
     * @type {number}
     * @memberof CreateAssetReportRequest
     */
    'days_requested': number;
}
/**
 *
 * @export
 * @interface CreateAssetReportResponse
 */
export interface CreateAssetReportResponse {
    /**
     * A token that can be provided to endpoints such as /asset_report to fetch an asset report.
     * @type {string}
     * @memberof CreateAssetReportResponse
     */
    'asset_report_token'?: string;
    /**
     * A unique ID identifying an Asset Report.
     * @type {string}
     * @memberof CreateAssetReportResponse
     */
    'asset_report_id'?: string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof CreateAssetReportResponse
     */
    'request_id'?: string;
}
/**
 *
 * @export
 * @interface CreateConsumerRiskReportCustomizationRequest
 */
export interface CreateConsumerRiskReportCustomizationRequest {
    /**
     *
     * @type {ConsumerRiskReportTimeFrame}
     * @memberof CreateConsumerRiskReportCustomizationRequest
     */
    'timeframe': ConsumerRiskReportTimeFrame;
    /**
     * The minimum allowed limit, in cents.
     * @type {number}
     * @memberof CreateConsumerRiskReportCustomizationRequest
     */
    'min_limit': number;
    /**
     * The maximum allowed limit, in cents.
     * @type {number}
     * @memberof CreateConsumerRiskReportCustomizationRequest
     */
    'max_limit': number;
    /**
     * This parameter indicates the risk tolerance associated with spend limits. A high risk tolerance allow for higher limits, increasing both potential gains and losses. A Lower risk tolerance enforces strict limits, reducing the potential for loss but also limiting transaction volume for reliable users.
     * @type {number}
     * @memberof CreateConsumerRiskReportCustomizationRequest
     */
    'risk_tolerance': number;
}
/**
 *
 * @export
 * @interface CreateConsumerRiskReportCustomizationResponse
 */
export interface CreateConsumerRiskReportCustomizationResponse {
    /**
     * The id of the created customization.
     * @type {string}
     * @memberof CreateConsumerRiskReportCustomizationResponse
     */
    'id': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof CreateConsumerRiskReportCustomizationResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface CreateConsumerRiskReportRequest
 */
export interface CreateConsumerRiskReportRequest {
    /**
     * A unique ID representing the bank account that this risk report is calculated for. Typically this will be a bank connection account ID from your application. It is currently used as a means of connecting events to the consumer risk report.
     * @type {string}
     * @memberof CreateConsumerRiskReportRequest
     */
    'account_id': string;
    /**
     * The ISO-4217 currency code of the transaction
     * @type {string}
     * @memberof CreateConsumerRiskReportRequest
     */
    'iso_currency_code': string;
    /**
     * The name of the end user associated with this consumer risk report.
     * @type {string}
     * @memberof CreateConsumerRiskReportRequest
     */
    'end_user_name'?: string;
    /**
     * This is used to determine the timeframe and other metadata for the consumer risk report.
     * @type {string}
     * @memberof CreateConsumerRiskReportRequest
     */
    'customization_id': string;
}
/**
 *
 * @export
 * @interface CreateConsumerRiskReportResponse
 */
export interface CreateConsumerRiskReportResponse {
    /**
     *
     * @type {string}
     * @memberof CreateConsumerRiskReportResponse
     */
    'id': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof CreateConsumerRiskReportResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface CreateEntityRequest
 */
export interface CreateEntityRequest {
    /**
     * Id of the entity
     * @type {string}
     * @memberof CreateEntityRequest
     */
    'id'?: string;
    /**
     * Email of the entity
     * @type {string}
     * @memberof CreateEntityRequest
     */
    'email'?: string;
    /**
     * These will force the user to connect through all of these aggregators
     * @type {Array<Aggregator>}
     * @memberof CreateEntityRequest
     */
    'aggregators'?: Array<Aggregator>;
    /**
     *
     * @type {Array<string>}
     * @memberof CreateEntityRequest
     */
    'institution_ids'?: Array<string>;
}
/**
 *
 * @export
 * @interface CreateEntityResponse
 */
export interface CreateEntityResponse {
    /**
     * Id of the entity
     * @type {string}
     * @memberof CreateEntityResponse
     */
    'id'?: string;
    /**
     * Email of the entity
     * @type {string}
     * @memberof CreateEntityResponse
     */
    'email'?: string;
    /**
     * These will force the user to connect through all of these aggregators
     * @type {Array<Aggregator>}
     * @memberof CreateEntityResponse
     */
    'aggregators'?: Array<Aggregator>;
    /**
     *
     * @type {Array<string>}
     * @memberof CreateEntityResponse
     */
    'institution_ids'?: Array<string>;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof CreateEntityResponse
     */
    'request_id'?: string;
}
/**
 *
 * @export
 * @interface CreateLinkTokenRequest
 */
export interface CreateLinkTokenRequest {
    /**
     * An id that is unique for an institution.
     * @type {string}
     * @memberof CreateLinkTokenRequest
     */
    'institution_id': string;
    /**
     *
     * @type {Entity}
     * @memberof CreateLinkTokenRequest
     */
    'entity': Entity;
    /**
     * The name of your application. This is what will be displayed to users.
     * @type {string}
     * @memberof CreateLinkTokenRequest
     */
    'client_name': string;
    /**
     * The session client secret created from the \'Create session client secret\' endpoint
     * @type {string}
     * @memberof CreateLinkTokenRequest
     */
    'session_client_secret': string;
    /**
     * This field allows you to set a unique webhook URL for each individual entity. By specifying an entity-specific webhook URL, you can receive and process data events for each entity separately. If this field is left empty, the organization-wide webhook URL set in the sandbox/production environment will be used as the default for all entities.
     * @type {string}
     * @memberof CreateLinkTokenRequest
     */
    'webhook_url'?: string;
    /**
     *
     * @type {CreateLinkTokenRequestMx}
     * @memberof CreateLinkTokenRequest
     */
    'mx'?: CreateLinkTokenRequestMx;
    /**
     *
     * @type {CreateLinkTokenRequestPlaid}
     * @memberof CreateLinkTokenRequest
     */
    'plaid'?: CreateLinkTokenRequestPlaid;
    /**
     *
     * @type {CreateLinkTokenRequestTeller}
     * @memberof CreateLinkTokenRequest
     */
    'teller'?: CreateLinkTokenRequestTeller;
    /**
     *
     * @type {CreateLinkTokenRequestSnaptrade}
     * @memberof CreateLinkTokenRequest
     */
    'snaptrade'?: CreateLinkTokenRequestSnaptrade;
}
/**
 * An object specifying information about the MX configuration to use for deciding which MX supported financial institutions to display.
 * @export
 * @interface CreateLinkTokenRequestMx
 */
export interface CreateLinkTokenRequestMx {
    /**
     * Follows the same schema as MX\'s request a connect url(https://docs.mx.com/api#connect_request_a_url) schema.
     * @type {object}
     * @memberof CreateLinkTokenRequestMx
     */
    'config'?: object;
}
/**
 * An object specifying information about the Plaid configuration to use when creating a link token.
 * @export
 * @interface CreateLinkTokenRequestPlaid
 */
export interface CreateLinkTokenRequestPlaid {
    /**
     * Follows the same schema as Plaid\'s Link Token Create Schema(https://plaid.com/docs/api/tokens/#linktokencreate). \'products\', \'client_id\', \'secret\', \'client_user_id\', \'client_name\', \'webhook\', \'institution_data\' and \'country_codes\' (only US and Canada is supported right now) will be set by Fuse and override any values you set.
     * @type {object}
     * @memberof CreateLinkTokenRequestPlaid
     */
    'config'?: object;
}
/**
 * An object specifying information about the SnapTrade configuration to use when creating a link token.
 * @export
 * @interface CreateLinkTokenRequestSnaptrade
 */
export interface CreateLinkTokenRequestSnaptrade {
    /**
     *
     * @type {CreateLinkTokenRequestSnaptradeConfig}
     * @memberof CreateLinkTokenRequestSnaptrade
     */
    'config'?: CreateLinkTokenRequestSnaptradeConfig;
}
/**
 *
 * @export
 * @interface CreateLinkTokenRequestSnaptradeConfig
 */
export interface CreateLinkTokenRequestSnaptradeConfig {
    /**
     * SnapTrade connection type. Defaults to \'read\'
     * @type {string}
     * @memberof CreateLinkTokenRequestSnaptradeConfig
     */
    'connectionType'?: CreateLinkTokenRequestSnaptradeConfigConnectionTypeEnum;
}
export declare const CreateLinkTokenRequestSnaptradeConfigConnectionTypeEnum: {
    readonly Read: "read";
    readonly Trade: "trade";
};
export type CreateLinkTokenRequestSnaptradeConfigConnectionTypeEnum = typeof CreateLinkTokenRequestSnaptradeConfigConnectionTypeEnum[keyof typeof CreateLinkTokenRequestSnaptradeConfigConnectionTypeEnum];
/**
 * An object specifying information about the Teller configuration to use when creating a link token.
 * @export
 * @interface CreateLinkTokenRequestTeller
 */
export interface CreateLinkTokenRequestTeller {
    /**
     *
     * @type {CreateLinkTokenRequestTellerConfig}
     * @memberof CreateLinkTokenRequestTeller
     */
    'config'?: CreateLinkTokenRequestTellerConfig;
}
/**
 *
 * @export
 * @interface CreateLinkTokenRequestTellerConfig
 */
export interface CreateLinkTokenRequestTellerConfig {
    /**
     * The mode of account selection: - \'disabled\': automatically connect all the supported financial accounts associated with this user\'s account at the institution (default). - \'single\': the user will see a list of supported financial accounts and will need to select one to connect - \'multiple\': the user will see a list of supported financial accounts and will need to select one or more to connect
     * @type {string}
     * @memberof CreateLinkTokenRequestTellerConfig
     */
    'selectAccount'?: CreateLinkTokenRequestTellerConfigSelectAccountEnum;
    /**
     *
     * @type {CreateLinkTokenRequestTellerConfigAccountFilter}
     * @memberof CreateLinkTokenRequestTellerConfig
     */
    'accountFilter'?: CreateLinkTokenRequestTellerConfigAccountFilter;
}
export declare const CreateLinkTokenRequestTellerConfigSelectAccountEnum: {
    readonly Disabled: "disabled";
    readonly Single: "single";
    readonly Multiple: "multiple";
};
export type CreateLinkTokenRequestTellerConfigSelectAccountEnum = typeof CreateLinkTokenRequestTellerConfigSelectAccountEnum[keyof typeof CreateLinkTokenRequestTellerConfigSelectAccountEnum];
/**
 * Filter the types of account returned by Teller when enrolling a customer
 * @export
 * @interface CreateLinkTokenRequestTellerConfigAccountFilter
 */
export interface CreateLinkTokenRequestTellerConfigAccountFilter {
    /**
     *
     * @type {CreateLinkTokenRequestTellerConfigAccountFilterDepository}
     * @memberof CreateLinkTokenRequestTellerConfigAccountFilter
     */
    'depository'?: CreateLinkTokenRequestTellerConfigAccountFilterDepository;
    /**
     *
     * @type {CreateLinkTokenRequestTellerConfigAccountFilterCredit}
     * @memberof CreateLinkTokenRequestTellerConfigAccountFilter
     */
    'credit'?: CreateLinkTokenRequestTellerConfigAccountFilterCredit;
}
/**
 * @type CreateLinkTokenRequestTellerConfigAccountFilterCredit
 * @export
 */
export type CreateLinkTokenRequestTellerConfigAccountFilterCredit = CreateLinkTokenRequestTellerConfigAccountFilterCreditOneOf | string;
/**
 *
 * @export
 * @interface CreateLinkTokenRequestTellerConfigAccountFilterCreditOneOf
 */
export interface CreateLinkTokenRequestTellerConfigAccountFilterCreditOneOf {
    /**
     *
     * @type {Array<string>}
     * @memberof CreateLinkTokenRequestTellerConfigAccountFilterCreditOneOf
     */
    'subtypes'?: Array<CreateLinkTokenRequestTellerConfigAccountFilterCreditOneOfSubtypesEnum>;
}
export declare const CreateLinkTokenRequestTellerConfigAccountFilterCreditOneOfSubtypesEnum: {
    readonly CreditCard: "credit_card";
};
export type CreateLinkTokenRequestTellerConfigAccountFilterCreditOneOfSubtypesEnum = typeof CreateLinkTokenRequestTellerConfigAccountFilterCreditOneOfSubtypesEnum[keyof typeof CreateLinkTokenRequestTellerConfigAccountFilterCreditOneOfSubtypesEnum];
/**
 * @type CreateLinkTokenRequestTellerConfigAccountFilterDepository
 * @export
 */
export type CreateLinkTokenRequestTellerConfigAccountFilterDepository = CreateLinkTokenRequestTellerConfigAccountFilterDepositoryOneOf | string;
/**
 *
 * @export
 * @interface CreateLinkTokenRequestTellerConfigAccountFilterDepositoryOneOf
 */
export interface CreateLinkTokenRequestTellerConfigAccountFilterDepositoryOneOf {
    /**
     *
     * @type {Array<string>}
     * @memberof CreateLinkTokenRequestTellerConfigAccountFilterDepositoryOneOf
     */
    'subtypes'?: Array<CreateLinkTokenRequestTellerConfigAccountFilterDepositoryOneOfSubtypesEnum>;
}
export declare const CreateLinkTokenRequestTellerConfigAccountFilterDepositoryOneOfSubtypesEnum: {
    readonly Checking: "checking";
    readonly Savings: "savings";
};
export type CreateLinkTokenRequestTellerConfigAccountFilterDepositoryOneOfSubtypesEnum = typeof CreateLinkTokenRequestTellerConfigAccountFilterDepositoryOneOfSubtypesEnum[keyof typeof CreateLinkTokenRequestTellerConfigAccountFilterDepositoryOneOfSubtypesEnum];
/**
 *
 * @export
 * @interface CreateLinkTokenResponse
 */
export interface CreateLinkTokenResponse {
    /**
     * Token needed by the frontend sdk to initiate the connection
     * @type {string}
     * @memberof CreateLinkTokenResponse
     */
    'link_token': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof CreateLinkTokenResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface CreateSessionRequest
 */
export interface CreateSessionRequest {
    /**
     *
     * @type {Array<Aggregator>}
     * @memberof CreateSessionRequest
     */
    'supported_financial_institution_aggregators': Array<Aggregator>;
    /**
     * List of products that you would like the institutions to support
     * @type {Array<Product>}
     * @memberof CreateSessionRequest
     */
    'products': Array<Product>;
    /**
     * List of country codes that you would like the institutions to support
     * @type {Array<CountryCode>}
     * @memberof CreateSessionRequest
     */
    'country_codes'?: Array<CountryCode>;
    /**
     *
     * @type {Entity}
     * @memberof CreateSessionRequest
     */
    'entity': Entity;
    /**
     * The fuse access token for an existing financial connection. This will perform the process to reconnect an existing disconnected account.
     * @type {string}
     * @memberof CreateSessionRequest
     */
    'access_token'?: string;
    /**
     * Set to false for web SDKs (e.g., React), and true for mobile SDKs (e.g., React Native, Flutter, iOS, Android).
     * @type {boolean}
     * @memberof CreateSessionRequest
     */
    'is_web_view'?: boolean;
}
/**
 *
 * @export
 * @interface CreateSessionResponse
 */
export interface CreateSessionResponse {
    /**
     * 4 hours from the point of creation
     * @type {string}
     * @memberof CreateSessionResponse
     */
    'expiration': string;
    /**
     * Token needed by the frontend sdk to start the process
     * @type {string}
     * @memberof CreateSessionResponse
     */
    'client_secret': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof CreateSessionResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface Currency
 */
export interface Currency {
    /**
     * The ISO-4217 currency code
     * @type {string}
     * @memberof Currency
     */
    'code': string;
    /**
     * The name of the currency
     * @type {string}
     * @memberof Currency
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface DeleteConsumerRiskReportResponse
 */
export interface DeleteConsumerRiskReportResponse {
    /**
     *
     * @type {string}
     * @memberof DeleteConsumerRiskReportResponse
     */
    'id': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof DeleteConsumerRiskReportResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface DeleteFinancialConnectionResponse
 */
export interface DeleteFinancialConnectionResponse {
    /**
     * Id of the deleted financial connection
     * @type {string}
     * @memberof DeleteFinancialConnectionResponse
     */
    'financial_connection_id': string;
    /**
     * Access token of the deleted financial connection
     * @type {string}
     * @memberof DeleteFinancialConnectionResponse
     */
    'access_token': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof DeleteFinancialConnectionResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface EnrichTransactionsRequest
 */
export interface EnrichTransactionsRequest {
    /**
     *
     * @type {Array<TransactionToEnrich>}
     * @memberof EnrichTransactionsRequest
     */
    'transactions': Array<TransactionToEnrich>;
}
/**
 *
 * @export
 * @interface EnrichTransactionsResponse
 */
export interface EnrichTransactionsResponse {
    /**
     * The enriched transactions.
     * @type {Array<EnrichedTransaction>}
     * @memberof EnrichTransactionsResponse
     */
    'enriched_transactions'?: Array<EnrichedTransaction>;
}
/**
 *
 * @export
 * @interface EnrichedTransaction
 */
export interface EnrichedTransaction {
    /**
     * A original ID for the transaction that to help you tie data back to your systems.
     * @type {string}
     * @memberof EnrichedTransaction
     */
    'id': string;
    /**
     * A Fuse defined, unique ID for the merchant associated with this transaction.
     * @type {string}
     * @memberof EnrichedTransaction
     */
    'merchant_id'?: string;
    /**
     * The name of the merchant.
     * @type {string}
     * @memberof EnrichedTransaction
     */
    'merchant_name'?: string;
    /**
     *
     * @type {MerchantLogo}
     * @memberof EnrichedTransaction
     */
    'logo'?: MerchantLogo;
    /**
     * Hierarchical transaction categories: Each element narrows down from parent to nested sub-categories. Example: [\'personnel\', \'employee\', \'payroll\'].
     * @type {Array<string>}
     * @memberof EnrichedTransaction
     */
    'categories'?: Array<string>;
}
/**
 *
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     * Unique identifier for the user or business account that is connecting to an institution. Use this id when calling the GET /entities/${entity_id} endpoint.
     * @type {string}
     * @memberof Entity
     */
    'id': string;
    /**
     * Name for the user or business account. Required for EU connections.
     * @type {string}
     * @memberof Entity
     */
    'name'?: string;
    /**
     * Email address associated with the user or business account. One of email/phone is required for EU connections.
     * @type {string}
     * @memberof Entity
     */
    'email'?: string;
    /**
     * Phone number associated with the user or business account. One of email/phone is required for EU connections.
     * @type {string}
     * @memberof Entity
     */
    'phone'?: string;
}
/**
 *
 * @export
 * @interface EvalConsumerRiskReportRequest
 */
export interface EvalConsumerRiskReportRequest {
    /**
     * The size of the window for training
     * @type {number}
     * @memberof EvalConsumerRiskReportRequest
     */
    'window_size': number;
    /**
     *
     * @type {ConsumerRiskReportTimeFrame}
     * @memberof EvalConsumerRiskReportRequest
     */
    'time_frame': ConsumerRiskReportTimeFrame;
    /**
     *
     * @type {Array<EvalConsumerRiskReportRequestEventsInner>}
     * @memberof EvalConsumerRiskReportRequest
     */
    'events': Array<EvalConsumerRiskReportRequestEventsInner>;
}
/**
 *
 * @export
 * @interface EvalConsumerRiskReportRequestEventsInner
 */
export interface EvalConsumerRiskReportRequestEventsInner {
    /**
     * The id of the account that event belongs to
     * @type {string}
     * @memberof EvalConsumerRiskReportRequestEventsInner
     */
    'account_id': string;
    /**
     *
     * @type {AddAccountEventsRequestEventsInner}
     * @memberof EvalConsumerRiskReportRequestEventsInner
     */
    'event': AddAccountEventsRequestEventsInner;
}
/**
 *
 * @export
 * @interface EvalConsumerRiskReportResponse
 */
export interface EvalConsumerRiskReportResponse {
    /**
     *
     * @type {number}
     * @memberof EvalConsumerRiskReportResponse
     */
    'mean_granted_above_failed_payments'?: number;
    /**
     *
     * @type {number}
     * @memberof EvalConsumerRiskReportResponse
     */
    'mean_granted_below_failed_payments'?: number;
    /**
     *
     * @type {number}
     * @memberof EvalConsumerRiskReportResponse
     */
    'mean_predicted_limits'?: number;
    /**
     *
     * @type {number}
     * @memberof EvalConsumerRiskReportResponse
     */
    'mean_successful_payments'?: number;
}
/**
 *
 * @export
 * @interface ExchangeFinancialConnectionsPublicTokenRequest
 */
export interface ExchangeFinancialConnectionsPublicTokenRequest {
    /**
     * The public token created after a user connects with their financial institution
     * @type {string}
     * @memberof ExchangeFinancialConnectionsPublicTokenRequest
     */
    'public_token': string;
}
/**
 *
 * @export
 * @interface ExchangeFinancialConnectionsPublicTokenResponse
 */
export interface ExchangeFinancialConnectionsPublicTokenResponse {
    /**
     * Token used for querying data on the user, ie account details, balances etc. This does NOT expire and should be stored securely.
     * @type {string}
     * @memberof ExchangeFinancialConnectionsPublicTokenResponse
     */
    'access_token': string;
    /**
     * The id of the new financial connection. Every webhook will be sent with this id. Use this id when calling the GET /financial_connection/${financial_connection_id} endpoint.
     * @type {string}
     * @memberof ExchangeFinancialConnectionsPublicTokenResponse
     */
    'financial_connection_id': string;
    /**
     *
     * @type {FinancialInstitution}
     * @memberof ExchangeFinancialConnectionsPublicTokenResponse
     */
    'institution'?: FinancialInstitution;
    /**
     *
     * @type {Aggregator}
     * @memberof ExchangeFinancialConnectionsPublicTokenResponse
     */
    'aggregator': Aggregator;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof ExchangeFinancialConnectionsPublicTokenResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface ExternalTransactionEvent
 */
export interface ExternalTransactionEvent {
    /**
     * ID of the transaction
     * @type {string}
     * @memberof ExternalTransactionEvent
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ExternalTransactionEvent
     */
    'event_type': ExternalTransactionEventEventTypeEnum;
    /**
     *
     * @type {ExternalTransactionEventStatus}
     * @memberof ExternalTransactionEvent
     */
    'status': ExternalTransactionEventStatus;
    /**
     * Amount in cents associated with the transaction. Use positive values to represent money going out and negative to represent money going in.
     * @type {number}
     * @memberof ExternalTransactionEvent
     */
    'amount': number;
    /**
     *
     * @type {string}
     * @memberof ExternalTransactionEvent
     */
    'country_code'?: string;
    /**
     * The ISO-4217 currency code.
     * @type {string}
     * @memberof ExternalTransactionEvent
     */
    'iso_currency_code': string;
    /**
     *
     * @type {TransactionEventType}
     * @memberof ExternalTransactionEvent
     */
    'transaction_type'?: TransactionEventType;
    /**
     *
     * @type {string}
     * @memberof ExternalTransactionEvent
     */
    'transaction_description'?: string;
    /**
     *
     * @type {string}
     * @memberof ExternalTransactionEvent
     */
    'transaction_owner_type'?: ExternalTransactionEventTransactionOwnerTypeEnum;
    /**
     *
     * @type {string}
     * @memberof ExternalTransactionEvent
     */
    'merchant_name': string;
    /**
     * Datetime of the transaction In ISO-8601 format
     * @type {string}
     * @memberof ExternalTransactionEvent
     */
    'timestamp': string;
    /**
     * The running balance of the account after the transaction has occurred, in cents
     * @type {number}
     * @memberof ExternalTransactionEvent
     */
    'balance'?: number;
}
export declare const ExternalTransactionEventEventTypeEnum: {
    readonly ExternalTransaction: "external_transaction";
};
export type ExternalTransactionEventEventTypeEnum = typeof ExternalTransactionEventEventTypeEnum[keyof typeof ExternalTransactionEventEventTypeEnum];
export declare const ExternalTransactionEventTransactionOwnerTypeEnum: {
    readonly Consumer: "consumer";
    readonly Business: "business";
};
export type ExternalTransactionEventTransactionOwnerTypeEnum = typeof ExternalTransactionEventTransactionOwnerTypeEnum[keyof typeof ExternalTransactionEventTransactionOwnerTypeEnum];
/**
 *
 * @export
 * @enum {string}
 */
export declare const ExternalTransactionEventStatus: {
    readonly Pending: "pending";
    readonly Posted: "posted";
};
export type ExternalTransactionEventStatus = typeof ExternalTransactionEventStatus[keyof typeof ExternalTransactionEventStatus];
/**
 *
 * @export
 * @interface FinanceScore
 */
export interface FinanceScore {
    /**
     * The likelihood of a credit default. A higher score implies lower risk. The finance score and all finance score metrics are values between 0 and 1. This value is calculated by the weighted sum of the metrics below.
     * @type {number}
     * @memberof FinanceScore
     */
    'value': number;
    /**
     * This quantifies a user\'s monthly savings habits. A lower score represents minimal savings, while a higher score indicates a user who consistently sets aside a substantial portion of their income.
     * @type {number}
     * @memberof FinanceScore
     */
    'savings_score': number;
    /**
     * This assesses the consistency of a user\'s monthly spending. A lower score indicates variable monthly expenditure, while a higher score represents consistent spending habits.
     * @type {number}
     * @memberof FinanceScore
     */
    'expense_stability_score': number;
    /**
     * This measures the regularity of a user\'s financial activity over a period of time. A lower score suggests limited activity, while a higher score is indicative of regular daily transactions over a long period of time.
     * @type {number}
     * @memberof FinanceScore
     */
    'activity_age_score': number;
    /**
     * This evaluates the stability of a user\'s income. A lower score suggests inconsistent or low income, while a higher score represents high, consistent income.
     * @type {number}
     * @memberof FinanceScore
     */
    'income_score': number;
    /**
     * This evaluates a user\'s loan repayment behaviour. A lower score is assigned to those without loan payments, while a higher score denotes consistent loan payments, such as a mortgage.
     * @type {number}
     * @memberof FinanceScore
     */
    'loan_payments_score': number;
    /**
     * This quantifies a user\'s ability to repay debts. A lower score corresponds to missed payments, while a higher score signifies consistent debt repayment.
     * @type {number}
     * @memberof FinanceScore
     */
    'repayments_score': number;
}
/**
 *
 * @export
 * @interface FinancialConnectionData
 */
export interface FinancialConnectionData {
    /**
     * The financial connection id.
     * @type {string}
     * @memberof FinancialConnectionData
     */
    'id': string;
    /**
     * The Fuse Institution ID associated with the financial connection
     * @type {string}
     * @memberof FinancialConnectionData
     */
    'institution_id'?: string | null;
}
/**
 *
 * @export
 * @interface FinancialConnectionDetails
 */
export interface FinancialConnectionDetails {
    /**
     * The fuse financial connection id.
     * @type {string}
     * @memberof FinancialConnectionDetails
     */
    'id': string;
    /**
     * Connection status of the current financial connection
     * @type {string}
     * @memberof FinancialConnectionDetails
     */
    'connection_status': FinancialConnectionDetailsConnectionStatusEnum;
    /**
     * Last time the connection status was updated in ISO-8601 format.
     * @type {string}
     * @memberof FinancialConnectionDetails
     */
    'connection_status_updated_at': string;
    /**
     * Whether this is an oauth connection
     * @type {boolean}
     * @memberof FinancialConnectionDetails
     */
    'is_oauth': boolean;
    /**
     *
     * @type {Aggregator}
     * @memberof FinancialConnectionDetails
     */
    'aggregator': Aggregator;
    /**
     *
     * @type {FinancialConnectionDetailsPlaid}
     * @memberof FinancialConnectionDetails
     */
    'plaid'?: FinancialConnectionDetailsPlaid;
    /**
     *
     * @type {FinancialConnectionDetailsTeller}
     * @memberof FinancialConnectionDetails
     */
    'teller'?: FinancialConnectionDetailsTeller;
    /**
     *
     * @type {FinancialConnectionDetailsMx}
     * @memberof FinancialConnectionDetails
     */
    'mx'?: FinancialConnectionDetailsMx;
    /**
     *
     * @type {FinancialConnectionDetailsSnaptrade}
     * @memberof FinancialConnectionDetails
     */
    'snaptrade'?: FinancialConnectionDetailsSnaptrade;
    /**
     *
     * @type {FinancialConnectionDetailsFlinks}
     * @memberof FinancialConnectionDetails
     */
    'flinks'?: FinancialConnectionDetailsFlinks;
    /**
     *
     * @type {FinancialConnectionDetailsMono}
     * @memberof FinancialConnectionDetails
     */
    'mono'?: FinancialConnectionDetailsMono;
    /**
     *
     * @type {FinancialConnectionDetailsTruelayer}
     * @memberof FinancialConnectionDetails
     */
    'truelayer'?: FinancialConnectionDetailsTruelayer;
    /**
     *
     * @type {FinancialConnectionDetailsFinverse}
     * @memberof FinancialConnectionDetails
     */
    'finverse'?: FinancialConnectionDetailsFinverse;
    /**
     *
     * @type {FinancialConnectionDetailsBasiq}
     * @memberof FinancialConnectionDetails
     */
    'basiq'?: FinancialConnectionDetailsBasiq;
    /**
     *
     * @type {FinancialConnectionDetailsBelvo}
     * @memberof FinancialConnectionDetails
     */
    'belvo'?: FinancialConnectionDetailsBelvo;
    /**
     *
     * @type {FinancialConnectionDetailsFinicity}
     * @memberof FinancialConnectionDetails
     */
    'finicity'?: FinancialConnectionDetailsFinicity;
}
export declare const FinancialConnectionDetailsConnectionStatusEnum: {
    readonly Connected: "connected";
    readonly Disconnected: "disconnected";
    readonly Finished: "finished";
};
export type FinancialConnectionDetailsConnectionStatusEnum = typeof FinancialConnectionDetailsConnectionStatusEnum[keyof typeof FinancialConnectionDetailsConnectionStatusEnum];
/**
 * Data needed to query data from Basiq
 * @export
 * @interface FinancialConnectionDetailsBasiq
 */
export interface FinancialConnectionDetailsBasiq {
    /**
     * The identifier of the user for Basiq.
     * @type {string}
     * @memberof FinancialConnectionDetailsBasiq
     */
    'user_id': string;
    /**
     * The identifier of the connection for Basiq.
     * @type {string}
     * @memberof FinancialConnectionDetailsBasiq
     */
    'connection_id': string;
}
/**
 * Data needed to query data from Belvo
 * @export
 * @interface FinancialConnectionDetailsBelvo
 */
export interface FinancialConnectionDetailsBelvo {
    /**
     * The identifier of the link for Belvo.
     * @type {string}
     * @memberof FinancialConnectionDetailsBelvo
     */
    'link_id': string;
    /**
     * The identifier of the institution for Belvo.
     * @type {string}
     * @memberof FinancialConnectionDetailsBelvo
     */
    'institution'?: string;
}
/**
 * Data needed to query data from Finicity.
 * @export
 * @interface FinancialConnectionDetailsFinicity
 */
export interface FinancialConnectionDetailsFinicity {
    /**
     * The identifier of the customer for Finicity.
     * @type {string}
     * @memberof FinancialConnectionDetailsFinicity
     */
    'customer_id': string;
    /**
     * The Finicity institution login id.
     * @type {string}
     * @memberof FinancialConnectionDetailsFinicity
     */
    'institution_login_id': string;
}
/**
 * Data needed to query data from Finverse
 * @export
 * @interface FinancialConnectionDetailsFinverse
 */
export interface FinancialConnectionDetailsFinverse {
    /**
     * Access token for Finverse
     * @type {string}
     * @memberof FinancialConnectionDetailsFinverse
     */
    'access_token': string;
    /**
     * Login Identity Id for Finverse
     * @type {string}
     * @memberof FinancialConnectionDetailsFinverse
     */
    'login_identity_id'?: string;
}
/**
 * Data needed to query data from Flinks
 * @export
 * @interface FinancialConnectionDetailsFlinks
 */
export interface FinancialConnectionDetailsFlinks {
    /**
     * Login Id for Flinks
     * @type {string}
     * @memberof FinancialConnectionDetailsFlinks
     */
    'login_id': string;
}
/**
 * Data needed to query data from Mono
 * @export
 * @interface FinancialConnectionDetailsMono
 */
export interface FinancialConnectionDetailsMono {
    /**
     * Account Id for Mono
     * @type {string}
     * @memberof FinancialConnectionDetailsMono
     */
    'account_id': string;
}
/**
 * Data needed to query data from MX
 * @export
 * @interface FinancialConnectionDetailsMx
 */
export interface FinancialConnectionDetailsMx {
    /**
     * User GUID for MX
     * @type {string}
     * @memberof FinancialConnectionDetailsMx
     */
    'user_guid': string;
    /**
     * Member GUID for MX
     * @type {string}
     * @memberof FinancialConnectionDetailsMx
     */
    'member_guid': string;
}
/**
 * Data needed to query data from Plaid
 * @export
 * @interface FinancialConnectionDetailsPlaid
 */
export interface FinancialConnectionDetailsPlaid {
    /**
     * Access token for Plaid
     * @type {string}
     * @memberof FinancialConnectionDetailsPlaid
     */
    'access_token': string;
    /**
     * ID of the item associated with the access token in Plaid
     * @type {string}
     * @memberof FinancialConnectionDetailsPlaid
     */
    'item_id': string;
}
/**
 * Data needed to query data from SnapTrade
 * @export
 * @interface FinancialConnectionDetailsSnaptrade
 */
export interface FinancialConnectionDetailsSnaptrade {
    /**
     * Brokerage Authorization Id for SnapTrade
     * @type {string}
     * @memberof FinancialConnectionDetailsSnaptrade
     */
    'brokerage_authorization_id': string;
    /**
     * User id for SnapTrade
     * @type {string}
     * @memberof FinancialConnectionDetailsSnaptrade
     */
    'user_id': string;
    /**
     * User secret for SnapTrade
     * @type {string}
     * @memberof FinancialConnectionDetailsSnaptrade
     */
    'user_secret': string;
}
/**
 * Data needed to query data from Teller
 * @export
 * @interface FinancialConnectionDetailsTeller
 */
export interface FinancialConnectionDetailsTeller {
    /**
     * Access token for Teller
     * @type {string}
     * @memberof FinancialConnectionDetailsTeller
     */
    'access_token': string;
    /**
     * Enrollment ID associated with the access token in Teller
     * @type {string}
     * @memberof FinancialConnectionDetailsTeller
     */
    'enrollment_id': string;
}
/**
 * Data needed to query data from TrueLayer
 * @export
 * @interface FinancialConnectionDetailsTruelayer
 */
export interface FinancialConnectionDetailsTruelayer {
    /**
     * Access token for TrueLayer
     * @type {string}
     * @memberof FinancialConnectionDetailsTruelayer
     */
    'access_token': string;
}
/**
 *
 * @export
 * @interface FinancialConnectionsAccount
 */
export interface FinancialConnectionsAccount {
    /**
     * Remote Id of the account, ie Plaid or Teller account id
     * @type {string}
     * @memberof FinancialConnectionsAccount
     */
    'remote_id': string;
    /**
     * The ISO-4217 currency code of the account.
     * @type {string}
     * @memberof FinancialConnectionsAccount
     */
    'currency': string;
    /**
     * Uniquely identifies this account across all accounts for a single financial connection. Used for reconnection deduplication. See more information here: https://letsfuse.readme.io/docs/duplicate-accounts
     * @type {string}
     * @memberof FinancialConnectionsAccount
     */
    'fingerprint': string;
    /**
     *
     * @type {FinancialConnectionsAccountInstitution}
     * @memberof FinancialConnectionsAccount
     */
    'institution'?: FinancialConnectionsAccountInstitution;
    /**
     * The partial account number.
     * @type {string}
     * @memberof FinancialConnectionsAccount
     */
    'mask'?: string;
    /**
     * The account\'s name, ie \'My Checking\'
     * @type {string}
     * @memberof FinancialConnectionsAccount
     */
    'name': string;
    /**
     *
     * @type {AccountType}
     * @memberof FinancialConnectionsAccount
     */
    'type': AccountType;
    /**
     *
     * @type {AccountSubtype}
     * @memberof FinancialConnectionsAccount
     */
    'subtype'?: AccountSubtype | null;
    /**
     *
     * @type {FinancialConnectionsAccountCachedBalance}
     * @memberof FinancialConnectionsAccount
     */
    'balance': FinancialConnectionsAccountCachedBalance;
    /**
     *
     * @type {any}
     * @memberof FinancialConnectionsAccount
     */
    'remote_data': any;
}
/**
 *
 * @export
 * @interface FinancialConnectionsAccountBalance
 */
export interface FinancialConnectionsAccountBalance {
    /**
     * Remote Account Id of the transaction, ie Plaid Account Id
     * @type {string}
     * @memberof FinancialConnectionsAccountBalance
     */
    'remote_account_id': string;
    /**
     * Amount in cents after factoring in pending balances. The format of this value is a double. For accounts with credit features, the available funds generally equal the credit limit. Some institutions may not provide an available balance calculation. If this is the case, Fuse will return a null value for the available balance. To ensure you have the most accurate information, we recommend obtaining the current balance by using \'balance.available || balance.current\'.
     * @type {number}
     * @memberof FinancialConnectionsAccountBalance
     */
    'available'?: number | null;
    /**
     * Amount in cents without factoring in pending balances. The format of this value is a double.
     * @type {number}
     * @memberof FinancialConnectionsAccountBalance
     */
    'current'?: number | null;
    /**
     * The ISO-4217 currency code of the balance.
     * @type {string}
     * @memberof FinancialConnectionsAccountBalance
     */
    'iso_currency_code'?: string | null;
    /**
     * The last time the account balance was updated, represented as an ISO 8601 timestamp (YYYY-MM-DDTHH:mm:ssZ). This value may not be available for some accounts.
     * @type {string}
     * @memberof FinancialConnectionsAccountBalance
     */
    'last_updated_date'?: string | null;
}
/**
 *
 * @export
 * @interface FinancialConnectionsAccountCachedBalance
 */
export interface FinancialConnectionsAccountCachedBalance {
    /**
     * The amount of funds available, in cents, to be withdrawn from the account, as determined by the financial institution. The format of this value is a double. Available balance may be cached and is not guaranteed to be up-to-date in realtime unless the value was returned by /financial_connections/balances. For accounts with credit features, the available funds generally equal the credit limit. Some institutions may not provide an available balance calculation. If this is the case, Fuse will return a null value for the available balance. To ensure you have the most accurate information, we recommend obtaining the current balance by using \'balance.available || balance.current\'.
     * @type {number}
     * @memberof FinancialConnectionsAccountCachedBalance
     */
    'available'?: number | null;
    /**
     * Amount without factoring in pending balances, in cents. The format of this value is a double.
     * @type {number}
     * @memberof FinancialConnectionsAccountCachedBalance
     */
    'current'?: number | null;
    /**
     * The ISO-4217 currency code of the balance.
     * @type {string}
     * @memberof FinancialConnectionsAccountCachedBalance
     */
    'iso_currency_code'?: string | null;
    /**
     * The date of the last update to the balance.
     * @type {string}
     * @memberof FinancialConnectionsAccountCachedBalance
     */
    'last_updated_date'?: string | null;
}
/**
 *
 * @export
 * @interface FinancialConnectionsAccountDetails
 */
export interface FinancialConnectionsAccountDetails {
    /**
     * Remote Id of the account, ie Plaid or Teller account id
     * @type {string}
     * @memberof FinancialConnectionsAccountDetails
     */
    'remote_id': string;
    /**
     *
     * @type {FinancialConnectionsAccountDetailsAch}
     * @memberof FinancialConnectionsAccountDetails
     */
    'ach'?: FinancialConnectionsAccountDetailsAch;
    /**
     *
     * @type {FinancialConnectionsAccountDetailsAccountNumber}
     * @memberof FinancialConnectionsAccountDetails
     */
    'account_number'?: FinancialConnectionsAccountDetailsAccountNumber;
    /**
     *
     * @type {any}
     * @memberof FinancialConnectionsAccountDetails
     */
    'remote_data': any;
}
/**
 *
 * @export
 * @interface FinancialConnectionsAccountDetailsAccountNumber
 */
export interface FinancialConnectionsAccountDetailsAccountNumber {
    /**
     * Unique identifier representing the account, typically referred to as the account number.
     * @type {string}
     * @memberof FinancialConnectionsAccountDetailsAccountNumber
     */
    'number': string;
    /**
     * A six-digit number used by banks in the United Kingdom and Ireland to identify the branch where the account is held.
     * @type {string}
     * @memberof FinancialConnectionsAccountDetailsAccountNumber
     */
    'sort_code'?: string;
    /**
     * International Bank Account Number (IBAN) is an internationally agreed system of identifying bank accounts across national borders to facilitate the communication and processing of cross border transactions.
     * @type {string}
     * @memberof FinancialConnectionsAccountDetailsAccountNumber
     */
    'iban'?: string;
    /**
     * SWIFT/BIC code is an international identifier used to distinctively recognize a particular bank during financial transactions, such as money transfers.
     * @type {string}
     * @memberof FinancialConnectionsAccountDetailsAccountNumber
     */
    'swift_bic'?: string;
    /**
     * Bank-State-Branch (BSB) code is a six-digit numerical code used to identify an individual branch of a financial institution in Australia.
     * @type {string}
     * @memberof FinancialConnectionsAccountDetailsAccountNumber
     */
    'bsb'?: string;
    /**
     * Bank Identifier Code (BIC) is an international standard identifier used by banks and financial institutions globally to carry out transactions.
     * @type {string}
     * @memberof FinancialConnectionsAccountDetailsAccountNumber
     */
    'bic'?: string;
}
/**
 *
 * @export
 * @interface FinancialConnectionsAccountDetailsAch
 */
export interface FinancialConnectionsAccountDetailsAch {
    /**
     * Account number
     * @type {string}
     * @memberof FinancialConnectionsAccountDetailsAch
     */
    'account'?: string;
    /**
     * Routing number
     * @type {string}
     * @memberof FinancialConnectionsAccountDetailsAch
     */
    'routing'?: string;
    /**
     * Wire routing number
     * @type {string}
     * @memberof FinancialConnectionsAccountDetailsAch
     */
    'wire_routing'?: string;
    /**
     * BACS routing number
     * @type {string}
     * @memberof FinancialConnectionsAccountDetailsAch
     */
    'bacs_routing'?: string;
}
/**
 *
 * @export
 * @interface FinancialConnectionsAccountInstitution
 */
export interface FinancialConnectionsAccountInstitution {
    /**
     *
     * @type {string}
     * @memberof FinancialConnectionsAccountInstitution
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface FinancialConnectionsAccountLiability
 */
export interface FinancialConnectionsAccountLiability {
    /**
     * Remote Id of the account, ie Plaid or Teller account id
     * @type {string}
     * @memberof FinancialConnectionsAccountLiability
     */
    'remote_id': string;
    /**
     * The ISO-4217 currency code of the account.
     * @type {string}
     * @memberof FinancialConnectionsAccountLiability
     */
    'currency': string;
    /**
     * Uniquely identifies this account across all accounts for a single financial connection. Used for reconnection deduplication. See more information here: https://letsfuse.readme.io/docs/duplicate-accounts
     * @type {string}
     * @memberof FinancialConnectionsAccountLiability
     */
    'fingerprint': string;
    /**
     *
     * @type {FinancialConnectionsAccountInstitution}
     * @memberof FinancialConnectionsAccountLiability
     */
    'institution'?: FinancialConnectionsAccountInstitution;
    /**
     * The partial account number.
     * @type {string}
     * @memberof FinancialConnectionsAccountLiability
     */
    'mask'?: string;
    /**
     * The account\'s name, ie \'My Checking\'
     * @type {string}
     * @memberof FinancialConnectionsAccountLiability
     */
    'name': string;
    /**
     *
     * @type {AccountType}
     * @memberof FinancialConnectionsAccountLiability
     */
    'type': AccountType;
    /**
     *
     * @type {AccountSubtype}
     * @memberof FinancialConnectionsAccountLiability
     */
    'subtype'?: AccountSubtype | null;
    /**
     *
     * @type {FinancialConnectionsAccountCachedBalance}
     * @memberof FinancialConnectionsAccountLiability
     */
    'balance': FinancialConnectionsAccountCachedBalance;
    /**
     *
     * @type {any}
     * @memberof FinancialConnectionsAccountLiability
     */
    'remote_data': any;
    /**
     * The various interest rates that apply to the account. If APR data is not available, this array will be empty.
     * @type {Array<FinancialConnectionsAccountLiabilityAllOfAprs>}
     * @memberof FinancialConnectionsAccountLiability
     */
    'aprs'?: Array<FinancialConnectionsAccountLiabilityAllOfAprs>;
    /**
     * The interest rate on the loan as a percentage.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiability
     */
    'interest_rate_percentage'?: number;
    /**
     * The original principal balance of the loan.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiability
     */
    'origination_principal_amount'?: number;
    /**
     * The due date for the next payment. The due date is null if a payment is not expected.
     * @type {string}
     * @memberof FinancialConnectionsAccountLiability
     */
    'next_payment_due_date'?: string;
    /**
     * The date of the last payment. Dates are returned in an ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof FinancialConnectionsAccountLiability
     */
    'last_payment_date'?: string;
    /**
     * The amount of the last payment.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiability
     */
    'last_payment_amount'?: number;
    /**
     * The minimum payment required for an account. This can apply to any debt account.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiability
     */
    'minimum_payment_amount'?: number;
}
/**
 *
 * @export
 * @interface FinancialConnectionsAccountLiabilityAllOf
 */
export interface FinancialConnectionsAccountLiabilityAllOf {
    /**
     * The various interest rates that apply to the account. If APR data is not available, this array will be empty.
     * @type {Array<FinancialConnectionsAccountLiabilityAllOfAprs>}
     * @memberof FinancialConnectionsAccountLiabilityAllOf
     */
    'aprs'?: Array<FinancialConnectionsAccountLiabilityAllOfAprs>;
    /**
     * The interest rate on the loan as a percentage.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiabilityAllOf
     */
    'interest_rate_percentage'?: number;
    /**
     * The original principal balance of the loan.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiabilityAllOf
     */
    'origination_principal_amount'?: number;
    /**
     * The due date for the next payment. The due date is null if a payment is not expected.
     * @type {string}
     * @memberof FinancialConnectionsAccountLiabilityAllOf
     */
    'next_payment_due_date'?: string;
    /**
     * The date of the last payment. Dates are returned in an ISO 8601 format (YYYY-MM-DD).
     * @type {string}
     * @memberof FinancialConnectionsAccountLiabilityAllOf
     */
    'last_payment_date'?: string;
    /**
     * The amount of the last payment.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiabilityAllOf
     */
    'last_payment_amount'?: number;
    /**
     * The minimum payment required for an account. This can apply to any debt account.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiabilityAllOf
     */
    'minimum_payment_amount'?: number;
}
/**
 *
 * @export
 * @interface FinancialConnectionsAccountLiabilityAllOfAprs
 */
export interface FinancialConnectionsAccountLiabilityAllOfAprs {
    /**
     * Annual Percentage Rate applied.
     * @type {number}
     * @memberof FinancialConnectionsAccountLiabilityAllOfAprs
     */
    'apr_percentage'?: number;
    /**
     * The type of balance to which the APR applies.
     * @type {string}
     * @memberof FinancialConnectionsAccountLiabilityAllOfAprs
     */
    'apr_type'?: string;
}
/**
 *
 * @export
 * @interface FinancialConnectionsHolding
 */
export interface FinancialConnectionsHolding {
    /**
     * The remote account ID associated with this holding.
     * @type {string}
     * @memberof FinancialConnectionsHolding
     */
    'remote_account_id': string;
    /**
     * The original total value of the holding, in cents, when it was purchased. The format of this value is a double.
     * @type {number}
     * @memberof FinancialConnectionsHolding
     */
    'cost_basis': number;
    /**
     * The current market value of the holding, in cents. The format of this value is a double.
     * @type {number}
     * @memberof FinancialConnectionsHolding
     */
    'value': number;
    /**
     * The number of units of the security held in this holding.
     * @type {number}
     * @memberof FinancialConnectionsHolding
     */
    'quantity': number;
    /**
     * The price of the security, in cents, as provided by the financial institution managing the holding. The format of this value is a double.
     * @type {number}
     * @memberof FinancialConnectionsHolding
     */
    'institution_price': number;
    /**
     *
     * @type {FinancialConnectionsInvestmentSecurity}
     * @memberof FinancialConnectionsHolding
     */
    'security': FinancialConnectionsInvestmentSecurity;
}
/**
 *
 * @export
 * @interface FinancialConnectionsInvestmentSecurity
 */
export interface FinancialConnectionsInvestmentSecurity {
    /**
     * Remote Id of the security, ie Plaid or Snaptrade security id
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'remote_id': string;
    /**
     * The trading symbol for publicly traded securities, or a short identifier if available.
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'symbol': string;
    /**
     * The International Securities Identification Number (ISIN) uniquely identifies the security.
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'isin'?: string;
    /**
     * The Stock Exchange Daily Official List (SEDOL) code uniquely identifies the security, primarily used in the United Kingdom and Ireland.
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'sedol'?: string;
    /**
     * The Committee on Uniform Securities Identification Procedures (CUSIP) number uniquely identifies the security, primarily used in the United States and Canada.
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'cusip'?: string;
    /**
     * The closing price of the security, in cents, at the end of the most recent trading day. The format of this value is a double.
     * @type {number}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'close_price'?: number;
    /**
     *
     * @type {Currency}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'currency': Currency;
    /**
     * A descriptive name for the security, suitable for display.
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'name'?: string;
    /**
     *
     * @type {FinancialConnectionsInvestmentSecurityType}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'type'?: FinancialConnectionsInvestmentSecurityType;
    /**
     *
     * @type {FinancialConnectionsInvestmentSecurityExchange}
     * @memberof FinancialConnectionsInvestmentSecurity
     */
    'exchange'?: FinancialConnectionsInvestmentSecurityExchange;
}
/**
 *
 * @export
 * @interface FinancialConnectionsInvestmentSecurityExchange
 */
export interface FinancialConnectionsInvestmentSecurityExchange {
    /**
     * The Market Identifier Code (MIC) associated with the specific financial market or exchange where the security is traded.
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurityExchange
     */
    'mic_code'?: string;
    /**
     * The suffix of the security\'s ticker symbol.
     * @type {string}
     * @memberof FinancialConnectionsInvestmentSecurityExchange
     */
    'suffix'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const FinancialConnectionsInvestmentSecurityType: {
    readonly Cash: "cash";
    readonly Cryptocurrency: "cryptocurrency";
    readonly Derivative: "derivative";
    readonly Equity: "equity";
    readonly Etf: "etf";
    readonly FixedIncome: "fixed_income";
    readonly Loan: "loan";
    readonly MutualFund: "mutual_fund";
    readonly Other: "other";
    readonly GlobalDepositaryReceipt: "global_depositary_receipt";
    readonly OpenEndedFund: "open_ended_fund";
    readonly Right: "right";
    readonly Temporary: "temporary";
    readonly Warrant: "warrant";
    readonly ClosedEndedFund: "closed_ended_fund";
    readonly CommonStock: "common_stock";
    readonly ExchangeTradedFund: "exchange_traded_fund";
    readonly Bond: "bond";
    readonly AmericanDepositaryReceipt: "american_depositary_receipt";
    readonly Unit: "unit";
    readonly StructuredProduct: "structured_product";
    readonly PreferredStock: "preferred_stock";
    readonly RealEstate: "real_estate";
    readonly Automobile: "automobile";
    readonly DelistedOrDefunctAsset: "delisted_or_defunct_asset";
    readonly Minus: "-";
};
export type FinancialConnectionsInvestmentSecurityType = typeof FinancialConnectionsInvestmentSecurityType[keyof typeof FinancialConnectionsInvestmentSecurityType];
/**
 *
 * @export
 * @interface FinancialConnectionsInvestmentTransaction
 */
export interface FinancialConnectionsInvestmentTransaction {
    /**
     * The remote ID of the Investment transaction
     * @type {string}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'remote_id': string;
    /**
     * Remote Account Id of the transaction, ie Plaid Account Id
     * @type {string}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'remote_account_id': string;
    /**
     * The name of the account associated with the investment transaction
     * @type {string}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'account_name'?: string;
    /**
     * The amount of the investment transaction, in cents. The format of this value is a double.
     * @type {number}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'amount': number;
    /**
     * A description of the investment transaction
     * @type {string}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'description': string;
    /**
     * The fees associated with the investment transaction, in cents. The format of this value is a double.
     * @type {number}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'fees': number;
    /**
     *
     * @type {Currency}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'currency': Currency;
    /**
     * The date and time of the investment transaction
     * @type {string}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'date': string;
    /**
     * The type of the investment transaction (e.g., \'buy\', \'sell\', \'dividend\')
     * @type {string}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'type': FinancialConnectionsInvestmentTransactionTypeEnum;
    /**
     *
     * @type {FinancialConnectionsInvestmentTransactionSubtype}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'subtype'?: FinancialConnectionsInvestmentTransactionSubtype;
    /**
     * The number of units of the security involved in this transaction
     * @type {number}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'quantity': number;
    /**
     * The price of the security involved in this transaction, in cents. The format of this value is a double.
     * @type {number}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'price': number;
    /**
     *
     * @type {FinancialConnectionsInvestmentSecurity}
     * @memberof FinancialConnectionsInvestmentTransaction
     */
    'security': FinancialConnectionsInvestmentSecurity;
}
export declare const FinancialConnectionsInvestmentTransactionTypeEnum: {
    readonly Cash: "cash";
    readonly Buy: "buy";
    readonly Sell: "sell";
    readonly Transfer: "transfer";
    readonly Fee: "fee";
    readonly Cancel: "cancel";
    readonly Minus: "-";
};
export type FinancialConnectionsInvestmentTransactionTypeEnum = typeof FinancialConnectionsInvestmentTransactionTypeEnum[keyof typeof FinancialConnectionsInvestmentTransactionTypeEnum];
/**
 *
 * @export
 * @enum {string}
 */
export declare const FinancialConnectionsInvestmentTransactionSubtype: {
    readonly AccountFee: "account_fee";
    readonly Adjustment: "adjustment";
    readonly Assignment: "assignment";
    readonly Buy: "buy";
    readonly BuyToCover: "buy_to_cover";
    readonly Contribution: "contribution";
    readonly Deposit: "deposit";
    readonly Distribution: "distribution";
    readonly Dividend: "dividend";
    readonly DividendReinvestment: "dividend_reinvestment";
    readonly Exercise: "exercise";
    readonly Expire: "expire";
    readonly FundFee: "fund_fee";
    readonly Interest: "interest";
    readonly InterestReceivable: "interest_receivable";
    readonly InterestReinvestment: "interest_reinvestment";
    readonly LegalFee: "legal_fee";
    readonly LoanPayment: "loan_payment";
    readonly LongTermCapitalGain: "long_term_capital_gain";
    readonly LongTermCapitalGainReinvestment: "long_term_capital_gain_reinvestment";
    readonly ManagementFee: "management_fee";
    readonly MarginExpense: "margin_expense";
    readonly Merger: "merger";
    readonly MiscellaneousFee: "miscellaneous_fee";
    readonly NonQualifiedDividend: "non_qualified_dividend";
    readonly NonResidentTax: "non_resident_tax";
    readonly PendingCredit: "pending_credit";
    readonly PendingDebit: "pending_debit";
    readonly QualifiedDividend: "qualified_dividend";
    readonly Rebalance: "rebalance";
    readonly ReturnOfPrincipal: "return_of_principal";
    readonly Request: "request";
    readonly Sell: "sell";
    readonly SellShort: "sell_short";
    readonly Send: "send";
    readonly ShortTermCapitalGain: "short_term_capital_gain";
    readonly ShortTermCapitalGainReinvestment: "short_term_capital_gain_reinvestment";
    readonly SpinOff: "spin_off";
    readonly Split: "split";
    readonly StockDistribution: "stock_distribution";
    readonly Tax: "tax";
    readonly TaxWithheld: "tax_withheld";
    readonly Trade: "trade";
    readonly Transfer: "transfer";
    readonly TransferFee: "transfer_fee";
    readonly TrustFee: "trust_fee";
    readonly UnqualifiedGain: "unqualified_gain";
    readonly Withdrawal: "withdrawal";
    readonly Minus: "-";
};
export type FinancialConnectionsInvestmentTransactionSubtype = typeof FinancialConnectionsInvestmentTransactionSubtype[keyof typeof FinancialConnectionsInvestmentTransactionSubtype];
/**
 *
 * @export
 * @interface FinancialConnectionsOwner
 */
export interface FinancialConnectionsOwner {
    /**
     *
     * @type {Array<FinancialConnectionsOwnerAddressesInner>}
     * @memberof FinancialConnectionsOwner
     */
    'addresses': Array<FinancialConnectionsOwnerAddressesInner>;
    /**
     *
     * @type {Array<FinancialConnectionsOwnerEmailsInner>}
     * @memberof FinancialConnectionsOwner
     */
    'emails': Array<FinancialConnectionsOwnerEmailsInner>;
    /**
     * List of names associated with the owner
     * @type {Array<FinancialConnectionsOwnerNamesInner>}
     * @memberof FinancialConnectionsOwner
     */
    'names': Array<FinancialConnectionsOwnerNamesInner>;
    /**
     *
     * @type {Array<FinancialConnectionsOwnerPhoneNumbersInner>}
     * @memberof FinancialConnectionsOwner
     */
    'phone_numbers': Array<FinancialConnectionsOwnerPhoneNumbersInner>;
}
/**
 *
 * @export
 * @interface FinancialConnectionsOwnerAddressesInner
 */
export interface FinancialConnectionsOwnerAddressesInner {
    /**
     *
     * @type {FinancialConnectionsOwnerAddressesInnerData}
     * @memberof FinancialConnectionsOwnerAddressesInner
     */
    'data'?: FinancialConnectionsOwnerAddressesInnerData;
    /**
     * Indicating if it is the primary address
     * @type {boolean}
     * @memberof FinancialConnectionsOwnerAddressesInner
     */
    'primary'?: boolean;
}
/**
 *
 * @export
 * @interface FinancialConnectionsOwnerAddressesInnerData
 */
export interface FinancialConnectionsOwnerAddressesInnerData {
    /**
     * Full address of the owner
     * @type {string}
     * @memberof FinancialConnectionsOwnerAddressesInnerData
     */
    'full_address'?: string;
    /**
     * City of the address
     * @type {string}
     * @memberof FinancialConnectionsOwnerAddressesInnerData
     */
    'city'?: string;
    /**
     * Country of the address
     * @type {string}
     * @memberof FinancialConnectionsOwnerAddressesInnerData
     */
    'country'?: string;
    /**
     * Postal code of the address
     * @type {string}
     * @memberof FinancialConnectionsOwnerAddressesInnerData
     */
    'postal_code'?: string;
    /**
     * Region of the address
     * @type {string}
     * @memberof FinancialConnectionsOwnerAddressesInnerData
     */
    'region'?: string;
    /**
     * Street of the address
     * @type {string}
     * @memberof FinancialConnectionsOwnerAddressesInnerData
     */
    'street'?: string;
}
/**
 *
 * @export
 * @interface FinancialConnectionsOwnerEmailsInner
 */
export interface FinancialConnectionsOwnerEmailsInner {
    /**
     * Email address
     * @type {string}
     * @memberof FinancialConnectionsOwnerEmailsInner
     */
    'data': string;
    /**
     * Indicating if it is the primary email
     * @type {boolean}
     * @memberof FinancialConnectionsOwnerEmailsInner
     */
    'primary'?: boolean;
    /**
     * Type of the email
     * @type {string}
     * @memberof FinancialConnectionsOwnerEmailsInner
     */
    'type'?: FinancialConnectionsOwnerEmailsInnerTypeEnum;
}
export declare const FinancialConnectionsOwnerEmailsInnerTypeEnum: {
    readonly Primary: "primary";
    readonly Secondary: "secondary";
    readonly Other: "other";
};
export type FinancialConnectionsOwnerEmailsInnerTypeEnum = typeof FinancialConnectionsOwnerEmailsInnerTypeEnum[keyof typeof FinancialConnectionsOwnerEmailsInnerTypeEnum];
/**
 *
 * @export
 * @interface FinancialConnectionsOwnerNamesInner
 */
export interface FinancialConnectionsOwnerNamesInner {
    /**
     * Name of the owner
     * @type {string}
     * @memberof FinancialConnectionsOwnerNamesInner
     */
    'data': string;
    /**
     * Type of name. Possible values are \"name\" or \"alias\"
     * @type {string}
     * @memberof FinancialConnectionsOwnerNamesInner
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface FinancialConnectionsOwnerPhoneNumbersInner
 */
export interface FinancialConnectionsOwnerPhoneNumbersInner {
    /**
     * The phone number
     * @type {string}
     * @memberof FinancialConnectionsOwnerPhoneNumbersInner
     */
    'data': string;
    /**
     * Indicating if it is the primary phone number
     * @type {boolean}
     * @memberof FinancialConnectionsOwnerPhoneNumbersInner
     */
    'primary'?: boolean;
    /**
     * Type of the phone number
     * @type {string}
     * @memberof FinancialConnectionsOwnerPhoneNumbersInner
     */
    'type'?: FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum;
}
export declare const FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum: {
    readonly Home: "home";
    readonly Work: "work";
    readonly Mobile: "mobile";
};
export type FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum = typeof FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum[keyof typeof FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum];
/**
 *
 * @export
 * @interface FinancialInstitution
 */
export interface FinancialInstitution {
    /**
     * Unique identifier for the financial institution id.
     * @type {string}
     * @memberof FinancialInstitution
     */
    'id': string;
    /**
     * Name for the financial institution.
     * @type {string}
     * @memberof FinancialInstitution
     */
    'name': string;
    /**
     *
     * @type {FinancialInstitutionLogo}
     * @memberof FinancialInstitution
     */
    'logo'?: FinancialInstitutionLogo;
    /**
     * Website of the financial institution.
     * @type {string}
     * @memberof FinancialInstitution
     */
    'website'?: string;
    /**
     * List of country codes supported by this institution
     * @type {Array<CountryCode>}
     * @memberof FinancialInstitution
     */
    'country_codes': Array<CountryCode>;
}
/**
 *
 * @export
 * @interface FinancialInstitutionLogo
 */
export interface FinancialInstitutionLogo {
    /**
     * Base64-encoded image data or URL for the image.
     * @type {string}
     * @memberof FinancialInstitutionLogo
     */
    'image': string;
    /**
     * Type of the image.
     * @type {string}
     * @memberof FinancialInstitutionLogo
     */
    'type': FinancialInstitutionLogoTypeEnum;
    /**
     * Optional format of the image, if known.
     * @type {string}
     * @memberof FinancialInstitutionLogo
     */
    'format'?: FinancialInstitutionLogoFormatEnum;
}
export declare const FinancialInstitutionLogoTypeEnum: {
    readonly Base64: "base64";
    readonly Url: "url";
};
export type FinancialInstitutionLogoTypeEnum = typeof FinancialInstitutionLogoTypeEnum[keyof typeof FinancialInstitutionLogoTypeEnum];
export declare const FinancialInstitutionLogoFormatEnum: {
    readonly Png: "png";
    readonly Jpeg: "jpeg";
    readonly Gif: "gif";
    readonly Svgxml: "svg+xml";
};
export type FinancialInstitutionLogoFormatEnum = typeof FinancialInstitutionLogoFormatEnum[keyof typeof FinancialInstitutionLogoFormatEnum];
/**
 *
 * @export
 * @interface FuseApiAggregatorError
 */
export interface FuseApiAggregatorError {
    /**
     *
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'request_id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'title'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'details'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'code'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof FuseApiAggregatorError
     */
    'path'?: string;
}
/**
 *
 * @export
 * @interface FuseApiError
 */
export interface FuseApiError {
    /**
     *
     * @type {string}
     * @memberof FuseApiError
     */
    'request_id': string;
    /**
     *
     * @type {string}
     * @memberof FuseApiError
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof FuseApiError
     */
    'details': string;
    /**
     *
     * @type {FuseApiErrorCode}
     * @memberof FuseApiError
     */
    'code': FuseApiErrorCode;
    /**
     *
     * @type {FuseApiErrorType}
     * @memberof FuseApiError
     */
    'type': FuseApiErrorType;
    /**
     *
     * @type {string}
     * @memberof FuseApiError
     */
    'source': FuseApiErrorSourceEnum;
    /**
     *
     * @type {FuseApiErrorData}
     * @memberof FuseApiError
     */
    'data'?: FuseApiErrorData;
}
export declare const FuseApiErrorSourceEnum: {
    readonly Internal: "internal";
    readonly Aggregator: "aggregator";
};
export type FuseApiErrorSourceEnum = typeof FuseApiErrorSourceEnum[keyof typeof FuseApiErrorSourceEnum];
/**
 *
 * @export
 * @enum {string}
 */
export declare const FuseApiErrorCode: {
    readonly AssetReportGenerationFailed: "asset_report_generation_failed";
    readonly AssetReportNotReady: "asset_report_not_ready";
    readonly ClientError: "client_error";
    readonly InvalidHeaders: "invalid_headers";
    readonly InvalidRequestBody: "invalid_request_body";
    readonly InternalServerError: "internal_server_error";
    readonly OrganizationNotFound: "organization_not_found";
    readonly EntityNotFound: "entity_not_found";
    readonly SessionNotFound: "session_not_found";
    readonly FinancialInstitutionNotFound: "financial_institution_not_found";
    readonly ConsumerRiskReportNotFound: "consumer_risk_report_not_found";
    readonly ConsumerRiskReportCustomizationNotFound: "consumer_risk_report_customization_not_found";
    readonly MissingAccessToken: "missing_access_token";
    readonly MissingPlaidClientIdHeader: "missing_plaid_client_id_header";
    readonly MissingPlaidSecretHeader: "missing_plaid_secret_header";
    readonly MissingMxClientIdHeader: "missing_mx_client_id_header";
    readonly MissingMxApiKeyHeader: "missing_mx_api_key_header";
    readonly MissingTellerPrivateKeyHeader: "missing_teller_private_key_header";
    readonly MissingTellerCertificateHeader: "missing_teller_certificate_header";
    readonly MissingTellerApplicationIdHeader: "missing_teller_application_id_header";
    readonly MissingTellerSigningSecretHeader: "missing_teller_signing_secret_header";
    readonly MissingSnaptradeClientIdHeader: "missing_snaptrade_client_id_header";
    readonly MissingSnaptradeConsumerKeyHeader: "missing_snaptrade_consumer_key_header";
    readonly MissingFlinksCaCustomerIdHeader: "missing_flinks_ca_customer_id_header";
    readonly MissingFlinksUsCustomerIdHeader: "missing_flinks_us_customer_id_header";
    readonly MissingFlinksCaInstanceIdHeader: "missing_flinks_ca_instance_id_header";
    readonly MissingFlinksUsInstanceIdHeader: "missing_flinks_us_instance_id_header";
    readonly MissingMonoPublicKeyHeader: "missing_mono_public_key_header";
    readonly MissingMonoSecretKeyHeader: "missing_mono_secret_key_header";
    readonly MissingMonoWebhookSecretHeader: "missing_mono_webhook_secret_header";
    readonly MissingTruelayerClientIdHeader: "missing_truelayer_client_id_header";
    readonly MissingTruelayerClientSecretHeader: "missing_truelayer_client_secret_header";
    readonly MissingTruelayerRedirectUriHeader: "missing_truelayer_redirect_uri_header";
    readonly MissingFinverseClientIdHeader: "missing_finverse_client_id_header";
    readonly MissingFinverseClientSecretHeader: "missing_finverse_client_secret_header";
    readonly MissingFinverseRedirectUriHeader: "missing_finverse_redirect_uri_header";
    readonly MissingBasiqApiKeyHeader: "missing_basiq_api_key_header";
    readonly MissingBelvoSecretIdHeader: "missing_belvo_secret_id_header";
    readonly MissingBelvoSecretPasswordHeader: "missing_belvo_secret_password_header";
    readonly MissingFinicityPartnerIdHeader: "missing_finicity_partner_id_header";
    readonly MissingFinicityAppKeyHeader: "missing_finicity_app_key_header";
    readonly MissingFinicityPartnerSecretHeader: "missing_finicity_partner_secret_header";
    readonly MissingFuseVerificationHeader: "missing_fuse_verification_header";
    readonly AggregatorError: "aggregator_error";
    readonly AggregatorDisconnectedError: "aggregator_disconnected_error";
    readonly AggregatorConnectionFinishedError: "aggregator_connection_finished_error";
    readonly AggregatorRateLimitError: "aggregator_rate_limit_error";
    readonly RequestBodyMissing: "request_body_missing";
    readonly RequestContentTypeInvalid: "request_content_type_invalid";
    readonly RequestBodyInvalidJson: "request_body_invalid_json";
    readonly WebhookError: "webhook_error";
    readonly Timeout: "timeout";
    readonly InvalidCertificate: "invalid_certificate";
    readonly InvalidPrivateKey: "invalid_private_key";
    readonly Other: "other";
};
export type FuseApiErrorCode = typeof FuseApiErrorCode[keyof typeof FuseApiErrorCode];
/**
 *
 * @export
 * @interface FuseApiErrorData
 */
export interface FuseApiErrorData {
    /**
     *
     * @type {Aggregator}
     * @memberof FuseApiErrorData
     */
    'aggregator'?: Aggregator;
    /**
     *
     * @type {Array<FuseApiAggregatorError>}
     * @memberof FuseApiErrorData
     */
    'errors'?: Array<FuseApiAggregatorError>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const FuseApiErrorType: {
    readonly AuthError: "auth_error";
    readonly NotFound: "not_found";
    readonly BadRequest: "bad_request";
    readonly ServerError: "server_error";
};
export type FuseApiErrorType = typeof FuseApiErrorType[keyof typeof FuseApiErrorType];
/**
 *
 * @export
 * @interface FuseApiWarning
 */
export interface FuseApiWarning {
    /**
     *
     * @type {string}
     * @memberof FuseApiWarning
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof FuseApiWarning
     */
    'details'?: string;
    /**
     *
     * @type {string}
     * @memberof FuseApiWarning
     */
    'code'?: string;
    /**
     *
     * @type {string}
     * @memberof FuseApiWarning
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof FuseApiWarning
     */
    'source'?: FuseApiWarningSourceEnum;
    /**
     *
     * @type {FuseApiWarningData}
     * @memberof FuseApiWarning
     */
    'data'?: FuseApiWarningData;
}
export declare const FuseApiWarningSourceEnum: {
    readonly Internal: "internal";
    readonly Aggregator: "aggregator";
};
export type FuseApiWarningSourceEnum = typeof FuseApiWarningSourceEnum[keyof typeof FuseApiWarningSourceEnum];
/**
 *
 * @export
 * @interface FuseApiWarningData
 */
export interface FuseApiWarningData {
    /**
     *
     * @type {Aggregator}
     * @memberof FuseApiWarningData
     */
    'aggregator'?: Aggregator;
    /**
     *
     * @type {Array<FuseApiWarningDataWarningsInner>}
     * @memberof FuseApiWarningData
     */
    'warnings'?: Array<FuseApiWarningDataWarningsInner>;
}
/**
 *
 * @export
 * @interface FuseApiWarningDataWarningsInner
 */
export interface FuseApiWarningDataWarningsInner {
    /**
     *
     * @type {string}
     * @memberof FuseApiWarningDataWarningsInner
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof FuseApiWarningDataWarningsInner
     */
    'details'?: string;
    /**
     *
     * @type {string}
     * @memberof FuseApiWarningDataWarningsInner
     */
    'code'?: string;
    /**
     *
     * @type {string}
     * @memberof FuseApiWarningDataWarningsInner
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof FuseApiWarningDataWarningsInner
     */
    'source'?: FuseApiWarningDataWarningsInnerSourceEnum;
}
export declare const FuseApiWarningDataWarningsInnerSourceEnum: {
    readonly Internal: "internal";
    readonly Aggregator: "aggregator";
};
export type FuseApiWarningDataWarningsInnerSourceEnum = typeof FuseApiWarningDataWarningsInnerSourceEnum[keyof typeof FuseApiWarningDataWarningsInnerSourceEnum];
/**
 *
 * @export
 * @interface GetAssetReportRequest
 */
export interface GetAssetReportRequest {
    /**
     * Access fuse token corresponding to the financial account to be refresh the Asset Report for.
     * @type {string}
     * @memberof GetAssetReportRequest
     */
    'access_token': string;
    /**
     * The token associated with the Asset Report to retrieve.
     * @type {string}
     * @memberof GetAssetReportRequest
     */
    'asset_report_token': string;
}
/**
 *
 * @export
 * @interface GetConsumerRiskReportCustomizationResponse
 */
export interface GetConsumerRiskReportCustomizationResponse {
    /**
     *
     * @type {ConsumerRiskReportCustomization}
     * @memberof GetConsumerRiskReportCustomizationResponse
     */
    'consumer_risk_report_customization': ConsumerRiskReportCustomization;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetConsumerRiskReportCustomizationResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface GetConsumerRiskReportResponse
 */
export interface GetConsumerRiskReportResponse {
    /**
     *
     * @type {ConsumerRiskReport}
     * @memberof GetConsumerRiskReportResponse
     */
    'consumer_risk_report': ConsumerRiskReport;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetConsumerRiskReportResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface GetEntityResponse
 */
export interface GetEntityResponse {
    /**
     * Id of the entity
     * @type {string}
     * @memberof GetEntityResponse
     */
    'id': string;
    /**
     * Email of the entity
     * @type {string}
     * @memberof GetEntityResponse
     */
    'email'?: string;
    /**
     * These will force the user to connect through all of these aggregators
     * @type {Array<Aggregator>}
     * @memberof GetEntityResponse
     */
    'aggregators'?: Array<Aggregator>;
    /**
     *
     * @type {Array<string>}
     * @memberof GetEntityResponse
     */
    'institution_ids'?: Array<string>;
    /**
     * Data needed to query data from the various aggregators
     * @type {Array<FinancialConnectionDetails>}
     * @memberof GetEntityResponse
     */
    'financial_connections': Array<FinancialConnectionDetails>;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetEntityResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface GetFinanceScoreResponse
 */
export interface GetFinanceScoreResponse {
    /**
     *
     * @type {FinanceScore}
     * @memberof GetFinanceScoreResponse
     */
    'finance_score': FinanceScore;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinanceScoreResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionResponse
 */
export interface GetFinancialConnectionResponse {
    /**
     *
     * @type {FinancialConnectionDetails}
     * @memberof GetFinancialConnectionResponse
     */
    'financial_connection': FinancialConnectionDetails;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialConnectionResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionsAccountDetailsRequest
 */
export interface GetFinancialConnectionsAccountDetailsRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof GetFinancialConnectionsAccountDetailsRequest
     */
    'access_token': string;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionsAccountDetailsResponse
 */
export interface GetFinancialConnectionsAccountDetailsResponse {
    /**
     *
     * @type {Array<FinancialConnectionsAccountDetails>}
     * @memberof GetFinancialConnectionsAccountDetailsResponse
     */
    'account_details': Array<FinancialConnectionsAccountDetails>;
    /**
     *
     * @type {FinancialConnectionData}
     * @memberof GetFinancialConnectionsAccountDetailsResponse
     */
    'financial_connection': FinancialConnectionData;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialConnectionsAccountDetailsResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionsAccountStatementRequest
 */
export interface GetFinancialConnectionsAccountStatementRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof GetFinancialConnectionsAccountStatementRequest
     */
    'access_token': string;
    /**
     * The remote account id to retrieve the statement for.
     * @type {string}
     * @memberof GetFinancialConnectionsAccountStatementRequest
     */
    'remote_account_id': string;
    /**
     * The year and month for the account statement to be retrieved in YYYY-MM.
     * @type {string}
     * @memberof GetFinancialConnectionsAccountStatementRequest
     */
    'date'?: string;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionsAccountStatementResponse
 */
export interface GetFinancialConnectionsAccountStatementResponse {
    /**
     * PDF statement URL.
     * @type {string}
     * @memberof GetFinancialConnectionsAccountStatementResponse
     */
    'statement_url': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialConnectionsAccountStatementResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionsAccountsRequest
 */
export interface GetFinancialConnectionsAccountsRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof GetFinancialConnectionsAccountsRequest
     */
    'access_token': string;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionsAccountsResponse
 */
export interface GetFinancialConnectionsAccountsResponse {
    /**
     *
     * @type {Array<FinancialConnectionsAccount>}
     * @memberof GetFinancialConnectionsAccountsResponse
     */
    'accounts': Array<FinancialConnectionsAccount>;
    /**
     *
     * @type {FinancialConnectionData}
     * @memberof GetFinancialConnectionsAccountsResponse
     */
    'financial_connection': FinancialConnectionData;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialConnectionsAccountsResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionsBalanceRequest
 */
export interface GetFinancialConnectionsBalanceRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof GetFinancialConnectionsBalanceRequest
     */
    'access_token': string;
    /**
     *
     * @type {GetFinancialConnectionsBalanceRequestOptions}
     * @memberof GetFinancialConnectionsBalanceRequest
     */
    'options'?: GetFinancialConnectionsBalanceRequestOptions;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionsBalanceRequestOptions
 */
export interface GetFinancialConnectionsBalanceRequestOptions {
    /**
     * An array of remote account ids to retrieve balances for.
     * @type {Array<string>}
     * @memberof GetFinancialConnectionsBalanceRequestOptions
     */
    'remote_account_ids'?: Array<string>;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionsBalanceResponse
 */
export interface GetFinancialConnectionsBalanceResponse {
    /**
     *
     * @type {Array<FinancialConnectionsAccountBalance>}
     * @memberof GetFinancialConnectionsBalanceResponse
     */
    'balances': Array<FinancialConnectionsAccountBalance>;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialConnectionsBalanceResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionsOwnersRequest
 */
export interface GetFinancialConnectionsOwnersRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof GetFinancialConnectionsOwnersRequest
     */
    'access_token': string;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionsOwnersResponse
 */
export interface GetFinancialConnectionsOwnersResponse {
    /**
     *
     * @type {Array<GetFinancialConnectionsOwnersResponseAccountsInner>}
     * @memberof GetFinancialConnectionsOwnersResponse
     */
    'accounts': Array<GetFinancialConnectionsOwnersResponseAccountsInner>;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialConnectionsOwnersResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionsOwnersResponseAccountsInner
 */
export interface GetFinancialConnectionsOwnersResponseAccountsInner {
    /**
     * The remote account id of the account
     * @type {string}
     * @memberof GetFinancialConnectionsOwnersResponseAccountsInner
     */
    'remote_account_id': string;
    /**
     *
     * @type {Array<FinancialConnectionsOwner>}
     * @memberof GetFinancialConnectionsOwnersResponseAccountsInner
     */
    'owners': Array<FinancialConnectionsOwner>;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionsTransactionsRequest
 */
export interface GetFinancialConnectionsTransactionsRequest {
    /**
     * Access token for authentication.
     * @type {string}
     * @memberof GetFinancialConnectionsTransactionsRequest
     */
    'access_token': string;
    /**
     * The earliest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof GetFinancialConnectionsTransactionsRequest
     */
    'start_date': string;
    /**
     * The latest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof GetFinancialConnectionsTransactionsRequest
     */
    'end_date': string;
    /**
     * Specify current page.
     * @type {number}
     * @memberof GetFinancialConnectionsTransactionsRequest
     */
    'page': number;
    /**
     * Number of items per page.
     * @type {number}
     * @memberof GetFinancialConnectionsTransactionsRequest
     */
    'records_per_page': number;
}
/**
 *
 * @export
 * @interface GetFinancialConnectionsTransactionsResponse
 */
export interface GetFinancialConnectionsTransactionsResponse {
    /**
     *
     * @type {Array<Transaction>}
     * @memberof GetFinancialConnectionsTransactionsResponse
     */
    'transactions': Array<Transaction>;
    /**
     * The total number of transactions available within the date range specified. If total_transactions is larger than the size of the transactions array, more transactions are available and can be fetched
     * @type {number}
     * @memberof GetFinancialConnectionsTransactionsResponse
     */
    'total_transactions': number;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialConnectionsTransactionsResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface GetFinancialInstitutionResponse
 */
export interface GetFinancialInstitutionResponse {
    /**
     *
     * @type {FinancialInstitution}
     * @memberof GetFinancialInstitutionResponse
     */
    'financial_institution': FinancialInstitution;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetFinancialInstitutionResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface GetInvestmentHoldingsRequest
 */
export interface GetInvestmentHoldingsRequest {
    /**
     * The access token of the financial institution connection
     * @type {string}
     * @memberof GetInvestmentHoldingsRequest
     */
    'access_token': string;
    /**
     *
     * @type {GetInvestmentHoldingsRequestOptions}
     * @memberof GetInvestmentHoldingsRequest
     */
    'options'?: GetInvestmentHoldingsRequestOptions;
}
/**
 *
 * @export
 * @interface GetInvestmentHoldingsRequestOptions
 */
export interface GetInvestmentHoldingsRequestOptions {
    /**
     * An array of account_ids to retrieve holdings for.
     * @type {Array<string>}
     * @memberof GetInvestmentHoldingsRequestOptions
     */
    'remote_account_ids'?: Array<string>;
}
/**
 *
 * @export
 * @interface GetInvestmentHoldingsResponse
 */
export interface GetInvestmentHoldingsResponse {
    /**
     *
     * @type {Array<FinancialConnectionsAccount>}
     * @memberof GetInvestmentHoldingsResponse
     */
    'accounts': Array<FinancialConnectionsAccount>;
    /**
     *
     * @type {Array<FinancialConnectionsHolding>}
     * @memberof GetInvestmentHoldingsResponse
     */
    'holdings': Array<FinancialConnectionsHolding>;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetInvestmentHoldingsResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface GetInvestmentTransactionsRequest
 */
export interface GetInvestmentTransactionsRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof GetInvestmentTransactionsRequest
     */
    'access_token': string;
    /**
     * The earliest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof GetInvestmentTransactionsRequest
     */
    'start_date': string;
    /**
     * The latest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
     * @type {string}
     * @memberof GetInvestmentTransactionsRequest
     */
    'end_date': string;
    /**
     * Specify current page.
     * @type {number}
     * @memberof GetInvestmentTransactionsRequest
     */
    'page': number;
    /**
     * Number of items per page.
     * @type {number}
     * @memberof GetInvestmentTransactionsRequest
     */
    'records_per_page': number;
    /**
     *
     * @type {GetInvestmentTransactionsRequestOptions}
     * @memberof GetInvestmentTransactionsRequest
     */
    'options'?: GetInvestmentTransactionsRequestOptions;
}
/**
 *
 * @export
 * @interface GetInvestmentTransactionsRequestOptions
 */
export interface GetInvestmentTransactionsRequestOptions {
    /**
     * An array of account_ids to retrieve transactions for.
     * @type {Array<string>}
     * @memberof GetInvestmentTransactionsRequestOptions
     */
    'remote_account_ids'?: Array<string>;
}
/**
 *
 * @export
 * @interface GetInvestmentTransactionsResponse
 */
export interface GetInvestmentTransactionsResponse {
    /**
     *
     * @type {Array<FinancialConnectionsAccount>}
     * @memberof GetInvestmentTransactionsResponse
     */
    'accounts': Array<FinancialConnectionsAccount>;
    /**
     *
     * @type {Array<FinancialConnectionsInvestmentTransaction>}
     * @memberof GetInvestmentTransactionsResponse
     */
    'investment_transactions': Array<FinancialConnectionsInvestmentTransaction>;
    /**
     * The total number of transactions within the specified date range.
     * @type {number}
     * @memberof GetInvestmentTransactionsResponse
     */
    'total_transactions'?: number;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetInvestmentTransactionsResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface GetLiabilitiesRequest
 */
export interface GetLiabilitiesRequest {
    /**
     * Access token for authentication
     * @type {string}
     * @memberof GetLiabilitiesRequest
     */
    'access_token': string;
}
/**
 *
 * @export
 * @interface GetLiabilitiesResponse
 */
export interface GetLiabilitiesResponse {
    /**
     *
     * @type {Array<FinancialConnectionsAccountLiability>}
     * @memberof GetLiabilitiesResponse
     */
    'liabilities'?: Array<FinancialConnectionsAccountLiability>;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof GetLiabilitiesResponse
     */
    'request_id'?: string;
}
/**
 *
 * @export
 * @interface InAppTransactionEvent
 */
export interface InAppTransactionEvent {
    /**
     * ID of the transaction
     * @type {string}
     * @memberof InAppTransactionEvent
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof InAppTransactionEvent
     */
    'event_type': InAppTransactionEventEventTypeEnum;
    /**
     *
     * @type {InAppTransactionEventStatus}
     * @memberof InAppTransactionEvent
     */
    'status': InAppTransactionEventStatus;
    /**
     *
     * @type {number}
     * @memberof InAppTransactionEvent
     */
    'amount': number;
    /**
     * The ISO-4217 currency code.
     * @type {string}
     * @memberof InAppTransactionEvent
     */
    'iso_currency_code': string;
    /**
     *
     * @type {TransactionEventType}
     * @memberof InAppTransactionEvent
     */
    'transaction_type'?: TransactionEventType;
    /**
     *
     * @type {string}
     * @memberof InAppTransactionEvent
     */
    'merchant_name': string;
    /**
     * Datetime of the transaction In ISO-8601 format
     * @type {string}
     * @memberof InAppTransactionEvent
     */
    'timestamp': string;
    /**
     * The running balance of the account after the transaction has occurred, in cents.
     * @type {number}
     * @memberof InAppTransactionEvent
     */
    'balance'?: number;
}
export declare const InAppTransactionEventEventTypeEnum: {
    readonly InAppTransaction: "in_app_transaction";
};
export type InAppTransactionEventEventTypeEnum = typeof InAppTransactionEventEventTypeEnum[keyof typeof InAppTransactionEventEventTypeEnum];
/**
 *
 * @export
 * @enum {string}
 */
export declare const InAppTransactionEventStatus: {
    readonly Pending: "pending";
    readonly Succeeded: "succeeded";
    readonly Failed: "failed";
};
export type InAppTransactionEventStatus = typeof InAppTransactionEventStatus[keyof typeof InAppTransactionEventStatus];
/**
 *
 * @export
 * @interface Merchant
 */
export interface Merchant {
    /**
     * A Fuse defined, unique ID for the merchant associated with this transaction.
     * @type {string}
     * @memberof Merchant
     */
    'id': string;
    /**
     * The name of the merchant.
     * @type {string}
     * @memberof Merchant
     */
    'name': string;
    /**
     *
     * @type {MerchantLogo}
     * @memberof Merchant
     */
    'logo'?: MerchantLogo;
}
/**
 *
 * @export
 * @interface MerchantLogo
 */
export interface MerchantLogo {
    /**
     * The URL of the logo.
     * @type {string}
     * @memberof MerchantLogo
     */
    'url'?: string;
}
/**
 * The input data for the financial connections to be migrated into the unified Fuse API.
 * @export
 * @interface MigrateFinancialConnectionsAggregatorConnectionData
 */
export interface MigrateFinancialConnectionsAggregatorConnectionData {
    /**
     *
     * @type {MigrateFinancialConnectionsAggregatorConnectionDataPlaid}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionData
     */
    'plaid'?: MigrateFinancialConnectionsAggregatorConnectionDataPlaid;
    /**
     *
     * @type {MigrateFinancialConnectionsAggregatorConnectionDataMx}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionData
     */
    'mx'?: MigrateFinancialConnectionsAggregatorConnectionDataMx;
    /**
     *
     * @type {MigrateFinancialConnectionsAggregatorConnectionDataTeller}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionData
     */
    'teller'?: MigrateFinancialConnectionsAggregatorConnectionDataTeller;
}
/**
 * Details of the MX connection to migrate into the unified Fuse API.
 * @export
 * @interface MigrateFinancialConnectionsAggregatorConnectionDataMx
 */
export interface MigrateFinancialConnectionsAggregatorConnectionDataMx {
    /**
     * The unique identifier (GUID) of the user within the MX platform.
     * @type {string}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionDataMx
     */
    'user_guid': string;
    /**
     * The unique identifier (GUID) of the member (connection) associated with the user within the MX platform.
     * @type {string}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionDataMx
     */
    'member_guid'?: string;
}
/**
 * Details of the Plaid connection to migrate into the unified Fuse API.
 * @export
 * @interface MigrateFinancialConnectionsAggregatorConnectionDataPlaid
 */
export interface MigrateFinancialConnectionsAggregatorConnectionDataPlaid {
    /**
     * The Plaid access token associated with the user\'s financial accounts.
     * @type {string}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionDataPlaid
     */
    'access_token': string;
    /**
     * If true, any webhooks received for this new financial connection will be sent to the webhook url used when the item was created. If false, the webhook url set at the organization sandbox/production environment level will be used instead.
     * @type {boolean}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionDataPlaid
     */
    'use_item_webhook'?: boolean;
}
/**
 * Details of the Teller connection to migrate into the unified Fuse API.
 * @export
 * @interface MigrateFinancialConnectionsAggregatorConnectionDataTeller
 */
export interface MigrateFinancialConnectionsAggregatorConnectionDataTeller {
    /**
     * The Teller access token associated with the user\'s financial accounts.
     * @type {string}
     * @memberof MigrateFinancialConnectionsAggregatorConnectionDataTeller
     */
    'access_token': string;
}
/**
 *
 * @export
 * @interface MigrateFinancialConnectionsTokenRequest
 */
export interface MigrateFinancialConnectionsTokenRequest {
    /**
     *
     * @type {MigrateFinancialConnectionsAggregatorConnectionData}
     * @memberof MigrateFinancialConnectionsTokenRequest
     */
    'connection_data': MigrateFinancialConnectionsAggregatorConnectionData;
    /**
     * The aggregator being migrated (either \'plaid\', \'mx\' or \'teller).
     * @type {string}
     * @memberof MigrateFinancialConnectionsTokenRequest
     */
    'aggregator': MigrateFinancialConnectionsTokenRequestAggregatorEnum;
    /**
     *
     * @type {MigrateFinancialConnectionsTokenRequestEntity}
     * @memberof MigrateFinancialConnectionsTokenRequest
     */
    'entity': MigrateFinancialConnectionsTokenRequestEntity;
    /**
     * A list of Fuse products that the migrated connection will have access to.
     * @type {Array<Product>}
     * @memberof MigrateFinancialConnectionsTokenRequest
     */
    'fuse_products': Array<Product>;
}
export declare const MigrateFinancialConnectionsTokenRequestAggregatorEnum: {
    readonly Plaid: "plaid";
    readonly Mx: "mx";
    readonly Teller: "teller";
};
export type MigrateFinancialConnectionsTokenRequestAggregatorEnum = typeof MigrateFinancialConnectionsTokenRequestAggregatorEnum[keyof typeof MigrateFinancialConnectionsTokenRequestAggregatorEnum];
/**
 *
 * @export
 * @interface MigrateFinancialConnectionsTokenRequestEntity
 */
export interface MigrateFinancialConnectionsTokenRequestEntity {
    /**
     * The unique identifier of the entity (user or business) associated with the financial connections.
     * @type {string}
     * @memberof MigrateFinancialConnectionsTokenRequestEntity
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface MigrateFinancialConnectionsTokenResponse
 */
export interface MigrateFinancialConnectionsTokenResponse {
    /**
     *
     * @type {MigrateFinancialConnectionsAggregatorConnectionData}
     * @memberof MigrateFinancialConnectionsTokenResponse
     */
    'connection_data': MigrateFinancialConnectionsAggregatorConnectionData;
    /**
     * Fuse access token for the fuse connection
     * @type {string}
     * @memberof MigrateFinancialConnectionsTokenResponse
     */
    'fuse_access_token': string;
    /**
     * Financial connection id for the fuse connection
     * @type {string}
     * @memberof MigrateFinancialConnectionsTokenResponse
     */
    'fuse_financial_connection_id': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof MigrateFinancialConnectionsTokenResponse
     */
    'request_id'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const Product: {
    readonly AccountDetails: "account_details";
    readonly Balance: "balance";
    readonly Ownership: "ownership";
    readonly Transactions: "transactions";
    readonly Investments: "investments";
    readonly Assets: "assets";
};
export type Product = typeof Product[keyof typeof Product];
/**
 *
 * @export
 * @interface RefreshAssetReportRequest
 */
export interface RefreshAssetReportRequest {
    /**
     * Access fuse token corresponding to the financial account to be refresh the Asset Report for.
     * @type {string}
     * @memberof RefreshAssetReportRequest
     */
    'access_token': string;
    /**
     * The asset_report_token returned by the original call to /asset_report/create
     * @type {string}
     * @memberof RefreshAssetReportRequest
     */
    'asset_report_token': string;
    /**
     * The maximum integer number of days of history to include in the Asset Report
     * @type {number}
     * @memberof RefreshAssetReportRequest
     */
    'days_requested'?: number;
}
/**
 *
 * @export
 * @interface RefreshAssetReportResponse
 */
export interface RefreshAssetReportResponse {
    /**
     * A token that can be provided to endpoints such as /asset_report to fetch an asset report.
     * @type {string}
     * @memberof RefreshAssetReportResponse
     */
    'asset_report_token'?: string;
    /**
     * A unique ID identifying an Asset Report.
     * @type {string}
     * @memberof RefreshAssetReportResponse
     */
    'asset_report_id'?: string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof RefreshAssetReportResponse
     */
    'request_id'?: string;
}
/**
 *
 * @export
 * @interface SyncFinancialConnectionsDataResponse
 */
export interface SyncFinancialConnectionsDataResponse {
    /**
     * Response message
     * @type {string}
     * @memberof SyncFinancialConnectionsDataResponse
     */
    'message'?: string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof SyncFinancialConnectionsDataResponse
     */
    'request_id'?: string;
}
/**
 *
 * @export
 * @interface SyncTransactionsRequest
 */
export interface SyncTransactionsRequest {
    /**
     * The access token of the financial institution connection
     * @type {string}
     * @memberof SyncTransactionsRequest
     */
    'access_token': string;
    /**
     * The cursor value represents the last update requested. Providing it will cause the response to only return changes after this update. If omitted, the entire history of updates will be returned, starting with the first-added transactions on the item.
     * @type {string}
     * @memberof SyncTransactionsRequest
     */
    'cursor'?: string;
    /**
     * The number of transaction updates to fetch.
     * @type {number}
     * @memberof SyncTransactionsRequest
     */
    'count'?: number;
}
/**
 *
 * @export
 * @interface SyncTransactionsResponse
 */
export interface SyncTransactionsResponse {
    /**
     * Transactions that have been added to the item since `cursor` ordered by ascending last modified time.
     * @type {Array<Transaction>}
     * @memberof SyncTransactionsResponse
     */
    'added'?: Array<Transaction>;
    /**
     * Transactions that have been modified on the item since `cursor` ordered by ascending last modified time.
     * @type {Array<Transaction>}
     * @memberof SyncTransactionsResponse
     */
    'modified'?: Array<Transaction>;
    /**
     * Transactions that have been removed from the item since `cursor` ordered by ascending last modified time.
     * @type {Array<SyncTransactionsResponseRemovedInner>}
     * @memberof SyncTransactionsResponse
     */
    'removed'?: Array<SyncTransactionsResponseRemovedInner>;
    /**
     * Cursor used for fetching any future updates after the latest update provided in this response. The cursor obtained after all pages have been pulled (indicated by `has_next` being `false`) will be valid for at least 1 year. This cursor should be persisted for later calls.
     * @type {string}
     * @memberof SyncTransactionsResponse
     */
    'next_cursor'?: string;
    /**
     * Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with `cursor` set to `next_cursor`. If `has_next` is true, it\'s important to pull all available pages, to make it less likely for underlying data changes to conflict with pagination.
     * @type {boolean}
     * @memberof SyncTransactionsResponse
     */
    'has_next'?: boolean;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof SyncTransactionsResponse
     */
    'request_id'?: string;
}
/**
 *
 * @export
 * @interface SyncTransactionsResponseRemovedInner
 */
export interface SyncTransactionsResponseRemovedInner {
    /**
     *
     * @type {string}
     * @memberof SyncTransactionsResponseRemovedInner
     */
    'transaction_id'?: string;
}
/**
 *
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * Remote Id of the transaction, ie Plaid or Teller Id
     * @type {string}
     * @memberof Transaction
     */
    'remote_id': string;
    /**
     * Uniquely identifies this transaction across all transactions for a single financial connection. Used for reconnection deduplication. This field may or may not be present depending on if a transaction can be uniquely identified. See more information here: https://letsfuse.readme.io/docs/duplicate-accounts
     * @type {string}
     * @memberof Transaction
     */
    'fingerprint'?: string;
    /**
     * Remote Account Id of the transaction, ie Plaid Account Id
     * @type {string}
     * @memberof Transaction
     */
    'remote_account_id': string;
    /**
     * Amount in cents associated with the transaction. The format of this value is a double.  Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
     * @type {number}
     * @memberof Transaction
     */
    'amount': number;
    /**
     * Date of the transaction (YYYY-MM-DD)
     * @type {string}
     * @memberof Transaction
     */
    'date': string;
    /**
     * Description of the transaction
     * @type {string}
     * @memberof Transaction
     */
    'description': string;
    /**
     * Categories of the transaction, i.e., Computers and Electronics. You can download the categories from [here](https://fuse-public-bucket.s3.amazonaws.com/transaction-categories.csv)
     * @type {Array<string>}
     * @memberof Transaction
     */
    'category': Array<TransactionCategoryEnum>;
    /**
     *
     * @type {TransactionMerchant}
     * @memberof Transaction
     */
    'merchant': TransactionMerchant;
    /**
     * The status of the transaction. This will be either posted or pending.
     * @type {string}
     * @memberof Transaction
     */
    'status': TransactionStatusEnum;
    /**
     * Type of the transaction, ie adjustment. \'-\' means we were not able to map the upstream type.
     * @type {string}
     * @memberof Transaction
     */
    'type': TransactionTypeEnum;
    /**
     * The ISO-4217 currency code of the transaction
     * @type {string}
     * @memberof Transaction
     */
    'iso_currency_code'?: string;
    /**
     *
     * @type {any}
     * @memberof Transaction
     */
    'remote_data': any;
}
export declare const TransactionCategoryEnum: {
    readonly AccessoriesStore: "accessories_store";
    readonly AccountingAndBookkeeping: "accounting_and_bookkeeping";
    readonly Ach: "ach";
    readonly Acorns: "acorns";
    readonly Acupuncture: "acupuncture";
    readonly Adult: "adult";
    readonly AdultEducation: "adult_education";
    readonly AdultEntertainment: "adult_entertainment";
    readonly Advertising: "advertising";
    readonly AdvertisingAgenciesAndMediaBuyers: "advertising_agencies_and_media_buyers";
    readonly AdvertisingAndMarketing: "advertising_and_marketing";
    readonly Afghan: "afghan";
    readonly African: "african";
    readonly AgricultureAndForestry: "agriculture_and_forestry";
    readonly AirlinesAndAviationServices: "airlines_and_aviation_services";
    readonly Airports: "airports";
    readonly AlcoholAndBars: "alcohol_and_bars";
    readonly AlternativeMedicine: "alternative_medicine";
    readonly American: "american";
    readonly Anesthesiologists: "anesthesiologists";
    readonly AnimalShelter: "animal_shelter";
    readonly Antiques: "antiques";
    readonly ApartmentsCondosAndHouses: "apartments_condos_and_houses";
    readonly ApparelAndFabricProducts: "apparel_and_fabric_products";
    readonly Aquarium: "aquarium";
    readonly ArcadesAndAmusementParks: "arcades_and_amusement_parks";
    readonly Architects: "architects";
    readonly ArtAndGraphicDesign: "art_and_graphic_design";
    readonly ArtDealersAndGalleries: "art_dealers_and_galleries";
    readonly ArtRestoration: "art_restoration";
    readonly ArtSchool: "art_school";
    readonly ArtsAndCrafts: "arts_and_crafts";
    readonly ArtsAndEntertainment: "arts_and_entertainment";
    readonly Asian: "asian";
    readonly AssistedLivingServices: "assisted_living_services";
    readonly AthleticFields: "athletic_fields";
    readonly Atm: "atm";
    readonly Atms: "atms";
    readonly Auctions: "auctions";
    readonly Audiovisual: "audiovisual";
    readonly Australian: "australian";
    readonly AutoOilAndLube: "auto_oil_and_lube";
    readonly AutoPayment: "auto_payment";
    readonly AutoSmogCheck: "auto_smog_check";
    readonly AutoTires: "auto_tires";
    readonly AutoTransmission: "auto_transmission";
    readonly AutomationAndControlSystems: "automation_and_control_systems";
    readonly Automotive: "automotive";
    readonly BagelShop: "bagel_shop";
    readonly Bakery: "bakery";
    readonly BankFees: "bank_fees";
    readonly BankingAndFinance: "banking_and_finance";
    readonly Bar: "bar";
    readonly Barbecue: "barbecue";
    readonly Baseball: "baseball";
    readonly Basketball: "basketball";
    readonly BattingCages: "batting_cages";
    readonly Beaches: "beaches";
    readonly BeautyProducts: "beauty_products";
    readonly BedAndBreakfasts: "bed_and_breakfasts";
    readonly BeerWineAndSpirits: "beer_wine_and_spirits";
    readonly Benefits: "benefits";
    readonly Betterment: "betterment";
    readonly Bicycles: "bicycles";
    readonly Bill: "bill";
    readonly BilliardsAndPool: "billiards_and_pool";
    readonly Billpay: "billpay";
    readonly BloodBanksAndCenters: "blood_banks_and_centers";
    readonly BoardingHouses: "boarding_houses";
    readonly Boat: "boat";
    readonly BoatDealers: "boat_dealers";
    readonly Boating: "boating";
    readonly BooksAndSupplies: "books_and_supplies";
    readonly Bookstores: "bookstores";
    readonly Boutique: "boutique";
    readonly Bowling: "bowling";
    readonly Brazilian: "brazilian";
    readonly BreakfastSpot: "breakfast_spot";
    readonly Breweries: "breweries";
    readonly BuildingAndLandSurveyors: "building_and_land_surveyors";
    readonly BuildingsAndStructures: "buildings_and_structures";
    readonly Burgers: "burgers";
    readonly Burrito: "burrito";
    readonly BusStations: "bus_stations";
    readonly Business: "business";
    readonly BusinessAndStrategyConsulting: "business_and_strategy_consulting";
    readonly BusinessBrokersAndFranchises: "business_brokers_and_franchises";
    readonly BusinessServices: "business_services";
    readonly Cable: "cable";
    readonly Cafe: "cafe";
    readonly Cajun: "cajun";
    readonly Cameras: "cameras";
    readonly CampgroundsAndRvParks: "campgrounds_and_rv_parks";
    readonly CanoesAndKayaks: "canoes_and_kayaks";
    readonly CarAndTruckRentals: "car_and_truck_rentals";
    readonly CarAppraisers: "car_appraisers";
    readonly CarDealersAndLeasing: "car_dealers_and_leasing";
    readonly CarPartsAndAccessories: "car_parts_and_accessories";
    readonly CarService: "car_service";
    readonly CarWashAndDetail: "car_wash_and_detail";
    readonly Cardiologists: "cardiologists";
    readonly CardsAndStationery: "cards_and_stationery";
    readonly Caretakers: "caretakers";
    readonly Caribbean: "caribbean";
    readonly Carpenters: "carpenters";
    readonly CarpetAndFlooring: "carpet_and_flooring";
    readonly CashAdvance: "cash_advance";
    readonly CasinosAndGaming: "casinos_and_gaming";
    readonly Catering: "catering";
    readonly Cemetery: "cemetery";
    readonly CharitiesAndNonProfits: "charities_and_non-profits";
    readonly Charity: "charity";
    readonly CharterBuses: "charter_buses";
    readonly ChaseQuickpay: "chase_quickpay";
    readonly Check: "check";
    readonly CheckCashing: "check_cashing";
    readonly ChemicalsAndGasses: "chemicals_and_gasses";
    readonly Childcare: "childcare";
    readonly Children: "children";
    readonly Chinese: "chinese";
    readonly Chiropractors: "chiropractors";
    readonly Churches: "churches";
    readonly CircusesAndCarnivals: "circuses_and_carnivals";
    readonly ClassicAndAntiqueCar: "classic_and_antique_car";
    readonly Cleaning: "cleaning";
    readonly Clothing: "clothing";
    readonly ClothingAndAccessories: "clothing_and_accessories";
    readonly Coal: "coal";
    readonly CoffeeShop: "coffee_shop";
    readonly Coinbase: "coinbase";
    readonly Collections: "collections";
    readonly CollegesAndUniversities: "colleges_and_universities";
    readonly CombatSports: "combat_sports";
    readonly CommercialRealEstate: "commercial_real_estate";
    readonly Community: "community";
    readonly ComputerTraining: "computer_training";
    readonly Computers: "computers";
    readonly ComputersAndElectronics: "computers_and_electronics";
    readonly ComputersAndOfficeMachines: "computers_and_office_machines";
    readonly Construction: "construction";
    readonly ConstructionSupplies: "construction_supplies";
    readonly Contractors: "contractors";
    readonly ConvenienceStores: "convenience_stores";
    readonly CorporateHousing: "corporate_housing";
    readonly CorrectionalInstitutions: "correctional_institutions";
    readonly Costumes: "costumes";
    readonly CottagesAndCabins: "cottages_and_cabins";
    readonly CounselingAndTherapy: "counseling_and_therapy";
    readonly Courts: "courts";
    readonly CreativeServices: "creative_services";
    readonly Credit: "credit";
    readonly CreditCard: "credit_card";
    readonly CreditCounselingAndBankruptcyServices: "credit_counseling_and_bankruptcy_services";
    readonly CreditReporting: "credit_reporting";
    readonly CropProduction: "crop_production";
    readonly Cruises: "cruises";
    readonly Cuban: "cuban";
    readonly CulinaryLessonsAndSchools: "culinary_lessons_and_schools";
    readonly CupcakeShop: "cupcake_shop";
    readonly Cycling: "cycling";
    readonly Dance: "dance";
    readonly DanceAndMusic: "dance_and_music";
    readonly DanceHallsAndSaloons: "dance_halls_and_saloons";
    readonly DanceSchools: "dance_schools";
    readonly DatingAndEscort: "dating_and_escort";
    readonly DayCareAndPreschools: "day_care_and_preschools";
    readonly Debit: "debit";
    readonly Delis: "delis";
    readonly Dentists: "dentists";
    readonly DepartmentStores: "department_stores";
    readonly Deposit: "deposit";
    readonly Dermatologists: "dermatologists";
    readonly Dessert: "dessert";
    readonly Digit: "digit";
    readonly DigitalPurchase: "digital_purchase";
    readonly Diners: "diners";
    readonly Dining: "dining";
    readonly DirectMailAndEmailMarketingServices: "direct_mail_and_email_marketing_services";
    readonly DisabledPersonsServices: "disabled_persons_services";
    readonly DiscountStores: "discount_stores";
    readonly Distillery: "distillery";
    readonly Distribution: "distribution";
    readonly DoctorsAndDentists: "doctors_and_dentists";
    readonly Donuts: "donuts";
    readonly DoorsAndWindows: "doors_and_windows";
    readonly DrivingSchools: "driving_schools";
    readonly DrugAndAlcoholServices: "drug_and_alcohol_services";
    readonly Dwolla: "dwolla";
    readonly EarNoseAndThroat: "ear_nose_and_throat";
    readonly EasternEuropean: "eastern_european";
    readonly Education: "education";
    readonly Electric: "electric";
    readonly ElectricalEquipment: "electrical_equipment";
    readonly ElectricalEquipmentAndComponents: "electrical_equipment_and_components";
    readonly Electricians: "electricians";
    readonly Electronics: "electronics";
    readonly EmergencyServices: "emergency_services";
    readonly EmploymentAgencies: "employment_agencies";
    readonly Engineering: "engineering";
    readonly Entertainment: "entertainment";
    readonly Environmental: "environmental";
    readonly Equestrian: "equestrian";
    readonly EquipmentRental: "equipment_rental";
    readonly Ethiopian: "ethiopian";
    readonly EventsAndEventPlanning: "events_and_event_planning";
    readonly ExcessActivity: "excess_activity";
    readonly Expense: "expense";
    readonly FacilitiesAndNursingHomes: "facilities_and_nursing_homes";
    readonly FairgroundsAndRodeos: "fairgrounds_and_rodeos";
    readonly Falafel: "falafel";
    readonly FamilyMedicine: "family_medicine";
    readonly FarmersMarkets: "farmers_markets";
    readonly FastFood: "fast_food";
    readonly Fee: "fee";
    readonly FencesFireplacesAndGarageDoors: "fences_fireplaces_and_garage_doors";
    readonly Filipino: "filipino";
    readonly Financial: "financial";
    readonly FinancialPlanningAndInvestments: "financial_planning_and_investments";
    readonly FireStations: "fire_stations";
    readonly FishAndChips: "fish_and_chips";
    readonly FleaMarkets: "flea_markets";
    readonly Florists: "florists";
    readonly FoodAndBeverage: "food_and_beverage";
    readonly FoodAndBeverageStore: "food_and_beverage_store";
    readonly FoodAndDrink: "food_and_drink";
    readonly FoodTruck: "food_truck";
    readonly Football: "football";
    readonly ForeignTransaction: "foreign_transaction";
    readonly Forestry: "forestry";
    readonly Forests: "forests";
    readonly FraternitiesAndSororities: "fraternities_and_sororities";
    readonly FraudDispute: "fraud_dispute";
    readonly French: "french";
    readonly Fuel: "fuel";
    readonly FuelDealer: "fuel_dealer";
    readonly FundRaising: "fund_raising";
    readonly FuneralServices: "funeral_services";
    readonly FurnitureAndFixtures: "furniture_and_fixtures";
    readonly FurnitureAndHomeDecor: "furniture_and_home_decor";
    readonly Gardens: "gardens";
    readonly Gas: "gas";
    readonly GasStations: "gas_stations";
    readonly Gastroenterologists: "gastroenterologists";
    readonly Gastropub: "gastropub";
    readonly General: "general";
    readonly GeneralSurgery: "general_surgery";
    readonly Geological: "geological";
    readonly German: "german";
    readonly GiftAndNovelty: "gift_and_novelty";
    readonly Gifts: "gifts";
    readonly GlassProducts: "glass_products";
    readonly GlassesAndOptometrist: "glasses_and_optometrist";
    readonly GoCarts: "go_carts";
    readonly Golf: "golf";
    readonly GoodsAndMerchandise: "goods_and_merchandise";
    readonly GovernmentDepartmentsAndAgencies: "government_departments_and_agencies";
    readonly GovernmentLobbyists: "government_lobbyists";
    readonly Greek: "greek";
    readonly GunRanges: "gun_ranges";
    readonly Gym: "gym";
    readonly Gymnastics: "gymnastics";
    readonly GymsAndFitnessCenters: "gyms_and_fitness_centers";
    readonly HairRemoval: "hair_removal";
    readonly HairSalonsAndBarbers: "hair_salons_and_barbers";
    readonly HardwareAndServices: "hardware_and_services";
    readonly HardwareStore: "hardware_store";
    readonly HealthFood: "health_food";
    readonly Healthcare: "healthcare";
    readonly HealthcareServices: "healthcare_services";
    readonly HeatingVentilatingAndAirConditioning: "heating_ventilating_and_air_conditioning";
    readonly Heliports: "heliports";
    readonly Hiking: "hiking";
    readonly HistoricSites: "historic_sites";
    readonly HobbyAndCollectibles: "hobby_and_collectibles";
    readonly Hockey: "hockey";
    readonly HoldingAndInvestmentOffices: "holding_and_investment_offices";
    readonly Home: "home";
    readonly HomeAppliances: "home_appliances";
    readonly HomeImprovement: "home_improvement";
    readonly HomeInspectionServices: "home_inspection_services";
    readonly HookahLounges: "hookah_lounges";
    readonly HospitalsClinicsAndMedicalCenters: "hospitals_clinics_and_medical_centers";
    readonly Hostels: "hostels";
    readonly HotAirBalloons: "hot_air_balloons";
    readonly HotelLounge: "hotel_lounge";
    readonly HotelsAndMotels: "hotels_and_motels";
    readonly Household: "household";
    readonly Housewares: "housewares";
    readonly HousingAssistanceAndShelters: "housing_assistance_and_shelters";
    readonly HumanResources: "human_resources";
    readonly HuntingAndFishing: "hunting_and_fishing";
    readonly IceCream: "ice_cream";
    readonly Immigration: "immigration";
    readonly ImportAndExport: "import_and_export";
    readonly Income: "income";
    readonly Indian: "indian";
    readonly Indonesian: "indonesian";
    readonly IndustrialMachineryAndEquipment: "industrial_machinery_and_equipment";
    readonly IndustrialMachineryAndVehicles: "industrial_machinery_and_vehicles";
    readonly IndustrialSupplies: "industrial_supplies";
    readonly Infrastructure: "infrastructure";
    readonly InsufficientFunds: "insufficient_funds";
    readonly Insurance: "insurance";
    readonly Interest: "interest";
    readonly InterestCharged: "interest_charged";
    readonly InterestEarned: "interest_earned";
    readonly InteriorDesign: "interior_design";
    readonly InternalAccountTransfer: "internal_account_transfer";
    readonly InternalMedicine: "internal_medicine";
    readonly Internet: "internet";
    readonly InternetCafes: "internet_cafes";
    readonly InternetServices: "internet_services";
    readonly Investment: "investment";
    readonly Italian: "italian";
    readonly Japanese: "japanese";
    readonly JazzAndBluesCafe: "jazz_and_blues_cafe";
    readonly JewelryAndWatches: "jewelry_and_watches";
    readonly JuiceBar: "juice_bar";
    readonly Karaoke: "karaoke";
    readonly KeepTheChangeSavingsProgram: "keep_the_change_savings_program";
    readonly Kids: "kids";
    readonly KidsStore: "kids'_store";
    readonly Kitchens: "kitchens";
    readonly Korean: "korean";
    readonly Lakes: "lakes";
    readonly Landmarks: "landmarks";
    readonly LandscapingAndGardeners: "landscaping_and_gardeners";
    readonly LatePayment: "late_payment";
    readonly LatinAmerican: "latin_american";
    readonly LaundryAndGarmentServices: "laundry_and_garment_services";
    readonly LawEnforcement: "law_enforcement";
    readonly LawnAndGarden: "lawn_and_garden";
    readonly Leather: "leather";
    readonly LeatherGoods: "leather_goods";
    readonly Legal: "legal";
    readonly Libraries: "libraries";
    readonly LightingFixtures: "lighting_fixtures";
    readonly LimosAndChauffeurs: "limos_and_chauffeurs";
    readonly LingerieStore: "lingerie_store";
    readonly LivestockAndAnimals: "livestock_and_animals";
    readonly Loan: "loan";
    readonly LoansAndMortgages: "loans_and_mortgages";
    readonly LodgesAndVacationRentals: "lodges_and_vacation_rentals";
    readonly Lodging: "lodging";
    readonly LoggingAndSawmills: "logging_and_sawmills";
    readonly Luggage: "luggage";
    readonly MachineShops: "machine_shops";
    readonly MaintenanceAndRepair: "maintenance_and_repair";
    readonly Management: "management";
    readonly ManicuresAndPedicures: "manicures_and_pedicures";
    readonly Manufacturing: "manufacturing";
    readonly MarineSupplies: "marine_supplies";
    readonly MarketResearchAndConsulting: "market_research_and_consulting";
    readonly Masonry: "masonry";
    readonly MassageClinicsAndTherapists: "massage_clinics_and_therapists";
    readonly Media: "media";
    readonly MediaProduction: "media_production";
    readonly MedicalSuppliesAndLabs: "medical_supplies_and_labs";
    readonly Mediterranean: "mediterranean";
    readonly MensStore: "men's_store";
    readonly MentalHealth: "mental_health";
    readonly Metal: "metal";
    readonly MetalProducts: "metal_products";
    readonly Metals: "metals";
    readonly Mexican: "mexican";
    readonly MiddleEastern: "middle_eastern";
    readonly Military: "military";
    readonly MiniatureGolf: "miniature_golf";
    readonly Mining: "mining";
    readonly MobileHomes: "mobile_homes";
    readonly MobilePhones: "mobile_phones";
    readonly MonumentsAndMemorials: "monuments_and_memorials";
    readonly Moroccan: "moroccan";
    readonly Mosques: "mosques";
    readonly MotorcycleMopedAndScooterRepair: "motorcycle_moped_and_scooter_repair";
    readonly MotorcyclesMopedsAndScooters: "motorcycles_mopeds_and_scooters";
    readonly Mountains: "mountains";
    readonly Movers: "movers";
    readonly MovieTheatres: "movie_theatres";
    readonly Museums: "museums";
    readonly MusicVideoAndDvd: "music_video_and_dvd";
    readonly MusicAndShowVenues: "music_and_show_venues";
    readonly MusicalInstruments: "musical_instruments";
    readonly NaturalParks: "natural_parks";
    readonly Neurologists: "neurologists";
    readonly NewsReporting: "news_reporting";
    readonly Newsstands: "newsstands";
    readonly NightClubs: "night_clubs";
    readonly Nightlife: "nightlife";
    readonly NonMetallicMinerals: "non-metallic_minerals";
    readonly NonmetallicMineralProducts: "nonmetallic_mineral_products";
    readonly Nurses: "nurses";
    readonly Nutritionists: "nutritionists";
    readonly ObstetriciansAndGynecologists: "obstetricians_and_gynecologists";
    readonly Office: "office";
    readonly OfficeSupplies: "office_supplies";
    readonly OilAndGas: "oil_and_gas";
    readonly Oncologists: "oncologists";
    readonly OnlineAdvertising: "online_advertising";
    readonly OnlineSubscriptions: "online_subscriptions";
    readonly Ophthalmologists: "ophthalmologists";
    readonly Optometrists: "optometrists";
    readonly OrganizationsAndAssociations: "organizations_and_associations";
    readonly OrthopedicSurgeons: "orthopedic_surgeons";
    readonly Other: "other";
    readonly Outdoors: "outdoors";
    readonly Outlet: "outlet";
    readonly Overdraft: "overdraft";
    readonly Packaging: "packaging";
    readonly Paintball: "paintball";
    readonly Painting: "painting";
    readonly Paper: "paper";
    readonly PaperProducts: "paper_products";
    readonly Parking: "parking";
    readonly Parks: "parks";
    readonly PartyCenters: "party_centers";
    readonly Pathologists: "pathologists";
    readonly PawnShops: "pawn_shops";
    readonly Payment: "payment";
    readonly Paypal: "paypal";
    readonly Payroll: "payroll";
    readonly Pediatricians: "pediatricians";
    readonly PersonalCare: "personal_care";
    readonly PersonalTrainers: "personal_trainers";
    readonly PestControl: "pest_control";
    readonly Pet: "pet";
    readonly Petroleum: "petroleum";
    readonly Pets: "pets";
    readonly Pharmacies: "pharmacies";
    readonly Phone: "phone";
    readonly Photography: "photography";
    readonly PhotosAndFrames: "photos_and_frames";
    readonly PhysicalTherapy: "physical_therapy";
    readonly Physicians: "physicians";
    readonly PicnicAreas: "picnic_areas";
    readonly Piercing: "piercing";
    readonly Pizza: "pizza";
    readonly Plaid: "plaid";
    readonly PlasticProducts: "plastic_products";
    readonly PlasticSurgeons: "plastic_surgeons";
    readonly Plastics: "plastics";
    readonly Playgrounds: "playgrounds";
    readonly Plumbing: "plumbing";
    readonly Podiatrists: "podiatrists";
    readonly PoliceStations: "police_stations";
    readonly PoolsAndSpas: "pools_and_spas";
    readonly Portuguese: "portuguese";
    readonly PostOffices: "post_offices";
    readonly PregnancyAndSexualHealth: "pregnancy_and_sexual_health";
    readonly PrimaryAndSecondarySchools: "primary_and_secondary_schools";
    readonly PrintTvRadioAndOutdoorAdvertising: "print_tv_radio_and_outdoor_advertising";
    readonly PrintingAndPublishing: "printing_and_publishing";
    readonly PromotionalItems: "promotional_items";
    readonly PropertyManagement: "property_management";
    readonly Psychiatrists: "psychiatrists";
    readonly PsychicsAndAstrologers: "psychics_and_astrologers";
    readonly Psychologists: "psychologists";
    readonly PublicAndSocialServices: "public_and_social_services";
    readonly PublicRelations: "public_relations";
    readonly PublicTransportationServices: "public_transportation_services";
    readonly RaceTracks: "race_tracks";
    readonly RacquetSports: "racquet_sports";
    readonly Racquetball: "racquetball";
    readonly Radiologists: "radiologists";
    readonly Rafting: "rafting";
    readonly Rail: "rail";
    readonly RealEstate: "real_estate";
    readonly RealEstateAgents: "real_estate_agents";
    readonly RealEstateAppraiser: "real_estate_appraiser";
    readonly RealEstateDevelopmentAndTitleCompanies: "real_estate_development_and_title_companies";
    readonly Recreation: "recreation";
    readonly RecreationCenters: "recreation_centers";
    readonly RefrigerationAndIce: "refrigeration_and_ice";
    readonly Refund: "refund";
    readonly Religious: "religious";
    readonly RenewableEnergy: "renewable_energy";
    readonly Rent: "rent";
    readonly RepairServices: "repair_services";
    readonly Research: "research";
    readonly Resorts: "resorts";
    readonly Respiratory: "respiratory";
    readonly Restaurants: "restaurants";
    readonly Retirement: "retirement";
    readonly RideShare: "ride_share";
    readonly Rivers: "rivers";
    readonly RockClimbing: "rock_climbing";
    readonly Roofers: "roofers";
    readonly Rubber: "rubber";
    readonly RubberProducts: "rubber_products";
    readonly Running: "running";
    readonly RvsAndMotorHomes: "rvs_and_motor_homes";
    readonly SalvageYards: "salvage_yards";
    readonly SanitaryAndWasteManagement: "sanitary_and_waste_management";
    readonly SaveAsYouGo: "save_as_you_go";
    readonly Scandinavian: "scandinavian";
    readonly Scientific: "scientific";
    readonly ScubaDiving: "scuba_diving";
    readonly Seafood: "seafood";
    readonly SearchEngineMarketingAndOptimization: "search_engine_marketing_and_optimization";
    readonly SecurityAndSafety: "security_and_safety";
    readonly SeniorCitizenServices: "senior_citizen_services";
    readonly Service: "service";
    readonly ServiceInstruments: "service_instruments";
    readonly Services: "services";
    readonly Shipping: "shipping";
    readonly ShippingAndFreight: "shipping_and_freight";
    readonly ShoeStore: "shoe_store";
    readonly Shopping: "shopping";
    readonly ShoppingCentersAndMalls: "shopping_centers_and_malls";
    readonly Shops: "shops";
    readonly Skating: "skating";
    readonly SkinCare: "skin_care";
    readonly Skydiving: "skydiving";
    readonly SnowSports: "snow_sports";
    readonly Soccer: "soccer";
    readonly SocialClubs: "social_clubs";
    readonly Software: "software";
    readonly SoftwareDevelopment: "software_development";
    readonly Spanish: "spanish";
    readonly Spas: "spas";
    readonly Specialty: "specialty";
    readonly Sport: "sport";
    readonly SportingGoods: "sporting_goods";
    readonly SportsAndRecreationCamps: "sports_and_recreation_camps";
    readonly SportsBar: "sports_bar";
    readonly SportsClubs: "sports_clubs";
    readonly SportsVenues: "sports_venues";
    readonly Square: "square";
    readonly SquareCash: "square_cash";
    readonly StadiumsAndArenas: "stadiums_and_arenas";
    readonly Steakhouses: "steakhouses";
    readonly StockBrokers: "stock_brokers";
    readonly Storage: "storage";
    readonly StripClub: "strip_club";
    readonly StudentAidAndGrants: "student_aid_and_grants";
    readonly Subscription: "subscription";
    readonly SupermarketsAndGroceries: "supermarkets_and_groceries";
    readonly Sushi: "sushi";
    readonly Swimming: "swimming";
    readonly SwimmingPoolMaintenanceAndServices: "swimming_pool_maintenance_and_services";
    readonly Swimwear: "swimwear";
    readonly Swiss: "swiss";
    readonly SymphonyAndOpera: "symphony_and_opera";
    readonly Synagogues: "synagogues";
    readonly Tailors: "tailors";
    readonly TanningSalons: "tanning_salons";
    readonly Tattooing: "tattooing";
    readonly Tax: "tax";
    readonly Taxes: "taxes";
    readonly Taxi: "taxi";
    readonly TelecommunicationServices: "telecommunication_services";
    readonly Television: "television";
    readonly Temple: "temple";
    readonly Tennis: "tennis";
    readonly Textiles: "textiles";
    readonly Thai: "thai";
    readonly TheatricalProductions: "theatrical_productions";
    readonly ThirdParty: "third_party";
    readonly Tobacco: "tobacco";
    readonly TollsAndFees: "tolls_and_fees";
    readonly TouristInformationAndServices: "tourist_information_and_services";
    readonly Towing: "towing";
    readonly Toys: "toys";
    readonly Transfer: "transfer";
    readonly TransfersAndAdjustments: "transfers_and_adjustments";
    readonly Transport: "transport";
    readonly Transportation: "transportation";
    readonly TransportationCenters: "transportation_centers";
    readonly TransportationEquipment: "transportation_equipment";
    readonly Travel: "travel";
    readonly TravelAndTransportation: "travel_and_transportation";
    readonly TravelAgentsAndTourOperators: "travel_agents_and_tour_operators";
    readonly TreeService: "tree_service";
    readonly Turkish: "turkish";
    readonly TutoringAndEducationalServices: "tutoring_and_educational_services";
    readonly Upholstery: "upholstery";
    readonly Urologists: "urologists";
    readonly UsedCarDealers: "used_car_dealers";
    readonly Utilities: "utilities";
    readonly VeganAndVegetarian: "vegan_and_vegetarian";
    readonly Venmo: "venmo";
    readonly Veterinarians: "veterinarians";
    readonly VideoGames: "video_games";
    readonly VintageAndThrift: "vintage_and_thrift";
    readonly VocationalSchools: "vocational_schools";
    readonly WarehousesAndWholesaleStores: "warehouses_and_wholesale_stores";
    readonly Water: "water";
    readonly WaterAndWasteManagement: "water_and_waste_management";
    readonly WaterSports: "water_sports";
    readonly WebDesignAndDevelopment: "web_design_and_development";
    readonly WeddingAndBridal: "wedding_and_bridal";
    readonly Welding: "welding";
    readonly Wholesale: "wholesale";
    readonly WineBar: "wine_bar";
    readonly Winery: "winery";
    readonly Wire: "wire";
    readonly WireTransfer: "wire_transfer";
    readonly Withdrawal: "withdrawal";
    readonly WomensStore: "women's_store";
    readonly WoodProducts: "wood_products";
    readonly WritingCopywritingAndTechnicalWriting: "writing_copywriting_and_technical_writing";
    readonly YogaAndPilates: "yoga_and_pilates";
    readonly YouthOrganizations: "youth_organizations";
    readonly Zoo: "zoo";
};
export type TransactionCategoryEnum = typeof TransactionCategoryEnum[keyof typeof TransactionCategoryEnum];
export declare const TransactionStatusEnum: {
    readonly Pending: "pending";
    readonly Posted: "posted";
};
export type TransactionStatusEnum = typeof TransactionStatusEnum[keyof typeof TransactionStatusEnum];
export declare const TransactionTypeEnum: {
    readonly Ach: "ach";
    readonly Adjustment: "adjustment";
    readonly Atm: "atm";
    readonly BankCharge: "bank_charge";
    readonly BillPayment: "bill_payment";
    readonly CardPayment: "card_payment";
    readonly Cash: "cash";
    readonly Cashback: "cashback";
    readonly Charge: "charge";
    readonly Cheque: "cheque";
    readonly Credit: "credit";
    readonly Debit: "debit";
    readonly Deposit: "deposit";
    readonly DigitalPayment: "digital_payment";
    readonly DirectDebit: "direct_debit";
    readonly Fee: "fee";
    readonly InStore: "in_store";
    readonly Interest: "interest";
    readonly Online: "online";
    readonly Other: "other";
    readonly Payment: "payment";
    readonly Purchase: "purchase";
    readonly StandingOrder: "standing_order";
    readonly Transaction: "transaction";
    readonly Transfer: "transfer";
    readonly Wire: "wire";
    readonly Withdrawal: "withdrawal";
    readonly Minus: "-";
};
export type TransactionTypeEnum = typeof TransactionTypeEnum[keyof typeof TransactionTypeEnum];
/**
 *
 * @export
 * @interface TransactionCategory
 */
export interface TransactionCategory {
    /**
     *
     * @type {TransactionCategoryPrimary}
     * @memberof TransactionCategory
     */
    'primary': TransactionCategoryPrimary;
    /**
     *
     * @type {TransactionCategoryDetailed}
     * @memberof TransactionCategory
     */
    'detailed': TransactionCategoryDetailed;
}
/**
 * Detailed transaction category
 * @export
 * @enum {string}
 */
export declare const TransactionCategoryDetailed: {
    readonly AutoAndTransport: "auto_and_transport";
    readonly BillsAndUtilities: "bills_and_utilities";
    readonly BusinessServices: "business_services";
    readonly Education: "education";
    readonly Entertainment: "entertainment";
    readonly FeesAndCharges: "fees_and_charges";
    readonly Financial: "financial";
    readonly FoodAndDining: "food_and_dining";
    readonly GiftsAndDonations: "gifts_and_donations";
    readonly HealthAndFitness: "health_and_fitness";
    readonly Home: "home";
    readonly Income: "income";
    readonly Investments: "investments";
    readonly Kids: "kids";
    readonly PersonalCare: "personal_care";
    readonly Pets: "pets";
    readonly Shopping: "shopping";
    readonly Taxes: "taxes";
    readonly Transfer: "transfer";
    readonly Travel: "travel";
    readonly AutoInsurance: "auto_insurance";
    readonly AutoPayment: "auto_payment";
    readonly Gas: "gas";
    readonly Parking: "parking";
    readonly PublicTransportation: "public_transportation";
    readonly ServiceAndParts: "service_and_parts";
    readonly DomainNames: "domain_names";
    readonly FraudProtection: "fraud_protection";
    readonly HomePhone: "home_phone";
    readonly Hosting: "hosting";
    readonly Internet: "internet";
    readonly MobilePhone: "mobile_phone";
    readonly Television: "television";
    readonly Utilities: "utilities";
    readonly Advertising: "advertising";
    readonly Legal: "legal";
    readonly OfficeSupplies: "office_supplies";
    readonly Printing: "printing";
    readonly Shipping: "shipping";
    readonly BooksAndSupplies: "books_and_supplies";
    readonly StudentLoan: "student_loan";
    readonly Tuition: "tuition";
    readonly Amusement: "amusement";
    readonly Arts: "arts";
    readonly MoviesAndDvds: "movies_and_dvds";
    readonly Music: "music";
    readonly NewspapersAndMagazines: "newspapers_and_magazines";
    readonly AtmFee: "atm_fee";
    readonly BankingFee: "banking_fee";
    readonly FinanceCharge: "finance_charge";
    readonly LateFee: "late_fee";
    readonly ServiceFee: "service_fee";
    readonly TradeCommissions: "trade_commissions";
    readonly FinancialAdvisor: "financial_advisor";
    readonly LifeInsurance: "life_insurance";
    readonly AlcoholAndBars: "alcohol_and_bars";
    readonly CoffeeShops: "coffee_shops";
    readonly FastFood: "fast_food";
    readonly Groceries: "groceries";
    readonly Restaurants: "restaurants";
    readonly Charity: "charity";
    readonly Gift: "gift";
    readonly Dentist: "dentist";
    readonly Doctor: "doctor";
    readonly Eyecare: "eyecare";
    readonly Gym: "gym";
    readonly HealthInsurance: "health_insurance";
    readonly Pharmacy: "pharmacy";
    readonly Sports: "sports";
    readonly Furnishings: "furnishings";
    readonly HomeImprovement: "home_improvement";
    readonly HomeInsurance: "home_insurance";
    readonly HomeServices: "home_services";
    readonly HomeSupplies: "home_supplies";
    readonly LawnAndGarden: "lawn_and_garden";
    readonly MortgageAndRent: "mortgage_and_rent";
    readonly Bonus: "bonus";
    readonly InterestIncome: "interest_income";
    readonly Paycheck: "paycheck";
    readonly Reimbursement: "reimbursement";
    readonly RentalIncome: "rental_income";
    readonly ReturnedPurchase: "returned_purchase";
    readonly Buy: "buy";
    readonly Deposit: "deposit";
    readonly DividendAndCapGains: "dividend_and_cap_gains";
    readonly Sell: "sell";
    readonly Withdrawal: "withdrawal";
    readonly Allowance: "allowance";
    readonly BabySupplies: "baby_supplies";
    readonly BabysitterAndDaycare: "babysitter_and_daycare";
    readonly ChildSupport: "child_support";
    readonly KidsActivities: "kids_activities";
    readonly Toys: "toys";
    readonly Hair: "hair";
    readonly Laundry: "laundry";
    readonly SpaAndMassage: "spa_and_massage";
    readonly PetFoodAndSupplies: "pet_food_and_supplies";
    readonly PetGrooming: "pet_grooming";
    readonly Veterinary: "veterinary";
    readonly Books: "books";
    readonly Clothing: "clothing";
    readonly Hobbies: "hobbies";
    readonly SportingGoods: "sporting_goods";
    readonly FederalTax: "federal_tax";
    readonly LocalTax: "local_tax";
    readonly PropertyTax: "property_tax";
    readonly SalesTax: "sales_tax";
    readonly StateTax: "state_tax";
    readonly CreditCardPayment: "credit_card_payment";
    readonly TransferForCashSpending: "transfer_for_cash_spending";
    readonly MortgagePayment: "mortgage_payment";
    readonly AirTravel: "air_travel";
    readonly Hotel: "hotel";
    readonly RentalCarAndTaxi: "rental_car_and_taxi";
    readonly Vacation: "vacation";
    readonly Cash: "cash";
    readonly Check: "check";
    readonly Uncategorized: "uncategorized";
};
export type TransactionCategoryDetailed = typeof TransactionCategoryDetailed[keyof typeof TransactionCategoryDetailed];
/**
 * Primary transaction category
 * @export
 * @enum {string}
 */
export declare const TransactionCategoryPrimary: {
    readonly AutoAndTransport: "auto_and_transport";
    readonly BillsAndUtilities: "bills_and_utilities";
    readonly BusinessServices: "business_services";
    readonly Education: "education";
    readonly Entertainment: "entertainment";
    readonly FeesAndCharges: "fees_and_charges";
    readonly Financial: "financial";
    readonly FoodAndDining: "food_and_dining";
    readonly GiftsAndDonations: "gifts_and_donations";
    readonly HealthAndFitness: "health_and_fitness";
    readonly Home: "home";
    readonly Income: "income";
    readonly Investments: "investments";
    readonly Kids: "kids";
    readonly PersonalCare: "personal_care";
    readonly Pets: "pets";
    readonly Shopping: "shopping";
    readonly Taxes: "taxes";
    readonly Transfer: "transfer";
    readonly Travel: "travel";
    readonly Uncategorized: "uncategorized";
};
export type TransactionCategoryPrimary = typeof TransactionCategoryPrimary[keyof typeof TransactionCategoryPrimary];
/**
 * Type of the transaction, ie loan
 * @export
 * @enum {string}
 */
export declare const TransactionEventType: {
    readonly Ach: "ach";
    readonly Adjustment: "adjustment";
    readonly Atm: "atm";
    readonly BankCharge: "bank_charge";
    readonly BillPayment: "bill_payment";
    readonly CardPayment: "card_payment";
    readonly Cash: "cash";
    readonly Cashback: "cashback";
    readonly Charge: "charge";
    readonly Cheque: "cheque";
    readonly Credit: "credit";
    readonly Debit: "debit";
    readonly Deposit: "deposit";
    readonly DigitalPayment: "digital_payment";
    readonly DirectDebit: "direct_debit";
    readonly Fee: "fee";
    readonly InStore: "in_store";
    readonly Interest: "interest";
    readonly Online: "online";
    readonly Other: "other";
    readonly Payment: "payment";
    readonly Purchase: "purchase";
    readonly StandingOrder: "standing_order";
    readonly Transaction: "transaction";
    readonly Transfer: "transfer";
    readonly Wire: "wire";
    readonly Withdrawal: "withdrawal";
};
export type TransactionEventType = typeof TransactionEventType[keyof typeof TransactionEventType];
/**
 *
 * @export
 * @interface TransactionMerchant
 */
export interface TransactionMerchant {
    /**
     * Merchant name
     * @type {string}
     * @memberof TransactionMerchant
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface TransactionToEnrich
 */
export interface TransactionToEnrich {
    /**
     * A unique ID for the transaction that to help you tie data back to your systems.
     * @type {string}
     * @memberof TransactionToEnrich
     */
    'id': string;
    /**
     * The name of the merchant if available or a description of the transaction.
     * @type {string}
     * @memberof TransactionToEnrich
     */
    'description': string;
    /**
     * The merchant category code.
     * @type {string}
     * @memberof TransactionToEnrich
     */
    'mcc'?: string;
    /**
     * The amount of the transaction in cents, in the currency of the account. Must be a positive value. Use the type field to indicate the direction.
     * @type {number}
     * @memberof TransactionToEnrich
     */
    'amount': number;
    /**
     * The direction of the transaction.
     * @type {string}
     * @memberof TransactionToEnrich
     */
    'direction': TransactionToEnrichDirectionEnum;
    /**
     *
     * @type {string}
     * @memberof TransactionToEnrich
     */
    'country_code'?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionToEnrich
     */
    'iso_currency_code'?: string;
    /**
     * The date the transaction was posted.
     * @type {string}
     * @memberof TransactionToEnrich
     */
    'date'?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionToEnrich
     */
    'owner_type'?: TransactionToEnrichOwnerTypeEnum;
}
export declare const TransactionToEnrichDirectionEnum: {
    readonly Incoming: "incoming";
    readonly Outgoing: "outgoing";
};
export type TransactionToEnrichDirectionEnum = typeof TransactionToEnrichDirectionEnum[keyof typeof TransactionToEnrichDirectionEnum];
export declare const TransactionToEnrichOwnerTypeEnum: {
    readonly Consumer: "consumer";
    readonly Business: "business";
};
export type TransactionToEnrichOwnerTypeEnum = typeof TransactionToEnrichOwnerTypeEnum[keyof typeof TransactionToEnrichOwnerTypeEnum];
/**
 *
 * @export
 * @interface UpdateConsumerRiskReportCustomizationRequest
 */
export interface UpdateConsumerRiskReportCustomizationRequest {
    /**
     *
     * @type {ConsumerRiskReportTimeFrame}
     * @memberof UpdateConsumerRiskReportCustomizationRequest
     */
    'timeframe'?: ConsumerRiskReportTimeFrame;
    /**
     * The minimum allowed limit, in cents.
     * @type {number}
     * @memberof UpdateConsumerRiskReportCustomizationRequest
     */
    'min_limit'?: number;
    /**
     * The maximum allowed limit, in cents.
     * @type {number}
     * @memberof UpdateConsumerRiskReportCustomizationRequest
     */
    'max_limit'?: number;
    /**
     * This parameter indicates the risk tolerance associated with spend limits. A high risk tolerance allow for higher limits, increasing both potential gains and losses. A Lower risk tolerance enforces strict limits, reducing the potential for loss but also limiting transaction volume for reliable users.
     * @type {number}
     * @memberof UpdateConsumerRiskReportCustomizationRequest
     */
    'risk_tolerance'?: number;
}
/**
 *
 * @export
 * @interface UpdateConsumerRiskReportCustomizationResponse
 */
export interface UpdateConsumerRiskReportCustomizationResponse {
    /**
     * The id of the updated customization.
     * @type {string}
     * @memberof UpdateConsumerRiskReportCustomizationResponse
     */
    'id': string;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof UpdateConsumerRiskReportCustomizationResponse
     */
    'request_id': string;
}
/**
 *
 * @export
 * @interface UpdateEntityRequest
 */
export interface UpdateEntityRequest {
    /**
     * Email of the entity
     * @type {string}
     * @memberof UpdateEntityRequest
     */
    'email'?: string;
    /**
     * These will force the user to connect through all of these aggregators
     * @type {Array<Aggregator>}
     * @memberof UpdateEntityRequest
     */
    'aggregators'?: Array<Aggregator>;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateEntityRequest
     */
    'institution_ids'?: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateEntityResponse
 */
export interface UpdateEntityResponse {
    /**
     * Id of the entity
     * @type {string}
     * @memberof UpdateEntityResponse
     */
    'id'?: string;
    /**
     * Email of the entity
     * @type {string}
     * @memberof UpdateEntityResponse
     */
    'email'?: string;
    /**
     * These will force the user to connect through all of these aggregators
     * @type {Array<Aggregator>}
     * @memberof UpdateEntityResponse
     */
    'aggregators'?: Array<Aggregator>;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateEntityResponse
     */
    'institution_ids'?: Array<string>;
    /**
     * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
     * @type {string}
     * @memberof UpdateEntityResponse
     */
    'request_id'?: string;
}
/**
 *
 * @export
 * @interface UpdatedBalanceEvent
 */
export interface UpdatedBalanceEvent {
    /**
     *
     * @type {string}
     * @memberof UpdatedBalanceEvent
     */
    'event_type': UpdatedBalanceEventEventTypeEnum;
    /**
     * The ISO-4217 currency code.
     * @type {string}
     * @memberof UpdatedBalanceEvent
     */
    'iso_currency_code': string;
    /**
     * Datetime that the balance is accurate for In ISO-8601 format
     * @type {string}
     * @memberof UpdatedBalanceEvent
     */
    'timestamp': string;
    /**
     * The current balance of the account factoring in pending transactions.
     * @type {number}
     * @memberof UpdatedBalanceEvent
     */
    'available'?: number;
    /**
     * The current balance of the account without factoring in pending transactions.
     * @type {number}
     * @memberof UpdatedBalanceEvent
     */
    'current'?: number;
}
export declare const UpdatedBalanceEventEventTypeEnum: {
    readonly UpdatedBalance: "updated_balance";
};
export type UpdatedBalanceEventEventTypeEnum = typeof UpdatedBalanceEventEventTypeEnum[keyof typeof UpdatedBalanceEventEventTypeEnum];
/**
 *
 * @export
 * @interface WebhookEvent
 */
export interface WebhookEvent {
    /**
     *
     * @type {WebhookType}
     * @memberof WebhookEvent
     */
    'type': WebhookType;
    /**
     * Financial connection id associated with the webhook
     * @type {string}
     * @memberof WebhookEvent
     */
    'financial_connection_id': string;
    /**
     *
     * @type {string}
     * @memberof WebhookEvent
     */
    'environment': WebhookEventEnvironmentEnum;
    /**
     *
     * @type {WebhookSource}
     * @memberof WebhookEvent
     */
    'source': WebhookSource;
    /**
     * Aggregator verification data needed to verify the webhook
     * @type {string}
     * @memberof WebhookEvent
     */
    'verification_token'?: string;
    /**
     * Exists for assets.report_ready webhooks
     * @type {string}
     * @memberof WebhookEvent
     */
    'asset_report_id'?: string;
    /**
     * Exists for transactions.updates webhooks. Indicates if historical transaction information (up to 24 months) is ready to be queried.
     * @type {boolean}
     * @memberof WebhookEvent
     */
    'historical_transactions_available'?: boolean;
    /**
     * Exists for transactions.updates webhooks. Currently only supported by Plaid.
     * @type {Array<string>}
     * @memberof WebhookEvent
     */
    'removed_transaction_ids'?: Array<string>;
    /**
     *
     * @type {any}
     * @memberof WebhookEvent
     */
    'remote_data': any;
}
export declare const WebhookEventEnvironmentEnum: {
    readonly Sandbox: "sandbox";
    readonly Production: "production";
};
export type WebhookEventEnvironmentEnum = typeof WebhookEventEnvironmentEnum[keyof typeof WebhookEventEnvironmentEnum];
/**
 *
 * @export
 * @enum {string}
 */
export declare const WebhookSource: {
    readonly Plaid: "plaid";
    readonly Teller: "teller";
    readonly Mx: "mx";
    readonly Fuse: "fuse";
    readonly Snaptrade: "snaptrade";
    readonly Mono: "mono";
    readonly Truelayer: "truelayer";
    readonly Finverse: "finverse";
};
export type WebhookSource = typeof WebhookSource[keyof typeof WebhookSource];
/**
 *
 * @export
 * @enum {string}
 */
export declare const WebhookType: {
    readonly FinancialConnectionSyncData: "financial_connection.sync_data";
    readonly FinancialConnectionDisconnected: "financial_connection.disconnected";
    readonly FinancialConnectionFinished: "financial_connection.finished";
    readonly TransactionsUpdates: "transactions.updates";
    readonly AssetsReportReady: "assets.report_ready";
};
export type WebhookType = typeof WebhookType[keyof typeof WebhookType];
/**
 * FuseApi - axios parameter creator
 * @export
 */
export declare const FuseApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} accountId
     * @param {AddAccountEventsRequest} [addAccountEventsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAccountEvents: (accountId: string, addAccountEventsRequest?: AddAccountEventsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {CreateAssetReportRequest} [createAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAssetReport: (createAssetReportRequest?: CreateAssetReportRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Starts the background process that will calculate the consumer risk report depending on the customization passed in.
     * @param {CreateConsumerRiskReportRequest} [createConsumerRiskReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConsumerRiskReport: (createConsumerRiskReportRequest?: CreateConsumerRiskReportRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {CreateConsumerRiskReportCustomizationRequest} [createConsumerRiskReportCustomizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConsumerRiskReportCustomization: (createConsumerRiskReportCustomizationRequest?: CreateConsumerRiskReportCustomizationRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a link token to start the process of a user connecting to a specific financial institution.
     * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLinkToken: (createLinkTokenRequest?: CreateLinkTokenRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
     * @param {CreateSessionRequest} [createSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSession: (createSessionRequest?: CreateSessionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a financial connection
     * @param {string} financialConnectionIdToDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFinancialConnection: (financialConnectionIdToDelete: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {EnrichTransactionsRequest} [enrichTransactionsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrichTransactions: (fuseClientId: string, fuseApiKey: string, enrichTransactionsRequest?: EnrichTransactionsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * API to exchange a public token for an access token and financial connection id
     * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exchangeFinancialConnectionsPublicToken: (exchangeFinancialConnectionsPublicTokenRequest?: ExchangeFinancialConnectionsPublicTokenRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {GetAssetReportRequest} [getAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssetReport: (getAssetReportRequest?: GetAssetReportRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get consumer risk report
     * @param {string} consumerRiskReportId
     * @param {boolean} [recalculate] An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerRiskReport: (consumerRiskReportId: string, recalculate?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the \'create session\' endpoint
     * @summary Get entity
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntity: (entityId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get finance score
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinanceScore: (accountId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get financial connection details
     * @param {string} financialConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnection: (financialConnectionId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get account details
     * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsAccountDetails: (getFinancialConnectionsAccountDetailsRequest: GetFinancialConnectionsAccountDetailsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
     * @param {GetFinancialConnectionsAccountStatementRequest} [getFinancialConnectionsAccountStatementRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsAccountStatement: (getFinancialConnectionsAccountStatementRequest?: GetFinancialConnectionsAccountStatementRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get accounts
     * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsAccounts: (getFinancialConnectionsAccountsRequest: GetFinancialConnectionsAccountsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get balances
     * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsBalances: (getFinancialConnectionsBalanceRequest: GetFinancialConnectionsBalanceRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get account owners
     * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsOwners: (getFinancialConnectionsOwnersRequest: GetFinancialConnectionsOwnersRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get transactions
     * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsTransactions: (getFinancialConnectionsTransactionsRequest: GetFinancialConnectionsTransactionsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Receive metadata for a financial institution
     * @summary Get a financial institution
     * @param {string} institutionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialInstitution: (institutionId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get investment holdings
     * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvestmentHoldings: (getInvestmentHoldingsRequest: GetInvestmentHoldingsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get investment transactions
     * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvestmentTransactions: (getInvestmentTransactionsRequest: GetInvestmentTransactionsRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
     * @summary Migrate financial connection
     * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    migrateFinancialConnection: (migrateFinancialConnectionsTokenRequest?: MigrateFinancialConnectionsTokenRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshAssetReport: (refreshAssetReportRequest?: RefreshAssetReportRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
     * @summary Sync financial connections data
     * @param {string} fuseVerification
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syncFinancialConnectionsData: (fuseVerification: string, body: object, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update consumer risk report customization
     * @param {string} consumerRiskReportCustomizationId
     * @param {UpdateConsumerRiskReportCustomizationRequest} [updateConsumerRiskReportCustomizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConsumerRiskReportCustomization: (consumerRiskReportCustomizationId: string, updateConsumerRiskReportCustomizationRequest?: UpdateConsumerRiskReportCustomizationRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get liabilities
     * @param {GetLiabilitiesRequest} getLiabilitiesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1FinancialConnectionsLiabilitiesPost: (getLiabilitiesRequest: GetLiabilitiesRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FuseApi - functional programming interface
 * @export
 */
export declare const FuseApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} accountId
     * @param {AddAccountEventsRequest} [addAccountEventsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAccountEvents(accountId: string, addAccountEventsRequest?: AddAccountEventsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddAccountEventsResponse>>;
    /**
     * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {CreateAssetReportRequest} [createAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAssetReport(createAssetReportRequest?: CreateAssetReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAssetReportResponse>>;
    /**
     * Starts the background process that will calculate the consumer risk report depending on the customization passed in.
     * @param {CreateConsumerRiskReportRequest} [createConsumerRiskReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConsumerRiskReport(createConsumerRiskReportRequest?: CreateConsumerRiskReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConsumerRiskReportResponse>>;
    /**
     *
     * @param {CreateConsumerRiskReportCustomizationRequest} [createConsumerRiskReportCustomizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConsumerRiskReportCustomization(createConsumerRiskReportCustomizationRequest?: CreateConsumerRiskReportCustomizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConsumerRiskReportCustomizationResponse>>;
    /**
     * Create a link token to start the process of a user connecting to a specific financial institution.
     * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLinkToken(createLinkTokenRequest?: CreateLinkTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLinkTokenResponse>>;
    /**
     * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
     * @param {CreateSessionRequest} [createSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSession(createSessionRequest?: CreateSessionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSessionResponse>>;
    /**
     *
     * @summary Delete a financial connection
     * @param {string} financialConnectionIdToDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFinancialConnection(financialConnectionIdToDelete: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFinancialConnectionResponse>>;
    /**
     *
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {EnrichTransactionsRequest} [enrichTransactionsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrichTransactions(fuseClientId: string, fuseApiKey: string, enrichTransactionsRequest?: EnrichTransactionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnrichTransactionsResponse>>;
    /**
     * API to exchange a public token for an access token and financial connection id
     * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest?: ExchangeFinancialConnectionsPublicTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeFinancialConnectionsPublicTokenResponse>>;
    /**
     * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {GetAssetReportRequest} [getAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssetReport(getAssetReportRequest?: GetAssetReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshAssetReportResponse>>;
    /**
     *
     * @summary Get consumer risk report
     * @param {string} consumerRiskReportId
     * @param {boolean} [recalculate] An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerRiskReport(consumerRiskReportId: string, recalculate?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetConsumerRiskReportResponse>>;
    /**
     * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the \'create session\' endpoint
     * @summary Get entity
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntity(entityId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEntityResponse>>;
    /**
     *
     * @summary Get finance score
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinanceScore(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinanceScoreResponse>>;
    /**
     *
     * @summary Get financial connection details
     * @param {string} financialConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnection(financialConnectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialConnectionResponse>>;
    /**
     *
     * @summary Get account details
     * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest: GetFinancialConnectionsAccountDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialConnectionsAccountDetailsResponse>>;
    /**
     * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
     * @param {GetFinancialConnectionsAccountStatementRequest} [getFinancialConnectionsAccountStatementRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest?: GetFinancialConnectionsAccountStatementRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialConnectionsAccountStatementResponse>>;
    /**
     *
     * @summary Get accounts
     * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest: GetFinancialConnectionsAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialConnectionsAccountsResponse>>;
    /**
     *
     * @summary Get balances
     * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest: GetFinancialConnectionsBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialConnectionsBalanceResponse>>;
    /**
     *
     * @summary Get account owners
     * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest: GetFinancialConnectionsOwnersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialConnectionsOwnersResponse>>;
    /**
     *
     * @summary Get transactions
     * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest: GetFinancialConnectionsTransactionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialConnectionsTransactionsResponse>>;
    /**
     * Receive metadata for a financial institution
     * @summary Get a financial institution
     * @param {string} institutionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialInstitution(institutionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFinancialInstitutionResponse>>;
    /**
     *
     * @summary Get investment holdings
     * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvestmentHoldings(getInvestmentHoldingsRequest: GetInvestmentHoldingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInvestmentHoldingsResponse>>;
    /**
     *
     * @summary Get investment transactions
     * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvestmentTransactions(getInvestmentTransactionsRequest: GetInvestmentTransactionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInvestmentTransactionsResponse>>;
    /**
     * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
     * @summary Migrate financial connection
     * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    migrateFinancialConnection(migrateFinancialConnectionsTokenRequest?: MigrateFinancialConnectionsTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MigrateFinancialConnectionsTokenResponse>>;
    /**
     * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshAssetReport(refreshAssetReportRequest?: RefreshAssetReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetReportResponse>>;
    /**
     * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
     * @summary Sync financial connections data
     * @param {string} fuseVerification
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syncFinancialConnectionsData(fuseVerification: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncFinancialConnectionsDataResponse>>;
    /**
     *
     * @summary Update consumer risk report customization
     * @param {string} consumerRiskReportCustomizationId
     * @param {UpdateConsumerRiskReportCustomizationRequest} [updateConsumerRiskReportCustomizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConsumerRiskReportCustomization(consumerRiskReportCustomizationId: string, updateConsumerRiskReportCustomizationRequest?: UpdateConsumerRiskReportCustomizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateConsumerRiskReportCustomizationResponse>>;
    /**
     *
     * @summary Get liabilities
     * @param {GetLiabilitiesRequest} getLiabilitiesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest: GetLiabilitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLiabilitiesResponse>>;
};
/**
 * FuseApi - factory interface
 * @export
 */
export declare const FuseApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} accountId
     * @param {AddAccountEventsRequest} [addAccountEventsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAccountEvents(accountId: string, addAccountEventsRequest?: AddAccountEventsRequest, options?: any): AxiosPromise<AddAccountEventsResponse>;
    /**
     * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {CreateAssetReportRequest} [createAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAssetReport(createAssetReportRequest?: CreateAssetReportRequest, options?: any): AxiosPromise<CreateAssetReportResponse>;
    /**
     * Starts the background process that will calculate the consumer risk report depending on the customization passed in.
     * @param {CreateConsumerRiskReportRequest} [createConsumerRiskReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConsumerRiskReport(createConsumerRiskReportRequest?: CreateConsumerRiskReportRequest, options?: any): AxiosPromise<CreateConsumerRiskReportResponse>;
    /**
     *
     * @param {CreateConsumerRiskReportCustomizationRequest} [createConsumerRiskReportCustomizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConsumerRiskReportCustomization(createConsumerRiskReportCustomizationRequest?: CreateConsumerRiskReportCustomizationRequest, options?: any): AxiosPromise<CreateConsumerRiskReportCustomizationResponse>;
    /**
     * Create a link token to start the process of a user connecting to a specific financial institution.
     * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLinkToken(createLinkTokenRequest?: CreateLinkTokenRequest, options?: any): AxiosPromise<CreateLinkTokenResponse>;
    /**
     * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
     * @param {CreateSessionRequest} [createSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSession(createSessionRequest?: CreateSessionRequest, options?: any): AxiosPromise<CreateSessionResponse>;
    /**
     *
     * @summary Delete a financial connection
     * @param {string} financialConnectionIdToDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFinancialConnection(financialConnectionIdToDelete: string, options?: any): AxiosPromise<DeleteFinancialConnectionResponse>;
    /**
     *
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {EnrichTransactionsRequest} [enrichTransactionsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrichTransactions(fuseClientId: string, fuseApiKey: string, enrichTransactionsRequest?: EnrichTransactionsRequest, options?: any): AxiosPromise<EnrichTransactionsResponse>;
    /**
     * API to exchange a public token for an access token and financial connection id
     * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest?: ExchangeFinancialConnectionsPublicTokenRequest, options?: any): AxiosPromise<ExchangeFinancialConnectionsPublicTokenResponse>;
    /**
     * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {GetAssetReportRequest} [getAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssetReport(getAssetReportRequest?: GetAssetReportRequest, options?: any): AxiosPromise<RefreshAssetReportResponse>;
    /**
     *
     * @summary Get consumer risk report
     * @param {string} consumerRiskReportId
     * @param {boolean} [recalculate] An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerRiskReport(consumerRiskReportId: string, recalculate?: boolean, options?: any): AxiosPromise<GetConsumerRiskReportResponse>;
    /**
     * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the \'create session\' endpoint
     * @summary Get entity
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntity(entityId: string, options?: any): AxiosPromise<GetEntityResponse>;
    /**
     *
     * @summary Get finance score
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinanceScore(accountId: string, options?: any): AxiosPromise<GetFinanceScoreResponse>;
    /**
     *
     * @summary Get financial connection details
     * @param {string} financialConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnection(financialConnectionId: string, options?: any): AxiosPromise<GetFinancialConnectionResponse>;
    /**
     *
     * @summary Get account details
     * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest: GetFinancialConnectionsAccountDetailsRequest, options?: any): AxiosPromise<GetFinancialConnectionsAccountDetailsResponse>;
    /**
     * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
     * @param {GetFinancialConnectionsAccountStatementRequest} [getFinancialConnectionsAccountStatementRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest?: GetFinancialConnectionsAccountStatementRequest, options?: any): AxiosPromise<GetFinancialConnectionsAccountStatementResponse>;
    /**
     *
     * @summary Get accounts
     * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest: GetFinancialConnectionsAccountsRequest, options?: any): AxiosPromise<GetFinancialConnectionsAccountsResponse>;
    /**
     *
     * @summary Get balances
     * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest: GetFinancialConnectionsBalanceRequest, options?: any): AxiosPromise<GetFinancialConnectionsBalanceResponse>;
    /**
     *
     * @summary Get account owners
     * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest: GetFinancialConnectionsOwnersRequest, options?: any): AxiosPromise<GetFinancialConnectionsOwnersResponse>;
    /**
     *
     * @summary Get transactions
     * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest: GetFinancialConnectionsTransactionsRequest, options?: any): AxiosPromise<GetFinancialConnectionsTransactionsResponse>;
    /**
     * Receive metadata for a financial institution
     * @summary Get a financial institution
     * @param {string} institutionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFinancialInstitution(institutionId: string, options?: any): AxiosPromise<GetFinancialInstitutionResponse>;
    /**
     *
     * @summary Get investment holdings
     * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvestmentHoldings(getInvestmentHoldingsRequest: GetInvestmentHoldingsRequest, options?: any): AxiosPromise<GetInvestmentHoldingsResponse>;
    /**
     *
     * @summary Get investment transactions
     * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvestmentTransactions(getInvestmentTransactionsRequest: GetInvestmentTransactionsRequest, options?: any): AxiosPromise<GetInvestmentTransactionsResponse>;
    /**
     * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
     * @summary Migrate financial connection
     * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    migrateFinancialConnection(migrateFinancialConnectionsTokenRequest?: MigrateFinancialConnectionsTokenRequest, options?: any): AxiosPromise<MigrateFinancialConnectionsTokenResponse>;
    /**
     * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshAssetReport(refreshAssetReportRequest?: RefreshAssetReportRequest, options?: any): AxiosPromise<AssetReportResponse>;
    /**
     * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
     * @summary Sync financial connections data
     * @param {string} fuseVerification
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syncFinancialConnectionsData(fuseVerification: string, body: object, options?: any): AxiosPromise<SyncFinancialConnectionsDataResponse>;
    /**
     *
     * @summary Update consumer risk report customization
     * @param {string} consumerRiskReportCustomizationId
     * @param {UpdateConsumerRiskReportCustomizationRequest} [updateConsumerRiskReportCustomizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConsumerRiskReportCustomization(consumerRiskReportCustomizationId: string, updateConsumerRiskReportCustomizationRequest?: UpdateConsumerRiskReportCustomizationRequest, options?: any): AxiosPromise<UpdateConsumerRiskReportCustomizationResponse>;
    /**
     *
     * @summary Get liabilities
     * @param {GetLiabilitiesRequest} getLiabilitiesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest: GetLiabilitiesRequest, options?: any): AxiosPromise<GetLiabilitiesResponse>;
};
/**
 * FuseApi - object-oriented interface
 * @export
 * @class FuseApi
 * @extends {BaseAPI}
 */
export declare class FuseApi extends BaseAPI {
    /**
     *
     * @param {string} accountId
     * @param {AddAccountEventsRequest} [addAccountEventsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    addAccountEvents(accountId: string, addAccountEventsRequest?: AddAccountEventsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AddAccountEventsResponse, any>>;
    /**
     * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {CreateAssetReportRequest} [createAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createAssetReport(createAssetReportRequest?: CreateAssetReportRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateAssetReportResponse, any>>;
    /**
     * Starts the background process that will calculate the consumer risk report depending on the customization passed in.
     * @param {CreateConsumerRiskReportRequest} [createConsumerRiskReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createConsumerRiskReport(createConsumerRiskReportRequest?: CreateConsumerRiskReportRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateConsumerRiskReportResponse, any>>;
    /**
     *
     * @param {CreateConsumerRiskReportCustomizationRequest} [createConsumerRiskReportCustomizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createConsumerRiskReportCustomization(createConsumerRiskReportCustomizationRequest?: CreateConsumerRiskReportCustomizationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateConsumerRiskReportCustomizationResponse, any>>;
    /**
     * Create a link token to start the process of a user connecting to a specific financial institution.
     * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createLinkToken(createLinkTokenRequest?: CreateLinkTokenRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateLinkTokenResponse, any>>;
    /**
     * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
     * @param {CreateSessionRequest} [createSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createSession(createSessionRequest?: CreateSessionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateSessionResponse, any>>;
    /**
     *
     * @summary Delete a financial connection
     * @param {string} financialConnectionIdToDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    deleteFinancialConnection(financialConnectionIdToDelete: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteFinancialConnectionResponse, any>>;
    /**
     *
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {EnrichTransactionsRequest} [enrichTransactionsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    enrichTransactions(fuseClientId: string, fuseApiKey: string, enrichTransactionsRequest?: EnrichTransactionsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EnrichTransactionsResponse, any>>;
    /**
     * API to exchange a public token for an access token and financial connection id
     * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest?: ExchangeFinancialConnectionsPublicTokenRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExchangeFinancialConnectionsPublicTokenResponse, any>>;
    /**
     * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {GetAssetReportRequest} [getAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getAssetReport(getAssetReportRequest?: GetAssetReportRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RefreshAssetReportResponse, any>>;
    /**
     *
     * @summary Get consumer risk report
     * @param {string} consumerRiskReportId
     * @param {boolean} [recalculate] An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getConsumerRiskReport(consumerRiskReportId: string, recalculate?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetConsumerRiskReportResponse, any>>;
    /**
     * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the \'create session\' endpoint
     * @summary Get entity
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getEntity(entityId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetEntityResponse, any>>;
    /**
     *
     * @summary Get finance score
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinanceScore(accountId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFinanceScoreResponse, any>>;
    /**
     *
     * @summary Get financial connection details
     * @param {string} financialConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnection(financialConnectionId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFinancialConnectionResponse, any>>;
    /**
     *
     * @summary Get account details
     * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest: GetFinancialConnectionsAccountDetailsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFinancialConnectionsAccountDetailsResponse, any>>;
    /**
     * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
     * @param {GetFinancialConnectionsAccountStatementRequest} [getFinancialConnectionsAccountStatementRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest?: GetFinancialConnectionsAccountStatementRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFinancialConnectionsAccountStatementResponse, any>>;
    /**
     *
     * @summary Get accounts
     * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest: GetFinancialConnectionsAccountsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFinancialConnectionsAccountsResponse, any>>;
    /**
     *
     * @summary Get balances
     * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest: GetFinancialConnectionsBalanceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFinancialConnectionsBalanceResponse, any>>;
    /**
     *
     * @summary Get account owners
     * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest: GetFinancialConnectionsOwnersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFinancialConnectionsOwnersResponse, any>>;
    /**
     *
     * @summary Get transactions
     * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest: GetFinancialConnectionsTransactionsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFinancialConnectionsTransactionsResponse, any>>;
    /**
     * Receive metadata for a financial institution
     * @summary Get a financial institution
     * @param {string} institutionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialInstitution(institutionId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFinancialInstitutionResponse, any>>;
    /**
     *
     * @summary Get investment holdings
     * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getInvestmentHoldings(getInvestmentHoldingsRequest: GetInvestmentHoldingsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetInvestmentHoldingsResponse, any>>;
    /**
     *
     * @summary Get investment transactions
     * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getInvestmentTransactions(getInvestmentTransactionsRequest: GetInvestmentTransactionsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetInvestmentTransactionsResponse, any>>;
    /**
     * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
     * @summary Migrate financial connection
     * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    migrateFinancialConnection(migrateFinancialConnectionsTokenRequest?: MigrateFinancialConnectionsTokenRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MigrateFinancialConnectionsTokenResponse, any>>;
    /**
     * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    refreshAssetReport(refreshAssetReportRequest?: RefreshAssetReportRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AssetReportResponse, any>>;
    /**
     * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
     * @summary Sync financial connections data
     * @param {string} fuseVerification
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    syncFinancialConnectionsData(fuseVerification: string, body: object, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SyncFinancialConnectionsDataResponse, any>>;
    /**
     *
     * @summary Update consumer risk report customization
     * @param {string} consumerRiskReportCustomizationId
     * @param {UpdateConsumerRiskReportCustomizationRequest} [updateConsumerRiskReportCustomizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    updateConsumerRiskReportCustomization(consumerRiskReportCustomizationId: string, updateConsumerRiskReportCustomizationRequest?: UpdateConsumerRiskReportCustomizationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateConsumerRiskReportCustomizationResponse, any>>;
    /**
     *
     * @summary Get liabilities
     * @param {GetLiabilitiesRequest} getLiabilitiesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest: GetLiabilitiesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetLiabilitiesResponse, any>>;
}
/**
 * RiskReportApi - axios parameter creator
 * @export
 */
export declare const RiskReportApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete consumer risk report
     * @param {string} consumerRiskReportId
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConsumerRiskReport: (consumerRiskReportId: string, fuseClientId: string, fuseApiKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get consumer risk report customization
     * @param {string} consumerRiskReportCustomizationId
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerRiskReportCustomization: (consumerRiskReportCustomizationId: string, fuseClientId: string, fuseApiKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RiskReportApi - functional programming interface
 * @export
 */
export declare const RiskReportApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete consumer risk report
     * @param {string} consumerRiskReportId
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConsumerRiskReport(consumerRiskReportId: string, fuseClientId: string, fuseApiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteConsumerRiskReportResponse>>;
    /**
     *
     * @summary Get consumer risk report customization
     * @param {string} consumerRiskReportCustomizationId
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerRiskReportCustomization(consumerRiskReportCustomizationId: string, fuseClientId: string, fuseApiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetConsumerRiskReportCustomizationResponse>>;
};
/**
 * RiskReportApi - factory interface
 * @export
 */
export declare const RiskReportApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete consumer risk report
     * @param {string} consumerRiskReportId
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConsumerRiskReport(consumerRiskReportId: string, fuseClientId: string, fuseApiKey: string, options?: any): AxiosPromise<DeleteConsumerRiskReportResponse>;
    /**
     *
     * @summary Get consumer risk report customization
     * @param {string} consumerRiskReportCustomizationId
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerRiskReportCustomization(consumerRiskReportCustomizationId: string, fuseClientId: string, fuseApiKey: string, options?: any): AxiosPromise<GetConsumerRiskReportCustomizationResponse>;
};
/**
 * RiskReportApi - object-oriented interface
 * @export
 * @class RiskReportApi
 * @extends {BaseAPI}
 */
export declare class RiskReportApi extends BaseAPI {
    /**
     *
     * @summary Delete consumer risk report
     * @param {string} consumerRiskReportId
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiskReportApi
     */
    deleteConsumerRiskReport(consumerRiskReportId: string, fuseClientId: string, fuseApiKey: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteConsumerRiskReportResponse, any>>;
    /**
     *
     * @summary Get consumer risk report customization
     * @param {string} consumerRiskReportCustomizationId
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiskReportApi
     */
    getConsumerRiskReportCustomization(consumerRiskReportCustomizationId: string, fuseClientId: string, fuseApiKey: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetConsumerRiskReportCustomizationResponse, any>>;
}
