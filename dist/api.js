"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FuseApi = exports.FuseApiFactory = exports.FuseApiFp = exports.FuseApiAxiosParamCreator = exports.Product = exports.FuseApiWarningDataWarningsInnerSourceEnum = exports.FuseApiWarningSourceEnum = exports.FuseApiErrorSourceEnum = exports.FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum = exports.FinancialConnectionsOwnerEmailsInnerTypeEnum = exports.Aggregator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
exports.Aggregator = {
    Plaid: 'plaid',
    Teller: 'teller',
    Mx: 'mx',
    Finicity: 'finicity'
};
exports.FinancialConnectionsOwnerEmailsInnerTypeEnum = {
    Primary: 'primary',
    Secondary: 'secondary',
    Other: 'other'
};
exports.FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum = {
    Home: 'home',
    Work: 'work',
    Mobile: 'mobile'
};
exports.FuseApiErrorSourceEnum = {
    Internal: 'internal',
    Aggregator: 'aggregator'
};
exports.FuseApiWarningSourceEnum = {
    Internal: 'internal',
    Aggregator: 'aggregator'
};
exports.FuseApiWarningDataWarningsInnerSourceEnum = {
    Internal: 'internal',
    Aggregator: 'aggregator'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.Product = {
    AccountDetails: 'account_details',
    Balance: 'balance',
    Ownership: 'ownership',
    Transactions: 'transactions',
    Liabilities: 'liabilities',
    Investments: 'investments'
};
/**
 * FuseApi - axios parameter creator
 * @export
 */
const FuseApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this endpoint to generate an Asset Report for a user.
         * @param {CreateAssetReportRequest} [createAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetReport: (createAssetReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/asset_report/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createAssetReportRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create entity
         * @param {CreateEntityRequest} createEntityRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntity: (createEntityRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'createEntityRequest' is not null or undefined
            (0, common_1.assertParamExists)('createEntity', 'createEntityRequest', createEntityRequest);
            const localVarPath = `/v1/entities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createEntityRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a link token to start the process of a user connecting to a specific financial institution.
         * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLinkToken: (createLinkTokenRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/link/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createLinkTokenRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {CreateSessionRequest} [createSessionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: (createSessionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createSessionRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * API to exchange a public token for an access token and financial connection id
         * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeFinancialConnectionsPublicToken: (exchangeFinancialConnectionsPublicTokenRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/financial_connections/public_token/exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(exchangeFinancialConnectionsPublicTokenRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves the Asset Report in JSON format.
         * @param {GetAssetReportRequest} [getAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetReport: (getAssetReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/asset_report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getAssetReportRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get entity
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity: (entityId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'entityId' is not null or undefined
            (0, common_1.assertParamExists)('getEntity', 'entityId', entityId);
            const localVarPath = `/v1/entities/{entity_id}`
                .replace(`{${"entity_id"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get account details
         * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountDetails: (getFinancialConnectionsAccountDetailsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getFinancialConnectionsAccountDetailsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsAccountDetails', 'getFinancialConnectionsAccountDetailsRequest', getFinancialConnectionsAccountDetailsRequest);
            const localVarPath = `/v1/financial_connections/accounts/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsAccountDetailsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get accounts
         * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccounts: (getFinancialConnectionsAccountsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getFinancialConnectionsAccountsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsAccounts', 'getFinancialConnectionsAccountsRequest', getFinancialConnectionsAccountsRequest);
            const localVarPath = `/v1/financial_connections/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsAccountsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get balances
         * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsBalances: (getFinancialConnectionsBalanceRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getFinancialConnectionsBalanceRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsBalances', 'getFinancialConnectionsBalanceRequest', getFinancialConnectionsBalanceRequest);
            const localVarPath = `/v1/financial_connections/balances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsBalanceRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get account owners
         * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsOwners: (getFinancialConnectionsOwnersRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getFinancialConnectionsOwnersRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsOwners', 'getFinancialConnectionsOwnersRequest', getFinancialConnectionsOwnersRequest);
            const localVarPath = `/v1/financial_connections/owners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsOwnersRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get transactions
         * @param {GetTransactionsRequest} getTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsTransactions: (getTransactionsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getTransactionsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsTransactions', 'getTransactionsRequest', getTransactionsRequest);
            const localVarPath = `/v1/financial_connections/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getTransactionsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get investment holdings
         * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentHoldings: (getInvestmentHoldingsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getInvestmentHoldingsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getInvestmentHoldings', 'getInvestmentHoldingsRequest', getInvestmentHoldingsRequest);
            const localVarPath = `/v1/financial_connections/investments/holdings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getInvestmentHoldingsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get investment transactions
         * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentTransactions: (getInvestmentTransactionsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getInvestmentTransactionsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getInvestmentTransactions', 'getInvestmentTransactionsRequest', getInvestmentTransactionsRequest);
            const localVarPath = `/v1/financial_connections/investments/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getInvestmentTransactionsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Refreshes the Asset Report in JSON format.
         * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAssetReport: (refreshAssetReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/asset_report/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(refreshAssetReportRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Call this endpoint upon receiving a SYNC_REQUIRED webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsData: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('syncFinancialConnectionsData', 'body', body);
            const localVarPath = `/v1/financial_connections/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Sync transactions
         * @param {SyncTransactionsRequest} syncTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsTransactions: (syncTransactionsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'syncTransactionsRequest' is not null or undefined
            (0, common_1.assertParamExists)('syncFinancialConnectionsTransactions', 'syncTransactionsRequest', syncTransactionsRequest);
            const localVarPath = `/v1/financial_connections/transactions/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(syncTransactionsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update entity
         * @param {string} entityIdToUpdate
         * @param {UpdateEntityRequest} updateEntityRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntity: (entityIdToUpdate, updateEntityRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'entityIdToUpdate' is not null or undefined
            (0, common_1.assertParamExists)('updateEntity', 'entityIdToUpdate', entityIdToUpdate);
            // verify required parameter 'updateEntityRequest' is not null or undefined
            (0, common_1.assertParamExists)('updateEntity', 'updateEntityRequest', updateEntityRequest);
            const localVarPath = `/v1/entities/{entity_id_to_update}`
                .replace(`{${"entity_id_to_update"}}`, encodeURIComponent(String(entityIdToUpdate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateEntityRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get liabilities
         * @param {GetLiabilitiesRequest} getLiabilitiesRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FinancialConnectionsLiabilitiesPost: (getLiabilitiesRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getLiabilitiesRequest' is not null or undefined
            (0, common_1.assertParamExists)('v1FinancialConnectionsLiabilitiesPost', 'getLiabilitiesRequest', getLiabilitiesRequest);
            const localVarPath = `/v1/financial_connections/liabilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getLiabilitiesRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.FuseApiAxiosParamCreator = FuseApiAxiosParamCreator;
/**
 * FuseApi - functional programming interface
 * @export
 */
const FuseApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FuseApiAxiosParamCreator)(configuration);
    return {
        /**
         * Use this endpoint to generate an Asset Report for a user.
         * @param {CreateAssetReportRequest} [createAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetReport(createAssetReportRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssetReport(createAssetReportRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Create entity
         * @param {CreateEntityRequest} createEntityRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntity(createEntityRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createEntity(createEntityRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a link token to start the process of a user connecting to a specific financial institution.
         * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLinkToken(createLinkTokenRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createLinkToken(createLinkTokenRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {CreateSessionRequest} [createSessionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(createSessionRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createSession(createSessionRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * API to exchange a public token for an access token and financial connection id
         * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieves the Asset Report in JSON format.
         * @param {GetAssetReportRequest} [getAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetReport(getAssetReportRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAssetReport(getAssetReportRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get entity
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity(entityId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getEntity(entityId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get account details
         * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get accounts
         * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get balances
         * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get account owners
         * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get transactions
         * @param {GetTransactionsRequest} getTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsTransactions(getTransactionsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsTransactions(getTransactionsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get investment holdings
         * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentHoldings(getInvestmentHoldingsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getInvestmentHoldings(getInvestmentHoldingsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get investment transactions
         * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentTransactions(getInvestmentTransactionsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getInvestmentTransactions(getInvestmentTransactionsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Refreshes the Asset Report in JSON format.
         * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAssetReport(refreshAssetReportRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.refreshAssetReport(refreshAssetReportRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Call this endpoint upon receiving a SYNC_REQUIRED webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsData(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.syncFinancialConnectionsData(body, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Sync transactions
         * @param {SyncTransactionsRequest} syncTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsTransactions(syncTransactionsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.syncFinancialConnectionsTransactions(syncTransactionsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Update entity
         * @param {string} entityIdToUpdate
         * @param {UpdateEntityRequest} updateEntityRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntity(entityIdToUpdate, updateEntityRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateEntity(entityIdToUpdate, updateEntityRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get liabilities
         * @param {GetLiabilitiesRequest} getLiabilitiesRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.FuseApiFp = FuseApiFp;
/**
 * FuseApi - factory interface
 * @export
 */
const FuseApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FuseApiFp)(configuration);
    return {
        /**
         * Use this endpoint to generate an Asset Report for a user.
         * @param {CreateAssetReportRequest} [createAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetReport(createAssetReportRequest, options) {
            return localVarFp.createAssetReport(createAssetReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create entity
         * @param {CreateEntityRequest} createEntityRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntity(createEntityRequest, options) {
            return localVarFp.createEntity(createEntityRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a link token to start the process of a user connecting to a specific financial institution.
         * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLinkToken(createLinkTokenRequest, options) {
            return localVarFp.createLinkToken(createLinkTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {CreateSessionRequest} [createSessionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(createSessionRequest, options) {
            return localVarFp.createSession(createSessionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API to exchange a public token for an access token and financial connection id
         * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options) {
            return localVarFp.exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the Asset Report in JSON format.
         * @param {GetAssetReportRequest} [getAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetReport(getAssetReportRequest, options) {
            return localVarFp.getAssetReport(getAssetReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get entity
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity(entityId, options) {
            return localVarFp.getEntity(entityId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get account details
         * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options) {
            return localVarFp.getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get accounts
         * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options) {
            return localVarFp.getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get balances
         * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options) {
            return localVarFp.getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get account owners
         * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options) {
            return localVarFp.getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get transactions
         * @param {GetTransactionsRequest} getTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsTransactions(getTransactionsRequest, options) {
            return localVarFp.getFinancialConnectionsTransactions(getTransactionsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get investment holdings
         * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentHoldings(getInvestmentHoldingsRequest, options) {
            return localVarFp.getInvestmentHoldings(getInvestmentHoldingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get investment transactions
         * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentTransactions(getInvestmentTransactionsRequest, options) {
            return localVarFp.getInvestmentTransactions(getInvestmentTransactionsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Refreshes the Asset Report in JSON format.
         * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAssetReport(refreshAssetReportRequest, options) {
            return localVarFp.refreshAssetReport(refreshAssetReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Call this endpoint upon receiving a SYNC_REQUIRED webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsData(body, options) {
            return localVarFp.syncFinancialConnectionsData(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sync transactions
         * @param {SyncTransactionsRequest} syncTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsTransactions(syncTransactionsRequest, options) {
            return localVarFp.syncFinancialConnectionsTransactions(syncTransactionsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update entity
         * @param {string} entityIdToUpdate
         * @param {UpdateEntityRequest} updateEntityRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntity(entityIdToUpdate, updateEntityRequest, options) {
            return localVarFp.updateEntity(entityIdToUpdate, updateEntityRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get liabilities
         * @param {GetLiabilitiesRequest} getLiabilitiesRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options) {
            return localVarFp.v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FuseApiFactory = FuseApiFactory;
/**
 * FuseApi - object-oriented interface
 * @export
 * @class FuseApi
 * @extends {BaseAPI}
 */
class FuseApi extends base_1.BaseAPI {
    /**
     * Use this endpoint to generate an Asset Report for a user.
     * @param {CreateAssetReportRequest} [createAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createAssetReport(createAssetReportRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).createAssetReport(createAssetReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create entity
     * @param {CreateEntityRequest} createEntityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createEntity(createEntityRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).createEntity(createEntityRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a link token to start the process of a user connecting to a specific financial institution.
     * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createLinkToken(createLinkTokenRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).createLinkToken(createLinkTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
     * @param {CreateSessionRequest} [createSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createSession(createSessionRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).createSession(createSessionRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * API to exchange a public token for an access token and financial connection id
     * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the Asset Report in JSON format.
     * @param {GetAssetReportRequest} [getAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getAssetReport(getAssetReportRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getAssetReport(getAssetReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get entity
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getEntity(entityId, options) {
        return (0, exports.FuseApiFp)(this.configuration).getEntity(entityId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get account details
     * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get accounts
     * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get balances
     * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get account owners
     * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get transactions
     * @param {GetTransactionsRequest} getTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsTransactions(getTransactionsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsTransactions(getTransactionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get investment holdings
     * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getInvestmentHoldings(getInvestmentHoldingsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getInvestmentHoldings(getInvestmentHoldingsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get investment transactions
     * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getInvestmentTransactions(getInvestmentTransactionsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getInvestmentTransactions(getInvestmentTransactionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Refreshes the Asset Report in JSON format.
     * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    refreshAssetReport(refreshAssetReportRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).refreshAssetReport(refreshAssetReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Call this endpoint upon receiving a SYNC_REQUIRED webhook. This will keep the financial connections data up to date.
     * @summary Sync financial connections data
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    syncFinancialConnectionsData(body, options) {
        return (0, exports.FuseApiFp)(this.configuration).syncFinancialConnectionsData(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sync transactions
     * @param {SyncTransactionsRequest} syncTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    syncFinancialConnectionsTransactions(syncTransactionsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).syncFinancialConnectionsTransactions(syncTransactionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update entity
     * @param {string} entityIdToUpdate
     * @param {UpdateEntityRequest} updateEntityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    updateEntity(entityIdToUpdate, updateEntityRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).updateEntity(entityIdToUpdate, updateEntityRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get liabilities
     * @param {GetLiabilitiesRequest} getLiabilitiesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FuseApi = FuseApi;
