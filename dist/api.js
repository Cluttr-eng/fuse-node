"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RiskReportApiFactory = exports.RiskReportApiFp = exports.RiskReportApiAxiosParamCreator = exports.FuseApi = exports.FuseApiFactory = exports.FuseApiFp = exports.FuseApiAxiosParamCreator = exports.WebhookType = exports.WebhookSource = exports.WebhookEventEnvironmentEnum = exports.UpdatedBalanceEventEventTypeEnum = exports.TransactionToEnrichOwnerTypeEnum = exports.TransactionToEnrichDirectionEnum = exports.TransactionEventType = exports.TransactionCategoryPrimary = exports.TransactionCategoryDetailed = exports.TransactionTypeEnum = exports.TransactionStatusEnum = exports.TransactionCategoryEnum = exports.Product = exports.MigrateFinancialConnectionsTokenRequestAggregatorEnum = exports.InAppTransactionEventStatus = exports.InAppTransactionEventEventTypeEnum = exports.FuseApiWarningDataWarningsInnerSourceEnum = exports.FuseApiWarningSourceEnum = exports.FuseApiErrorType = exports.FuseApiErrorCode = exports.FuseApiErrorSourceEnum = exports.FinancialInstitutionLogoFormatEnum = exports.FinancialInstitutionLogoTypeEnum = exports.FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum = exports.FinancialConnectionsOwnerEmailsInnerTypeEnum = exports.FinancialConnectionsInvestmentTransactionSubtype = exports.FinancialConnectionsInvestmentTransactionTypeEnum = exports.FinancialConnectionsInvestmentSecurityType = exports.FinancialConnectionDetailsConnectionStatusEnum = exports.ExternalTransactionEventStatus = exports.ExternalTransactionEventTransactionOwnerTypeEnum = exports.ExternalTransactionEventEventTypeEnum = exports.CreateLinkTokenRequestTellerConfigAccountFilterDepositoryOneOfSubtypesEnum = exports.CreateLinkTokenRequestTellerConfigAccountFilterCreditOneOfSubtypesEnum = exports.CreateLinkTokenRequestTellerConfigSelectAccountEnum = exports.CreateLinkTokenRequestSnaptradeConfigConnectionTypeEnum = exports.CountryCode = exports.ConsumerRiskReportTimeFrame = exports.AssetReportTransactionStatusEnum = exports.AssetReportTransactionCategoryEnum = exports.Aggregator = exports.AccountType = exports.AccountSubtype = void 0;
exports.RiskReportApi = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * The account\'s subtype
 * @export
 * @enum {string}
 */
exports.AccountSubtype = {
    Checking: 'checking',
    Savings: 'savings',
    CheckingOrSavings: 'checking_or_savings',
    BusinessCheckingOrSavings: 'business_checking_or_savings',
    BusinessSavings: 'business_savings',
    MoneyMarket: 'money_market',
    CertificateOfDeposit: 'certificate_of_deposit',
    Treasury: 'treasury',
    CreditCard: 'credit_card',
    DebitCard: 'debit_card',
    Bonds: 'bonds',
    Hsa: 'hsa',
    Paypal: 'paypal',
    Prepaid: 'prepaid',
    CashManagement: 'cash_management',
    Ebt: 'ebt',
    Auto: 'auto',
    Business: 'business',
    Commercial: 'commercial',
    Construction: 'construction',
    Consumer: 'consumer',
    HomeEquity: 'home_equity',
    Foreign: 'foreign',
    Loan: 'loan',
    Mortgage: 'mortgage',
    Overdraft: 'overdraft',
    LineOfCredit: 'line_of_credit',
    Student: 'student',
    _529: '529',
    _401A: '401_a',
    _401K: '401_k',
    _403B: '403_b',
    _457B: '457_b',
    Funds: 'funds',
    Brokerage: 'brokerage',
    Securities: 'securities',
    Stocks: 'stocks',
    CashIsa: 'cash_isa',
    CryptoExchange: 'crypto_exchange',
    EducationSavingAccount: 'education_saving_account',
    FixedAnnuity: 'fixed_annuity',
    Gic: 'gic',
    HealthReimbursementArrangement: 'health_reimbursement_arrangement',
    Ira: 'ira',
    Isa: 'isa',
    Keogh: 'keogh',
    Lif: 'lif',
    LifeInsurance: 'life_insurance',
    Lira: 'lira',
    Lrif: 'lrif',
    Lrsp: 'lrsp',
    MutualFund: 'mutual_fund',
    NonCustodialWallet: 'non_custodial_wallet',
    NonTaxableBrokerageAccount: 'non_taxable_brokerage_account',
    OtherAnnuity: 'other_annuity',
    OtherInsurance: 'other_insurance',
    Pension: 'pension',
    Prif: 'prif',
    ProfitSharingPlan: 'profit_sharing_plan',
    Qshr: 'qshr',
    Rdsp: 'rdsp',
    Resp: 'resp',
    Retirement: 'retirement',
    Rlif: 'rlif',
    RothIra: 'roth_ira',
    Roth401K: 'roth_401_k',
    Rrif: 'rrif',
    Rrsp: 'rrsp',
    Sarsep: 'sarsep',
    SepIra: 'sep_ira',
    SimpleIra: 'simple_ira',
    Sipp: 'sipp',
    StockPlan: 'stock_plan',
    Tfsa: 'tfsa',
    Trust: 'trust',
    Ugma: 'ugma',
    Utma: 'utma',
    VariableAnnuity: 'variable_annuity',
    SmallBusiness: 'small_business',
    Personal: 'personal',
    PersonalWithCollateral: 'personal_with_collateral',
    _457: '457',
    RolloverIra: 'rollover_ira',
    Taxable: 'taxable',
    NonTaxable: 'non_taxable',
    EmployeeStockOwnershipPlan: 'employee_stock_ownership_plan',
    Individual: 'individual',
    CashManagementAccount: 'cash_management_account',
    EmployeeStockPurchasePlan: 'employee_stock_purchase_plan',
    RegisteredEducationSavingsPlan: 'registered_education_savings_plan',
    FixedAnnuityTraditionalIra: 'fixed_annuity_traditional_ira',
    InheritedTraditionalIra: 'inherited_traditional_ira',
    FixedAnnuityRothIra: 'fixed_annuity_roth_ira',
    VariableAnnuityRothIra: 'variable_annuity_roth_ira',
    InheritedRothIra: 'inherited_roth_ira',
    AdvisoryAccount: 'advisory_account',
    BrokerageMargin: 'brokerage_margin',
    CharitableGiftAccount: 'charitable_gift_account',
    ChurchAccount: 'church_account',
    Conservatorship: 'conservatorship',
    Custodial: 'custodial',
    DefinedBenefitPlan: 'defined_benefit_plan',
    DefinedContributionPlan: 'defined_contribution_plan',
    Educational: 'educational',
    Estate: 'estate',
    Executor: 'executor',
    GroupRetirementSavingsPlan: 'group_retirement_savings_plan',
    GuaranteedInvestmentCertificate: 'guaranteed_investment_certificate',
    IndexedAnnuity: 'indexed_annuity',
    InvestmentClub: 'investment_club',
    IrrevocableTrust: 'irrevocable_trust',
    JointTenantsByEntirety: 'joint_tenants_by_entirety',
    JointTenantsCommunityProperty: 'joint_tenants_community_property',
    JointTenantsInCommon: 'joint_tenants_in_common',
    JointTenantsWithRightsOfSurvivorship: 'joint_tenants_with_rights_of_survivorship',
    KeoughPlan: 'keough_plan',
    LivingTrust: 'living_trust',
    LockedInRetirementAccount: 'locked_in_retirement_account',
    LockedInRetirementInvestmentFund: 'locked_in_retirement_investment_fund',
    LockedInRetirementSavingsAccount: 'locked_in_retirement_savings_account',
    MoneyPurchasePlan: 'money_purchase_plan',
    Partnership: 'partnership',
    _409A: '409_a',
    Rpp: 'rpp',
    RevocableTrust: 'revocable_trust',
    RothConversion: 'roth_conversion',
    SoleProprietorship: 'sole_proprietorship',
    SpousalIra: 'spousal_ira',
    SpousalRothIra: 'spousal_roth_ira',
    TestamentaryTrust: 'testamentary_trust',
    ThriftSavingsPlan: 'thrift_savings_plan',
    InheritedAnnuity: 'inherited_annuity',
    CorporateAccount: 'corporate_account',
    LimitedLiabilityAccount: 'limited_liability_account',
    Boat: 'boat',
    Powersports: 'powersports',
    Rv: 'rv',
    Heloc: 'heloc',
    VehicleInsurance: 'vehicle_insurance',
    Disability: 'disability',
    Health: 'health',
    LongTermCare: 'long_term_care',
    PropertyAndCasualty: 'property_and_casualty',
    UniversalLife: 'universal_life',
    TermLife: 'term_life',
    WholeLife: 'whole_life',
    AccidentalDeathAndDismemberment: 'accidental_death_and_dismemberment',
    VariableUniversalLife: 'variable_universal_life',
    Revolving: 'revolving',
    Other: 'other',
    TimeDeposit: 'time_deposit',
    Roth: 'roth',
    Military: 'military',
    Installment: 'installment',
    InstitutionalTrust: 'institutional_trust',
    HomeLineOfCredit: 'home_line_of_credit',
    Guardian: 'guardian',
    CommercialLineOfCredit: 'commercial_line_of_credit',
    Charge: 'charge',
    Coverdell: 'coverdell',
    Escrow: 'escrow',
    Minus: '-'
};
/**
 * The account\'s type. \'-\' means we were not able to map the upstream type.
 * @export
 * @enum {string}
 */
exports.AccountType = {
    Depository: 'depository',
    Credit: 'credit',
    Loan: 'loan',
    Investment: 'investment',
    Insurance: 'insurance',
    Property: 'property',
    Annuity: 'annuity',
    Other: 'other',
    Minus: '-'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.Aggregator = {
    Akoya: 'akoya',
    Basiq: 'basiq',
    Belvo: 'belvo',
    Finicity: 'finicity',
    Finverse: 'finverse',
    Flinks: 'flinks',
    Mono: 'mono',
    Mx: 'mx',
    Plaid: 'plaid',
    Saltedge: 'saltedge',
    Snaptrade: 'snaptrade',
    Sophtron: 'sophtron',
    Teller: 'teller',
    Truelayer: 'truelayer'
};
exports.AssetReportTransactionCategoryEnum = {
    AccessoriesStore: 'accessories_store',
    AccountingAndBookkeeping: 'accounting_and_bookkeeping',
    Ach: 'ach',
    Acorns: 'acorns',
    Acupuncture: 'acupuncture',
    Adult: 'adult',
    AdultEducation: 'adult_education',
    AdultEntertainment: 'adult_entertainment',
    Advertising: 'advertising',
    AdvertisingAgenciesAndMediaBuyers: 'advertising_agencies_and_media_buyers',
    AdvertisingAndMarketing: 'advertising_and_marketing',
    Afghan: 'afghan',
    African: 'african',
    AgricultureAndForestry: 'agriculture_and_forestry',
    AirlinesAndAviationServices: 'airlines_and_aviation_services',
    Airports: 'airports',
    AlcoholAndBars: 'alcohol_and_bars',
    AlternativeMedicine: 'alternative_medicine',
    American: 'american',
    Anesthesiologists: 'anesthesiologists',
    AnimalShelter: 'animal_shelter',
    Antiques: 'antiques',
    ApartmentsCondosAndHouses: 'apartments_condos_and_houses',
    ApparelAndFabricProducts: 'apparel_and_fabric_products',
    Aquarium: 'aquarium',
    ArcadesAndAmusementParks: 'arcades_and_amusement_parks',
    Architects: 'architects',
    ArtAndGraphicDesign: 'art_and_graphic_design',
    ArtDealersAndGalleries: 'art_dealers_and_galleries',
    ArtRestoration: 'art_restoration',
    ArtSchool: 'art_school',
    ArtsAndCrafts: 'arts_and_crafts',
    ArtsAndEntertainment: 'arts_and_entertainment',
    Asian: 'asian',
    AssistedLivingServices: 'assisted_living_services',
    AthleticFields: 'athletic_fields',
    Atm: 'atm',
    Atms: 'atms',
    Auctions: 'auctions',
    Audiovisual: 'audiovisual',
    Australian: 'australian',
    AutoOilAndLube: 'auto_oil_and_lube',
    AutoPayment: 'auto_payment',
    AutoSmogCheck: 'auto_smog_check',
    AutoTires: 'auto_tires',
    AutoTransmission: 'auto_transmission',
    AutomationAndControlSystems: 'automation_and_control_systems',
    Automotive: 'automotive',
    BagelShop: 'bagel_shop',
    Bakery: 'bakery',
    BankFees: 'bank_fees',
    BankingAndFinance: 'banking_and_finance',
    Bar: 'bar',
    Barbecue: 'barbecue',
    Baseball: 'baseball',
    Basketball: 'basketball',
    BattingCages: 'batting_cages',
    Beaches: 'beaches',
    BeautyProducts: 'beauty_products',
    BedAndBreakfasts: 'bed_and_breakfasts',
    BeerWineAndSpirits: 'beer_wine_and_spirits',
    Benefits: 'benefits',
    Betterment: 'betterment',
    Bicycles: 'bicycles',
    Bill: 'bill',
    BilliardsAndPool: 'billiards_and_pool',
    Billpay: 'billpay',
    BloodBanksAndCenters: 'blood_banks_and_centers',
    BoardingHouses: 'boarding_houses',
    Boat: 'boat',
    BoatDealers: 'boat_dealers',
    Boating: 'boating',
    BooksAndSupplies: 'books_and_supplies',
    Bookstores: 'bookstores',
    Boutique: 'boutique',
    Bowling: 'bowling',
    Brazilian: 'brazilian',
    BreakfastSpot: 'breakfast_spot',
    Breweries: 'breweries',
    BuildingAndLandSurveyors: 'building_and_land_surveyors',
    BuildingsAndStructures: 'buildings_and_structures',
    Burgers: 'burgers',
    Burrito: 'burrito',
    BusStations: 'bus_stations',
    Business: 'business',
    BusinessAndStrategyConsulting: 'business_and_strategy_consulting',
    BusinessBrokersAndFranchises: 'business_brokers_and_franchises',
    BusinessServices: 'business_services',
    Cable: 'cable',
    Cafe: 'cafe',
    Cajun: 'cajun',
    Cameras: 'cameras',
    CampgroundsAndRvParks: 'campgrounds_and_rv_parks',
    CanoesAndKayaks: 'canoes_and_kayaks',
    CarAndTruckRentals: 'car_and_truck_rentals',
    CarAppraisers: 'car_appraisers',
    CarDealersAndLeasing: 'car_dealers_and_leasing',
    CarPartsAndAccessories: 'car_parts_and_accessories',
    CarService: 'car_service',
    CarWashAndDetail: 'car_wash_and_detail',
    Cardiologists: 'cardiologists',
    CardsAndStationery: 'cards_and_stationery',
    Caretakers: 'caretakers',
    Caribbean: 'caribbean',
    Carpenters: 'carpenters',
    CarpetAndFlooring: 'carpet_and_flooring',
    CashAdvance: 'cash_advance',
    CasinosAndGaming: 'casinos_and_gaming',
    Catering: 'catering',
    Cemetery: 'cemetery',
    CharitiesAndNonProfits: 'charities_and_non-profits',
    Charity: 'charity',
    CharterBuses: 'charter_buses',
    ChaseQuickpay: 'chase_quickpay',
    Check: 'check',
    CheckCashing: 'check_cashing',
    ChemicalsAndGasses: 'chemicals_and_gasses',
    Childcare: 'childcare',
    Children: 'children',
    Chinese: 'chinese',
    Chiropractors: 'chiropractors',
    Churches: 'churches',
    CircusesAndCarnivals: 'circuses_and_carnivals',
    ClassicAndAntiqueCar: 'classic_and_antique_car',
    Cleaning: 'cleaning',
    Clothing: 'clothing',
    ClothingAndAccessories: 'clothing_and_accessories',
    Coal: 'coal',
    CoffeeShop: 'coffee_shop',
    Coinbase: 'coinbase',
    Collections: 'collections',
    CollegesAndUniversities: 'colleges_and_universities',
    CombatSports: 'combat_sports',
    CommercialRealEstate: 'commercial_real_estate',
    Community: 'community',
    ComputerTraining: 'computer_training',
    Computers: 'computers',
    ComputersAndElectronics: 'computers_and_electronics',
    ComputersAndOfficeMachines: 'computers_and_office_machines',
    Construction: 'construction',
    ConstructionSupplies: 'construction_supplies',
    Contractors: 'contractors',
    ConvenienceStores: 'convenience_stores',
    CorporateHousing: 'corporate_housing',
    CorrectionalInstitutions: 'correctional_institutions',
    Costumes: 'costumes',
    CottagesAndCabins: 'cottages_and_cabins',
    CounselingAndTherapy: 'counseling_and_therapy',
    Courts: 'courts',
    CreativeServices: 'creative_services',
    Credit: 'credit',
    CreditCard: 'credit_card',
    CreditCounselingAndBankruptcyServices: 'credit_counseling_and_bankruptcy_services',
    CreditReporting: 'credit_reporting',
    CropProduction: 'crop_production',
    Cruises: 'cruises',
    Cuban: 'cuban',
    CulinaryLessonsAndSchools: 'culinary_lessons_and_schools',
    CupcakeShop: 'cupcake_shop',
    Cycling: 'cycling',
    Dance: 'dance',
    DanceAndMusic: 'dance_and_music',
    DanceHallsAndSaloons: 'dance_halls_and_saloons',
    DanceSchools: 'dance_schools',
    DatingAndEscort: 'dating_and_escort',
    DayCareAndPreschools: 'day_care_and_preschools',
    Debit: 'debit',
    Delis: 'delis',
    Dentists: 'dentists',
    DepartmentStores: 'department_stores',
    Deposit: 'deposit',
    Dermatologists: 'dermatologists',
    Dessert: 'dessert',
    Digit: 'digit',
    DigitalPurchase: 'digital_purchase',
    Diners: 'diners',
    Dining: 'dining',
    DirectMailAndEmailMarketingServices: 'direct_mail_and_email_marketing_services',
    DisabledPersonsServices: 'disabled_persons_services',
    DiscountStores: 'discount_stores',
    Distillery: 'distillery',
    Distribution: 'distribution',
    DoctorsAndDentists: 'doctors_and_dentists',
    Donuts: 'donuts',
    DoorsAndWindows: 'doors_and_windows',
    DrivingSchools: 'driving_schools',
    DrugAndAlcoholServices: 'drug_and_alcohol_services',
    Dwolla: 'dwolla',
    EarNoseAndThroat: 'ear_nose_and_throat',
    EasternEuropean: 'eastern_european',
    Education: 'education',
    Electric: 'electric',
    ElectricalEquipment: 'electrical_equipment',
    ElectricalEquipmentAndComponents: 'electrical_equipment_and_components',
    Electricians: 'electricians',
    Electronics: 'electronics',
    EmergencyServices: 'emergency_services',
    EmploymentAgencies: 'employment_agencies',
    Engineering: 'engineering',
    Entertainment: 'entertainment',
    Environmental: 'environmental',
    Equestrian: 'equestrian',
    EquipmentRental: 'equipment_rental',
    Ethiopian: 'ethiopian',
    EventsAndEventPlanning: 'events_and_event_planning',
    ExcessActivity: 'excess_activity',
    Expense: 'expense',
    FacilitiesAndNursingHomes: 'facilities_and_nursing_homes',
    FairgroundsAndRodeos: 'fairgrounds_and_rodeos',
    Falafel: 'falafel',
    FamilyMedicine: 'family_medicine',
    FarmersMarkets: 'farmers_markets',
    FastFood: 'fast_food',
    Fee: 'fee',
    FencesFireplacesAndGarageDoors: 'fences_fireplaces_and_garage_doors',
    Filipino: 'filipino',
    Financial: 'financial',
    FinancialPlanningAndInvestments: 'financial_planning_and_investments',
    FireStations: 'fire_stations',
    FishAndChips: 'fish_and_chips',
    FleaMarkets: 'flea_markets',
    Florists: 'florists',
    FoodAndBeverage: 'food_and_beverage',
    FoodAndBeverageStore: 'food_and_beverage_store',
    FoodAndDrink: 'food_and_drink',
    FoodTruck: 'food_truck',
    Football: 'football',
    ForeignTransaction: 'foreign_transaction',
    Forestry: 'forestry',
    Forests: 'forests',
    FraternitiesAndSororities: 'fraternities_and_sororities',
    FraudDispute: 'fraud_dispute',
    French: 'french',
    Fuel: 'fuel',
    FuelDealer: 'fuel_dealer',
    FundRaising: 'fund_raising',
    FuneralServices: 'funeral_services',
    FurnitureAndFixtures: 'furniture_and_fixtures',
    FurnitureAndHomeDecor: 'furniture_and_home_decor',
    Gardens: 'gardens',
    Gas: 'gas',
    GasStations: 'gas_stations',
    Gastroenterologists: 'gastroenterologists',
    Gastropub: 'gastropub',
    General: 'general',
    GeneralSurgery: 'general_surgery',
    Geological: 'geological',
    German: 'german',
    GiftAndNovelty: 'gift_and_novelty',
    Gifts: 'gifts',
    GlassProducts: 'glass_products',
    GlassesAndOptometrist: 'glasses_and_optometrist',
    GoCarts: 'go_carts',
    Golf: 'golf',
    GoodsAndMerchandise: 'goods_and_merchandise',
    GovernmentDepartmentsAndAgencies: 'government_departments_and_agencies',
    GovernmentLobbyists: 'government_lobbyists',
    Greek: 'greek',
    GunRanges: 'gun_ranges',
    Gym: 'gym',
    Gymnastics: 'gymnastics',
    GymsAndFitnessCenters: 'gyms_and_fitness_centers',
    HairRemoval: 'hair_removal',
    HairSalonsAndBarbers: 'hair_salons_and_barbers',
    HardwareAndServices: 'hardware_and_services',
    HardwareStore: 'hardware_store',
    HealthFood: 'health_food',
    Healthcare: 'healthcare',
    HealthcareServices: 'healthcare_services',
    HeatingVentilatingAndAirConditioning: 'heating_ventilating_and_air_conditioning',
    Heliports: 'heliports',
    Hiking: 'hiking',
    HistoricSites: 'historic_sites',
    HobbyAndCollectibles: 'hobby_and_collectibles',
    Hockey: 'hockey',
    HoldingAndInvestmentOffices: 'holding_and_investment_offices',
    Home: 'home',
    HomeAppliances: 'home_appliances',
    HomeImprovement: 'home_improvement',
    HomeInspectionServices: 'home_inspection_services',
    HookahLounges: 'hookah_lounges',
    HospitalsClinicsAndMedicalCenters: 'hospitals_clinics_and_medical_centers',
    Hostels: 'hostels',
    HotAirBalloons: 'hot_air_balloons',
    HotelLounge: 'hotel_lounge',
    HotelsAndMotels: 'hotels_and_motels',
    Household: 'household',
    Housewares: 'housewares',
    HousingAssistanceAndShelters: 'housing_assistance_and_shelters',
    HumanResources: 'human_resources',
    HuntingAndFishing: 'hunting_and_fishing',
    IceCream: 'ice_cream',
    Immigration: 'immigration',
    ImportAndExport: 'import_and_export',
    Income: 'income',
    Indian: 'indian',
    Indonesian: 'indonesian',
    IndustrialMachineryAndEquipment: 'industrial_machinery_and_equipment',
    IndustrialMachineryAndVehicles: 'industrial_machinery_and_vehicles',
    IndustrialSupplies: 'industrial_supplies',
    Infrastructure: 'infrastructure',
    InsufficientFunds: 'insufficient_funds',
    Insurance: 'insurance',
    Interest: 'interest',
    InterestCharged: 'interest_charged',
    InterestEarned: 'interest_earned',
    InteriorDesign: 'interior_design',
    InternalAccountTransfer: 'internal_account_transfer',
    InternalMedicine: 'internal_medicine',
    Internet: 'internet',
    InternetCafes: 'internet_cafes',
    InternetServices: 'internet_services',
    Investment: 'investment',
    Italian: 'italian',
    Japanese: 'japanese',
    JazzAndBluesCafe: 'jazz_and_blues_cafe',
    JewelryAndWatches: 'jewelry_and_watches',
    JuiceBar: 'juice_bar',
    Karaoke: 'karaoke',
    KeepTheChangeSavingsProgram: 'keep_the_change_savings_program',
    Kids: 'kids',
    KidsStore: 'kids\'_store',
    Kitchens: 'kitchens',
    Korean: 'korean',
    Lakes: 'lakes',
    Landmarks: 'landmarks',
    LandscapingAndGardeners: 'landscaping_and_gardeners',
    LatePayment: 'late_payment',
    LatinAmerican: 'latin_american',
    LaundryAndGarmentServices: 'laundry_and_garment_services',
    LawEnforcement: 'law_enforcement',
    LawnAndGarden: 'lawn_and_garden',
    Leather: 'leather',
    LeatherGoods: 'leather_goods',
    Legal: 'legal',
    Libraries: 'libraries',
    LightingFixtures: 'lighting_fixtures',
    LimosAndChauffeurs: 'limos_and_chauffeurs',
    LingerieStore: 'lingerie_store',
    LivestockAndAnimals: 'livestock_and_animals',
    Loan: 'loan',
    LoansAndMortgages: 'loans_and_mortgages',
    LodgesAndVacationRentals: 'lodges_and_vacation_rentals',
    Lodging: 'lodging',
    LoggingAndSawmills: 'logging_and_sawmills',
    Luggage: 'luggage',
    MachineShops: 'machine_shops',
    MaintenanceAndRepair: 'maintenance_and_repair',
    Management: 'management',
    ManicuresAndPedicures: 'manicures_and_pedicures',
    Manufacturing: 'manufacturing',
    MarineSupplies: 'marine_supplies',
    MarketResearchAndConsulting: 'market_research_and_consulting',
    Masonry: 'masonry',
    MassageClinicsAndTherapists: 'massage_clinics_and_therapists',
    Media: 'media',
    MediaProduction: 'media_production',
    MedicalSuppliesAndLabs: 'medical_supplies_and_labs',
    Mediterranean: 'mediterranean',
    MensStore: 'men\'s_store',
    MentalHealth: 'mental_health',
    Metal: 'metal',
    MetalProducts: 'metal_products',
    Metals: 'metals',
    Mexican: 'mexican',
    MiddleEastern: 'middle_eastern',
    Military: 'military',
    MiniatureGolf: 'miniature_golf',
    Mining: 'mining',
    MobileHomes: 'mobile_homes',
    MobilePhones: 'mobile_phones',
    MonumentsAndMemorials: 'monuments_and_memorials',
    Moroccan: 'moroccan',
    Mosques: 'mosques',
    MotorcycleMopedAndScooterRepair: 'motorcycle_moped_and_scooter_repair',
    MotorcyclesMopedsAndScooters: 'motorcycles_mopeds_and_scooters',
    Mountains: 'mountains',
    Movers: 'movers',
    MovieTheatres: 'movie_theatres',
    Museums: 'museums',
    MusicVideoAndDvd: 'music_video_and_dvd',
    MusicAndShowVenues: 'music_and_show_venues',
    MusicalInstruments: 'musical_instruments',
    NaturalParks: 'natural_parks',
    Neurologists: 'neurologists',
    NewsReporting: 'news_reporting',
    Newsstands: 'newsstands',
    NightClubs: 'night_clubs',
    Nightlife: 'nightlife',
    NonMetallicMinerals: 'non-metallic_minerals',
    NonmetallicMineralProducts: 'nonmetallic_mineral_products',
    Nurses: 'nurses',
    Nutritionists: 'nutritionists',
    ObstetriciansAndGynecologists: 'obstetricians_and_gynecologists',
    Office: 'office',
    OfficeSupplies: 'office_supplies',
    OilAndGas: 'oil_and_gas',
    Oncologists: 'oncologists',
    OnlineAdvertising: 'online_advertising',
    OnlineSubscriptions: 'online_subscriptions',
    Ophthalmologists: 'ophthalmologists',
    Optometrists: 'optometrists',
    OrganizationsAndAssociations: 'organizations_and_associations',
    OrthopedicSurgeons: 'orthopedic_surgeons',
    Other: 'other',
    Outdoors: 'outdoors',
    Outlet: 'outlet',
    Overdraft: 'overdraft',
    Packaging: 'packaging',
    Paintball: 'paintball',
    Painting: 'painting',
    Paper: 'paper',
    PaperProducts: 'paper_products',
    Parking: 'parking',
    Parks: 'parks',
    PartyCenters: 'party_centers',
    Pathologists: 'pathologists',
    PawnShops: 'pawn_shops',
    Payment: 'payment',
    Paypal: 'paypal',
    Payroll: 'payroll',
    Pediatricians: 'pediatricians',
    PersonalCare: 'personal_care',
    PersonalTrainers: 'personal_trainers',
    PestControl: 'pest_control',
    Pet: 'pet',
    Petroleum: 'petroleum',
    Pets: 'pets',
    Pharmacies: 'pharmacies',
    Phone: 'phone',
    Photography: 'photography',
    PhotosAndFrames: 'photos_and_frames',
    PhysicalTherapy: 'physical_therapy',
    Physicians: 'physicians',
    PicnicAreas: 'picnic_areas',
    Piercing: 'piercing',
    Pizza: 'pizza',
    Plaid: 'plaid',
    PlasticProducts: 'plastic_products',
    PlasticSurgeons: 'plastic_surgeons',
    Plastics: 'plastics',
    Playgrounds: 'playgrounds',
    Plumbing: 'plumbing',
    Podiatrists: 'podiatrists',
    PoliceStations: 'police_stations',
    PoolsAndSpas: 'pools_and_spas',
    Portuguese: 'portuguese',
    PostOffices: 'post_offices',
    PregnancyAndSexualHealth: 'pregnancy_and_sexual_health',
    PrimaryAndSecondarySchools: 'primary_and_secondary_schools',
    PrintTvRadioAndOutdoorAdvertising: 'print_tv_radio_and_outdoor_advertising',
    PrintingAndPublishing: 'printing_and_publishing',
    PromotionalItems: 'promotional_items',
    PropertyManagement: 'property_management',
    Psychiatrists: 'psychiatrists',
    PsychicsAndAstrologers: 'psychics_and_astrologers',
    Psychologists: 'psychologists',
    PublicAndSocialServices: 'public_and_social_services',
    PublicRelations: 'public_relations',
    PublicTransportationServices: 'public_transportation_services',
    RaceTracks: 'race_tracks',
    RacquetSports: 'racquet_sports',
    Racquetball: 'racquetball',
    Radiologists: 'radiologists',
    Rafting: 'rafting',
    Rail: 'rail',
    RealEstate: 'real_estate',
    RealEstateAgents: 'real_estate_agents',
    RealEstateAppraiser: 'real_estate_appraiser',
    RealEstateDevelopmentAndTitleCompanies: 'real_estate_development_and_title_companies',
    Recreation: 'recreation',
    RecreationCenters: 'recreation_centers',
    RefrigerationAndIce: 'refrigeration_and_ice',
    Refund: 'refund',
    Religious: 'religious',
    RenewableEnergy: 'renewable_energy',
    Rent: 'rent',
    RepairServices: 'repair_services',
    Research: 'research',
    Resorts: 'resorts',
    Respiratory: 'respiratory',
    Restaurants: 'restaurants',
    Retirement: 'retirement',
    RideShare: 'ride_share',
    Rivers: 'rivers',
    RockClimbing: 'rock_climbing',
    Roofers: 'roofers',
    Rubber: 'rubber',
    RubberProducts: 'rubber_products',
    Running: 'running',
    RvsAndMotorHomes: 'rvs_and_motor_homes',
    SalvageYards: 'salvage_yards',
    SanitaryAndWasteManagement: 'sanitary_and_waste_management',
    SaveAsYouGo: 'save_as_you_go',
    Scandinavian: 'scandinavian',
    Scientific: 'scientific',
    ScubaDiving: 'scuba_diving',
    Seafood: 'seafood',
    SearchEngineMarketingAndOptimization: 'search_engine_marketing_and_optimization',
    SecurityAndSafety: 'security_and_safety',
    SeniorCitizenServices: 'senior_citizen_services',
    Service: 'service',
    ServiceInstruments: 'service_instruments',
    Services: 'services',
    Shipping: 'shipping',
    ShippingAndFreight: 'shipping_and_freight',
    ShoeStore: 'shoe_store',
    Shopping: 'shopping',
    ShoppingCentersAndMalls: 'shopping_centers_and_malls',
    Shops: 'shops',
    Skating: 'skating',
    SkinCare: 'skin_care',
    Skydiving: 'skydiving',
    SnowSports: 'snow_sports',
    Soccer: 'soccer',
    SocialClubs: 'social_clubs',
    Software: 'software',
    SoftwareDevelopment: 'software_development',
    Spanish: 'spanish',
    Spas: 'spas',
    Specialty: 'specialty',
    Sport: 'sport',
    SportingGoods: 'sporting_goods',
    SportsAndRecreationCamps: 'sports_and_recreation_camps',
    SportsBar: 'sports_bar',
    SportsClubs: 'sports_clubs',
    SportsVenues: 'sports_venues',
    Square: 'square',
    SquareCash: 'square_cash',
    StadiumsAndArenas: 'stadiums_and_arenas',
    Steakhouses: 'steakhouses',
    StockBrokers: 'stock_brokers',
    Storage: 'storage',
    StripClub: 'strip_club',
    StudentAidAndGrants: 'student_aid_and_grants',
    Subscription: 'subscription',
    SupermarketsAndGroceries: 'supermarkets_and_groceries',
    Sushi: 'sushi',
    Swimming: 'swimming',
    SwimmingPoolMaintenanceAndServices: 'swimming_pool_maintenance_and_services',
    Swimwear: 'swimwear',
    Swiss: 'swiss',
    SymphonyAndOpera: 'symphony_and_opera',
    Synagogues: 'synagogues',
    Tailors: 'tailors',
    TanningSalons: 'tanning_salons',
    Tattooing: 'tattooing',
    Tax: 'tax',
    Taxes: 'taxes',
    Taxi: 'taxi',
    TelecommunicationServices: 'telecommunication_services',
    Television: 'television',
    Temple: 'temple',
    Tennis: 'tennis',
    Textiles: 'textiles',
    Thai: 'thai',
    TheatricalProductions: 'theatrical_productions',
    ThirdParty: 'third_party',
    Tobacco: 'tobacco',
    TollsAndFees: 'tolls_and_fees',
    TouristInformationAndServices: 'tourist_information_and_services',
    Towing: 'towing',
    Toys: 'toys',
    Transfer: 'transfer',
    TransfersAndAdjustments: 'transfers_and_adjustments',
    Transport: 'transport',
    Transportation: 'transportation',
    TransportationCenters: 'transportation_centers',
    TransportationEquipment: 'transportation_equipment',
    Travel: 'travel',
    TravelAndTransportation: 'travel_and_transportation',
    TravelAgentsAndTourOperators: 'travel_agents_and_tour_operators',
    TreeService: 'tree_service',
    Turkish: 'turkish',
    TutoringAndEducationalServices: 'tutoring_and_educational_services',
    Upholstery: 'upholstery',
    Urologists: 'urologists',
    UsedCarDealers: 'used_car_dealers',
    Utilities: 'utilities',
    VeganAndVegetarian: 'vegan_and_vegetarian',
    Venmo: 'venmo',
    Veterinarians: 'veterinarians',
    VideoGames: 'video_games',
    VintageAndThrift: 'vintage_and_thrift',
    VocationalSchools: 'vocational_schools',
    WarehousesAndWholesaleStores: 'warehouses_and_wholesale_stores',
    Water: 'water',
    WaterAndWasteManagement: 'water_and_waste_management',
    WaterSports: 'water_sports',
    WebDesignAndDevelopment: 'web_design_and_development',
    WeddingAndBridal: 'wedding_and_bridal',
    Welding: 'welding',
    Wholesale: 'wholesale',
    WineBar: 'wine_bar',
    Winery: 'winery',
    Wire: 'wire',
    WireTransfer: 'wire_transfer',
    Withdrawal: 'withdrawal',
    WomensStore: 'women\'s_store',
    WoodProducts: 'wood_products',
    WritingCopywritingAndTechnicalWriting: 'writing_copywriting_and_technical_writing',
    YogaAndPilates: 'yoga_and_pilates',
    YouthOrganizations: 'youth_organizations',
    Zoo: 'zoo',
    Minus: '-'
};
exports.AssetReportTransactionStatusEnum = {
    Pending: 'pending',
    Posted: 'posted'
};
/**
 * The timeframe to base the consumer risk report on.
 * @export
 * @enum {string}
 */
exports.ConsumerRiskReportTimeFrame = {
    Daily: 'daily',
    Weekly: 'weekly',
    Monthly: 'monthly'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.CountryCode = {
    Ae: 'AE',
    Am: 'AM',
    Ar: 'AR',
    At: 'AT',
    Au: 'AU',
    Bd: 'BD',
    Be: 'BE',
    Bg: 'BG',
    Bh: 'BH',
    Bm: 'BM',
    Bn: 'BN',
    Br: 'BR',
    Bw: 'BW',
    By: 'BY',
    Ca: 'CA',
    Ch: 'CH',
    Ci: 'CI',
    Cl: 'CL',
    Cm: 'CM',
    Cn: 'CN',
    Co: 'CO',
    Cz: 'CZ',
    De: 'DE',
    Do: 'DO',
    Dz: 'DZ',
    Ec: 'EC',
    Eg: 'EG',
    Es: 'ES',
    Fi: 'FI',
    Fk: 'FK',
    Fr: 'FR',
    Gb: 'GB',
    Gg: 'GG',
    Gh: 'GH',
    Gm: 'GM',
    Gr: 'GR',
    Hk: 'HK',
    Hu: 'HU',
    Id: 'ID',
    Ie: 'IE',
    Il: 'IL',
    Im: 'IM',
    In: 'IN',
    It: 'IT',
    Je: 'JE',
    Jo: 'JO',
    Jp: 'JP',
    Ke: 'KE',
    Kh: 'KH',
    Kr: 'KR',
    Kw: 'KW',
    La: 'LA',
    Lb: 'LB',
    Lk: 'LK',
    Lt: 'LT',
    Lu: 'LU',
    Mc: 'MC',
    Md: 'MD',
    Mk: 'MK',
    Mo: 'MO',
    Mt: 'MT',
    Mu: 'MU',
    Mv: 'MV',
    Mx: 'MX',
    My: 'MY',
    Ng: 'NG',
    Nl: 'NL',
    Np: 'NP',
    Nz: 'NZ',
    Om: 'OM',
    Pe: 'PE',
    Ph: 'PH',
    Pk: 'PK',
    Pl: 'PL',
    Pt: 'PT',
    Qa: 'QA',
    Ro: 'RO',
    Ru: 'RU',
    Sa: 'SA',
    Se: 'SE',
    Sg: 'SG',
    Sk: 'SK',
    Sl: 'SL',
    Th: 'TH',
    Tr: 'TR',
    Tw: 'TW',
    Tz: 'TZ',
    Ua: 'UA',
    Ug: 'UG',
    Us: 'US',
    Uy: 'UY',
    Vn: 'VN',
    Za: 'ZA',
    Zm: 'ZM',
    Zw: 'ZW'
};
exports.CreateLinkTokenRequestSnaptradeConfigConnectionTypeEnum = {
    Read: 'read',
    Trade: 'trade'
};
exports.CreateLinkTokenRequestTellerConfigSelectAccountEnum = {
    Disabled: 'disabled',
    Single: 'single',
    Multiple: 'multiple'
};
exports.CreateLinkTokenRequestTellerConfigAccountFilterCreditOneOfSubtypesEnum = {
    CreditCard: 'credit_card'
};
exports.CreateLinkTokenRequestTellerConfigAccountFilterDepositoryOneOfSubtypesEnum = {
    Checking: 'checking',
    Savings: 'savings'
};
exports.ExternalTransactionEventEventTypeEnum = {
    ExternalTransaction: 'external_transaction'
};
exports.ExternalTransactionEventTransactionOwnerTypeEnum = {
    Consumer: 'consumer',
    Business: 'business'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.ExternalTransactionEventStatus = {
    Pending: 'pending',
    Posted: 'posted'
};
exports.FinancialConnectionDetailsConnectionStatusEnum = {
    Connected: 'connected',
    Disconnected: 'disconnected',
    Finished: 'finished'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.FinancialConnectionsInvestmentSecurityType = {
    Cash: 'cash',
    Cryptocurrency: 'cryptocurrency',
    Derivative: 'derivative',
    Equity: 'equity',
    Etf: 'etf',
    FixedIncome: 'fixed_income',
    Loan: 'loan',
    MutualFund: 'mutual_fund',
    Other: 'other',
    GlobalDepositaryReceipt: 'global_depositary_receipt',
    OpenEndedFund: 'open_ended_fund',
    Right: 'right',
    Temporary: 'temporary',
    Warrant: 'warrant',
    ClosedEndedFund: 'closed_ended_fund',
    CommonStock: 'common_stock',
    ExchangeTradedFund: 'exchange_traded_fund',
    Bond: 'bond',
    AmericanDepositaryReceipt: 'american_depositary_receipt',
    Unit: 'unit',
    StructuredProduct: 'structured_product',
    PreferredStock: 'preferred_stock',
    RealEstate: 'real_estate',
    Automobile: 'automobile',
    DelistedOrDefunctAsset: 'delisted_or_defunct_asset',
    Minus: '-'
};
exports.FinancialConnectionsInvestmentTransactionTypeEnum = {
    Cash: 'cash',
    Buy: 'buy',
    Sell: 'sell',
    Transfer: 'transfer',
    Fee: 'fee',
    Cancel: 'cancel',
    Minus: '-'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.FinancialConnectionsInvestmentTransactionSubtype = {
    AccountFee: 'account_fee',
    Adjustment: 'adjustment',
    Assignment: 'assignment',
    Buy: 'buy',
    BuyToCover: 'buy_to_cover',
    Contribution: 'contribution',
    Deposit: 'deposit',
    Distribution: 'distribution',
    Dividend: 'dividend',
    DividendReinvestment: 'dividend_reinvestment',
    Exercise: 'exercise',
    Expire: 'expire',
    FundFee: 'fund_fee',
    Interest: 'interest',
    InterestReceivable: 'interest_receivable',
    InterestReinvestment: 'interest_reinvestment',
    LegalFee: 'legal_fee',
    LoanPayment: 'loan_payment',
    LongTermCapitalGain: 'long_term_capital_gain',
    LongTermCapitalGainReinvestment: 'long_term_capital_gain_reinvestment',
    ManagementFee: 'management_fee',
    MarginExpense: 'margin_expense',
    Merger: 'merger',
    MiscellaneousFee: 'miscellaneous_fee',
    NonQualifiedDividend: 'non_qualified_dividend',
    NonResidentTax: 'non_resident_tax',
    PendingCredit: 'pending_credit',
    PendingDebit: 'pending_debit',
    QualifiedDividend: 'qualified_dividend',
    Rebalance: 'rebalance',
    ReturnOfPrincipal: 'return_of_principal',
    Request: 'request',
    Sell: 'sell',
    SellShort: 'sell_short',
    Send: 'send',
    ShortTermCapitalGain: 'short_term_capital_gain',
    ShortTermCapitalGainReinvestment: 'short_term_capital_gain_reinvestment',
    SpinOff: 'spin_off',
    Split: 'split',
    StockDistribution: 'stock_distribution',
    Tax: 'tax',
    TaxWithheld: 'tax_withheld',
    Trade: 'trade',
    Transfer: 'transfer',
    TransferFee: 'transfer_fee',
    TrustFee: 'trust_fee',
    UnqualifiedGain: 'unqualified_gain',
    Withdrawal: 'withdrawal',
    Minus: '-'
};
exports.FinancialConnectionsOwnerEmailsInnerTypeEnum = {
    Primary: 'primary',
    Secondary: 'secondary',
    Other: 'other'
};
exports.FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum = {
    Home: 'home',
    Work: 'work',
    Mobile: 'mobile'
};
exports.FinancialInstitutionLogoTypeEnum = {
    Base64: 'base64',
    Url: 'url'
};
exports.FinancialInstitutionLogoFormatEnum = {
    Png: 'png',
    Jpeg: 'jpeg',
    Gif: 'gif',
    Svgxml: 'svg+xml'
};
exports.FuseApiErrorSourceEnum = {
    Internal: 'internal',
    Aggregator: 'aggregator'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.FuseApiErrorCode = {
    AssetReportGenerationFailed: 'asset_report_generation_failed',
    AssetReportNotReady: 'asset_report_not_ready',
    ClientError: 'client_error',
    InvalidHeaders: 'invalid_headers',
    InvalidRequestBody: 'invalid_request_body',
    InternalServerError: 'internal_server_error',
    OrganizationNotFound: 'organization_not_found',
    EntityNotFound: 'entity_not_found',
    SessionNotFound: 'session_not_found',
    FinancialInstitutionNotFound: 'financial_institution_not_found',
    ConsumerRiskReportNotFound: 'consumer_risk_report_not_found',
    ConsumerRiskReportCustomizationNotFound: 'consumer_risk_report_customization_not_found',
    MissingAccessToken: 'missing_access_token',
    MissingPlaidClientIdHeader: 'missing_plaid_client_id_header',
    MissingPlaidSecretHeader: 'missing_plaid_secret_header',
    MissingMxClientIdHeader: 'missing_mx_client_id_header',
    MissingMxApiKeyHeader: 'missing_mx_api_key_header',
    MissingTellerPrivateKeyHeader: 'missing_teller_private_key_header',
    MissingTellerCertificateHeader: 'missing_teller_certificate_header',
    MissingTellerApplicationIdHeader: 'missing_teller_application_id_header',
    MissingTellerSigningSecretHeader: 'missing_teller_signing_secret_header',
    MissingSnaptradeClientIdHeader: 'missing_snaptrade_client_id_header',
    MissingSnaptradeConsumerKeyHeader: 'missing_snaptrade_consumer_key_header',
    MissingFlinksCaCustomerIdHeader: 'missing_flinks_ca_customer_id_header',
    MissingFlinksUsCustomerIdHeader: 'missing_flinks_us_customer_id_header',
    MissingFlinksCaInstanceIdHeader: 'missing_flinks_ca_instance_id_header',
    MissingFlinksUsInstanceIdHeader: 'missing_flinks_us_instance_id_header',
    MissingMonoPublicKeyHeader: 'missing_mono_public_key_header',
    MissingMonoSecretKeyHeader: 'missing_mono_secret_key_header',
    MissingMonoWebhookSecretHeader: 'missing_mono_webhook_secret_header',
    MissingTruelayerClientIdHeader: 'missing_truelayer_client_id_header',
    MissingTruelayerClientSecretHeader: 'missing_truelayer_client_secret_header',
    MissingTruelayerRedirectUriHeader: 'missing_truelayer_redirect_uri_header',
    MissingFinverseClientIdHeader: 'missing_finverse_client_id_header',
    MissingFinverseClientSecretHeader: 'missing_finverse_client_secret_header',
    MissingFinverseRedirectUriHeader: 'missing_finverse_redirect_uri_header',
    MissingBasiqApiKeyHeader: 'missing_basiq_api_key_header',
    MissingBelvoSecretIdHeader: 'missing_belvo_secret_id_header',
    MissingBelvoSecretPasswordHeader: 'missing_belvo_secret_password_header',
    MissingFinicityPartnerIdHeader: 'missing_finicity_partner_id_header',
    MissingFinicityAppKeyHeader: 'missing_finicity_app_key_header',
    MissingFinicityPartnerSecretHeader: 'missing_finicity_partner_secret_header',
    MissingFuseVerificationHeader: 'missing_fuse_verification_header',
    MissingAkoyaClientIdHeader: 'missing_akoya_client_id_header',
    MissingAkoyaClientSecretHeader: 'missing_akoya_client_secret_header',
    MissingSaltedgeAppIdHeader: 'missing_saltedge_app_id_header',
    MissingSaltedgeAppSecretHeader: 'missing_saltedge_app_secret_header',
    MissingSophtronUserIdHeader: 'missing_sophtron_user_id_header',
    MissingSophtronAccessKeyHeader: 'missing_sophtron_access_key_header',
    AggregatorError: 'aggregator_error',
    AggregatorDisconnectedError: 'aggregator_disconnected_error',
    AggregatorConnectionFinishedError: 'aggregator_connection_finished_error',
    AggregatorRateLimitError: 'aggregator_rate_limit_error',
    RequestBodyMissing: 'request_body_missing',
    RequestContentTypeInvalid: 'request_content_type_invalid',
    RequestBodyInvalidJson: 'request_body_invalid_json',
    WebhookError: 'webhook_error',
    Timeout: 'timeout',
    InvalidCertificate: 'invalid_certificate',
    InvalidPrivateKey: 'invalid_private_key',
    Other: 'other'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.FuseApiErrorType = {
    AuthError: 'auth_error',
    NotFound: 'not_found',
    BadRequest: 'bad_request',
    ServerError: 'server_error'
};
exports.FuseApiWarningSourceEnum = {
    Internal: 'internal',
    Aggregator: 'aggregator'
};
exports.FuseApiWarningDataWarningsInnerSourceEnum = {
    Internal: 'internal',
    Aggregator: 'aggregator'
};
exports.InAppTransactionEventEventTypeEnum = {
    InAppTransaction: 'in_app_transaction'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.InAppTransactionEventStatus = {
    Pending: 'pending',
    Succeeded: 'succeeded',
    Failed: 'failed'
};
exports.MigrateFinancialConnectionsTokenRequestAggregatorEnum = {
    Plaid: 'plaid',
    Mx: 'mx',
    Teller: 'teller'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.Product = {
    AccountDetails: 'account_details',
    Balance: 'balance',
    Ownership: 'ownership',
    Transactions: 'transactions',
    Investments: 'investments',
    Assets: 'assets'
};
exports.TransactionCategoryEnum = {
    AccessoriesStore: 'accessories_store',
    AccountingAndBookkeeping: 'accounting_and_bookkeeping',
    Ach: 'ach',
    Acorns: 'acorns',
    Acupuncture: 'acupuncture',
    Adult: 'adult',
    AdultEducation: 'adult_education',
    AdultEntertainment: 'adult_entertainment',
    Advertising: 'advertising',
    AdvertisingAgenciesAndMediaBuyers: 'advertising_agencies_and_media_buyers',
    AdvertisingAndMarketing: 'advertising_and_marketing',
    Afghan: 'afghan',
    African: 'african',
    AgricultureAndForestry: 'agriculture_and_forestry',
    AirlinesAndAviationServices: 'airlines_and_aviation_services',
    Airports: 'airports',
    AlcoholAndBars: 'alcohol_and_bars',
    AlternativeMedicine: 'alternative_medicine',
    American: 'american',
    Anesthesiologists: 'anesthesiologists',
    AnimalShelter: 'animal_shelter',
    Antiques: 'antiques',
    ApartmentsCondosAndHouses: 'apartments_condos_and_houses',
    ApparelAndFabricProducts: 'apparel_and_fabric_products',
    Aquarium: 'aquarium',
    ArcadesAndAmusementParks: 'arcades_and_amusement_parks',
    Architects: 'architects',
    ArtAndGraphicDesign: 'art_and_graphic_design',
    ArtDealersAndGalleries: 'art_dealers_and_galleries',
    ArtRestoration: 'art_restoration',
    ArtSchool: 'art_school',
    ArtsAndCrafts: 'arts_and_crafts',
    ArtsAndEntertainment: 'arts_and_entertainment',
    Asian: 'asian',
    AssistedLivingServices: 'assisted_living_services',
    AthleticFields: 'athletic_fields',
    Atm: 'atm',
    Atms: 'atms',
    Auctions: 'auctions',
    Audiovisual: 'audiovisual',
    Australian: 'australian',
    AutoOilAndLube: 'auto_oil_and_lube',
    AutoPayment: 'auto_payment',
    AutoSmogCheck: 'auto_smog_check',
    AutoTires: 'auto_tires',
    AutoTransmission: 'auto_transmission',
    AutomationAndControlSystems: 'automation_and_control_systems',
    Automotive: 'automotive',
    BagelShop: 'bagel_shop',
    Bakery: 'bakery',
    BankFees: 'bank_fees',
    BankingAndFinance: 'banking_and_finance',
    Bar: 'bar',
    Barbecue: 'barbecue',
    Baseball: 'baseball',
    Basketball: 'basketball',
    BattingCages: 'batting_cages',
    Beaches: 'beaches',
    BeautyProducts: 'beauty_products',
    BedAndBreakfasts: 'bed_and_breakfasts',
    BeerWineAndSpirits: 'beer_wine_and_spirits',
    Benefits: 'benefits',
    Betterment: 'betterment',
    Bicycles: 'bicycles',
    Bill: 'bill',
    BilliardsAndPool: 'billiards_and_pool',
    Billpay: 'billpay',
    BloodBanksAndCenters: 'blood_banks_and_centers',
    BoardingHouses: 'boarding_houses',
    Boat: 'boat',
    BoatDealers: 'boat_dealers',
    Boating: 'boating',
    BooksAndSupplies: 'books_and_supplies',
    Bookstores: 'bookstores',
    Boutique: 'boutique',
    Bowling: 'bowling',
    Brazilian: 'brazilian',
    BreakfastSpot: 'breakfast_spot',
    Breweries: 'breweries',
    BuildingAndLandSurveyors: 'building_and_land_surveyors',
    BuildingsAndStructures: 'buildings_and_structures',
    Burgers: 'burgers',
    Burrito: 'burrito',
    BusStations: 'bus_stations',
    Business: 'business',
    BusinessAndStrategyConsulting: 'business_and_strategy_consulting',
    BusinessBrokersAndFranchises: 'business_brokers_and_franchises',
    BusinessServices: 'business_services',
    Cable: 'cable',
    Cafe: 'cafe',
    Cajun: 'cajun',
    Cameras: 'cameras',
    CampgroundsAndRvParks: 'campgrounds_and_rv_parks',
    CanoesAndKayaks: 'canoes_and_kayaks',
    CarAndTruckRentals: 'car_and_truck_rentals',
    CarAppraisers: 'car_appraisers',
    CarDealersAndLeasing: 'car_dealers_and_leasing',
    CarPartsAndAccessories: 'car_parts_and_accessories',
    CarService: 'car_service',
    CarWashAndDetail: 'car_wash_and_detail',
    Cardiologists: 'cardiologists',
    CardsAndStationery: 'cards_and_stationery',
    Caretakers: 'caretakers',
    Caribbean: 'caribbean',
    Carpenters: 'carpenters',
    CarpetAndFlooring: 'carpet_and_flooring',
    CashAdvance: 'cash_advance',
    CasinosAndGaming: 'casinos_and_gaming',
    Catering: 'catering',
    Cemetery: 'cemetery',
    CharitiesAndNonProfits: 'charities_and_non-profits',
    Charity: 'charity',
    CharterBuses: 'charter_buses',
    ChaseQuickpay: 'chase_quickpay',
    Check: 'check',
    CheckCashing: 'check_cashing',
    ChemicalsAndGasses: 'chemicals_and_gasses',
    Childcare: 'childcare',
    Children: 'children',
    Chinese: 'chinese',
    Chiropractors: 'chiropractors',
    Churches: 'churches',
    CircusesAndCarnivals: 'circuses_and_carnivals',
    ClassicAndAntiqueCar: 'classic_and_antique_car',
    Cleaning: 'cleaning',
    Clothing: 'clothing',
    ClothingAndAccessories: 'clothing_and_accessories',
    Coal: 'coal',
    CoffeeShop: 'coffee_shop',
    Coinbase: 'coinbase',
    Collections: 'collections',
    CollegesAndUniversities: 'colleges_and_universities',
    CombatSports: 'combat_sports',
    CommercialRealEstate: 'commercial_real_estate',
    Community: 'community',
    ComputerTraining: 'computer_training',
    Computers: 'computers',
    ComputersAndElectronics: 'computers_and_electronics',
    ComputersAndOfficeMachines: 'computers_and_office_machines',
    Construction: 'construction',
    ConstructionSupplies: 'construction_supplies',
    Contractors: 'contractors',
    ConvenienceStores: 'convenience_stores',
    CorporateHousing: 'corporate_housing',
    CorrectionalInstitutions: 'correctional_institutions',
    Costumes: 'costumes',
    CottagesAndCabins: 'cottages_and_cabins',
    CounselingAndTherapy: 'counseling_and_therapy',
    Courts: 'courts',
    CreativeServices: 'creative_services',
    Credit: 'credit',
    CreditCard: 'credit_card',
    CreditCounselingAndBankruptcyServices: 'credit_counseling_and_bankruptcy_services',
    CreditReporting: 'credit_reporting',
    CropProduction: 'crop_production',
    Cruises: 'cruises',
    Cuban: 'cuban',
    CulinaryLessonsAndSchools: 'culinary_lessons_and_schools',
    CupcakeShop: 'cupcake_shop',
    Cycling: 'cycling',
    Dance: 'dance',
    DanceAndMusic: 'dance_and_music',
    DanceHallsAndSaloons: 'dance_halls_and_saloons',
    DanceSchools: 'dance_schools',
    DatingAndEscort: 'dating_and_escort',
    DayCareAndPreschools: 'day_care_and_preschools',
    Debit: 'debit',
    Delis: 'delis',
    Dentists: 'dentists',
    DepartmentStores: 'department_stores',
    Deposit: 'deposit',
    Dermatologists: 'dermatologists',
    Dessert: 'dessert',
    Digit: 'digit',
    DigitalPurchase: 'digital_purchase',
    Diners: 'diners',
    Dining: 'dining',
    DirectMailAndEmailMarketingServices: 'direct_mail_and_email_marketing_services',
    DisabledPersonsServices: 'disabled_persons_services',
    DiscountStores: 'discount_stores',
    Distillery: 'distillery',
    Distribution: 'distribution',
    DoctorsAndDentists: 'doctors_and_dentists',
    Donuts: 'donuts',
    DoorsAndWindows: 'doors_and_windows',
    DrivingSchools: 'driving_schools',
    DrugAndAlcoholServices: 'drug_and_alcohol_services',
    Dwolla: 'dwolla',
    EarNoseAndThroat: 'ear_nose_and_throat',
    EasternEuropean: 'eastern_european',
    Education: 'education',
    Electric: 'electric',
    ElectricalEquipment: 'electrical_equipment',
    ElectricalEquipmentAndComponents: 'electrical_equipment_and_components',
    Electricians: 'electricians',
    Electronics: 'electronics',
    EmergencyServices: 'emergency_services',
    EmploymentAgencies: 'employment_agencies',
    Engineering: 'engineering',
    Entertainment: 'entertainment',
    Environmental: 'environmental',
    Equestrian: 'equestrian',
    EquipmentRental: 'equipment_rental',
    Ethiopian: 'ethiopian',
    EventsAndEventPlanning: 'events_and_event_planning',
    ExcessActivity: 'excess_activity',
    Expense: 'expense',
    FacilitiesAndNursingHomes: 'facilities_and_nursing_homes',
    FairgroundsAndRodeos: 'fairgrounds_and_rodeos',
    Falafel: 'falafel',
    FamilyMedicine: 'family_medicine',
    FarmersMarkets: 'farmers_markets',
    FastFood: 'fast_food',
    Fee: 'fee',
    FencesFireplacesAndGarageDoors: 'fences_fireplaces_and_garage_doors',
    Filipino: 'filipino',
    Financial: 'financial',
    FinancialPlanningAndInvestments: 'financial_planning_and_investments',
    FireStations: 'fire_stations',
    FishAndChips: 'fish_and_chips',
    FleaMarkets: 'flea_markets',
    Florists: 'florists',
    FoodAndBeverage: 'food_and_beverage',
    FoodAndBeverageStore: 'food_and_beverage_store',
    FoodAndDrink: 'food_and_drink',
    FoodTruck: 'food_truck',
    Football: 'football',
    ForeignTransaction: 'foreign_transaction',
    Forestry: 'forestry',
    Forests: 'forests',
    FraternitiesAndSororities: 'fraternities_and_sororities',
    FraudDispute: 'fraud_dispute',
    French: 'french',
    Fuel: 'fuel',
    FuelDealer: 'fuel_dealer',
    FundRaising: 'fund_raising',
    FuneralServices: 'funeral_services',
    FurnitureAndFixtures: 'furniture_and_fixtures',
    FurnitureAndHomeDecor: 'furniture_and_home_decor',
    Gardens: 'gardens',
    Gas: 'gas',
    GasStations: 'gas_stations',
    Gastroenterologists: 'gastroenterologists',
    Gastropub: 'gastropub',
    General: 'general',
    GeneralSurgery: 'general_surgery',
    Geological: 'geological',
    German: 'german',
    GiftAndNovelty: 'gift_and_novelty',
    Gifts: 'gifts',
    GlassProducts: 'glass_products',
    GlassesAndOptometrist: 'glasses_and_optometrist',
    GoCarts: 'go_carts',
    Golf: 'golf',
    GoodsAndMerchandise: 'goods_and_merchandise',
    GovernmentDepartmentsAndAgencies: 'government_departments_and_agencies',
    GovernmentLobbyists: 'government_lobbyists',
    Greek: 'greek',
    GunRanges: 'gun_ranges',
    Gym: 'gym',
    Gymnastics: 'gymnastics',
    GymsAndFitnessCenters: 'gyms_and_fitness_centers',
    HairRemoval: 'hair_removal',
    HairSalonsAndBarbers: 'hair_salons_and_barbers',
    HardwareAndServices: 'hardware_and_services',
    HardwareStore: 'hardware_store',
    HealthFood: 'health_food',
    Healthcare: 'healthcare',
    HealthcareServices: 'healthcare_services',
    HeatingVentilatingAndAirConditioning: 'heating_ventilating_and_air_conditioning',
    Heliports: 'heliports',
    Hiking: 'hiking',
    HistoricSites: 'historic_sites',
    HobbyAndCollectibles: 'hobby_and_collectibles',
    Hockey: 'hockey',
    HoldingAndInvestmentOffices: 'holding_and_investment_offices',
    Home: 'home',
    HomeAppliances: 'home_appliances',
    HomeImprovement: 'home_improvement',
    HomeInspectionServices: 'home_inspection_services',
    HookahLounges: 'hookah_lounges',
    HospitalsClinicsAndMedicalCenters: 'hospitals_clinics_and_medical_centers',
    Hostels: 'hostels',
    HotAirBalloons: 'hot_air_balloons',
    HotelLounge: 'hotel_lounge',
    HotelsAndMotels: 'hotels_and_motels',
    Household: 'household',
    Housewares: 'housewares',
    HousingAssistanceAndShelters: 'housing_assistance_and_shelters',
    HumanResources: 'human_resources',
    HuntingAndFishing: 'hunting_and_fishing',
    IceCream: 'ice_cream',
    Immigration: 'immigration',
    ImportAndExport: 'import_and_export',
    Income: 'income',
    Indian: 'indian',
    Indonesian: 'indonesian',
    IndustrialMachineryAndEquipment: 'industrial_machinery_and_equipment',
    IndustrialMachineryAndVehicles: 'industrial_machinery_and_vehicles',
    IndustrialSupplies: 'industrial_supplies',
    Infrastructure: 'infrastructure',
    InsufficientFunds: 'insufficient_funds',
    Insurance: 'insurance',
    Interest: 'interest',
    InterestCharged: 'interest_charged',
    InterestEarned: 'interest_earned',
    InteriorDesign: 'interior_design',
    InternalAccountTransfer: 'internal_account_transfer',
    InternalMedicine: 'internal_medicine',
    Internet: 'internet',
    InternetCafes: 'internet_cafes',
    InternetServices: 'internet_services',
    Investment: 'investment',
    Italian: 'italian',
    Japanese: 'japanese',
    JazzAndBluesCafe: 'jazz_and_blues_cafe',
    JewelryAndWatches: 'jewelry_and_watches',
    JuiceBar: 'juice_bar',
    Karaoke: 'karaoke',
    KeepTheChangeSavingsProgram: 'keep_the_change_savings_program',
    Kids: 'kids',
    KidsStore: 'kids\'_store',
    Kitchens: 'kitchens',
    Korean: 'korean',
    Lakes: 'lakes',
    Landmarks: 'landmarks',
    LandscapingAndGardeners: 'landscaping_and_gardeners',
    LatePayment: 'late_payment',
    LatinAmerican: 'latin_american',
    LaundryAndGarmentServices: 'laundry_and_garment_services',
    LawEnforcement: 'law_enforcement',
    LawnAndGarden: 'lawn_and_garden',
    Leather: 'leather',
    LeatherGoods: 'leather_goods',
    Legal: 'legal',
    Libraries: 'libraries',
    LightingFixtures: 'lighting_fixtures',
    LimosAndChauffeurs: 'limos_and_chauffeurs',
    LingerieStore: 'lingerie_store',
    LivestockAndAnimals: 'livestock_and_animals',
    Loan: 'loan',
    LoansAndMortgages: 'loans_and_mortgages',
    LodgesAndVacationRentals: 'lodges_and_vacation_rentals',
    Lodging: 'lodging',
    LoggingAndSawmills: 'logging_and_sawmills',
    Luggage: 'luggage',
    MachineShops: 'machine_shops',
    MaintenanceAndRepair: 'maintenance_and_repair',
    Management: 'management',
    ManicuresAndPedicures: 'manicures_and_pedicures',
    Manufacturing: 'manufacturing',
    MarineSupplies: 'marine_supplies',
    MarketResearchAndConsulting: 'market_research_and_consulting',
    Masonry: 'masonry',
    MassageClinicsAndTherapists: 'massage_clinics_and_therapists',
    Media: 'media',
    MediaProduction: 'media_production',
    MedicalSuppliesAndLabs: 'medical_supplies_and_labs',
    Mediterranean: 'mediterranean',
    MensStore: 'men\'s_store',
    MentalHealth: 'mental_health',
    Metal: 'metal',
    MetalProducts: 'metal_products',
    Metals: 'metals',
    Mexican: 'mexican',
    MiddleEastern: 'middle_eastern',
    Military: 'military',
    MiniatureGolf: 'miniature_golf',
    Mining: 'mining',
    MobileHomes: 'mobile_homes',
    MobilePhones: 'mobile_phones',
    MonumentsAndMemorials: 'monuments_and_memorials',
    Moroccan: 'moroccan',
    Mosques: 'mosques',
    MotorcycleMopedAndScooterRepair: 'motorcycle_moped_and_scooter_repair',
    MotorcyclesMopedsAndScooters: 'motorcycles_mopeds_and_scooters',
    Mountains: 'mountains',
    Movers: 'movers',
    MovieTheatres: 'movie_theatres',
    Museums: 'museums',
    MusicVideoAndDvd: 'music_video_and_dvd',
    MusicAndShowVenues: 'music_and_show_venues',
    MusicalInstruments: 'musical_instruments',
    NaturalParks: 'natural_parks',
    Neurologists: 'neurologists',
    NewsReporting: 'news_reporting',
    Newsstands: 'newsstands',
    NightClubs: 'night_clubs',
    Nightlife: 'nightlife',
    NonMetallicMinerals: 'non-metallic_minerals',
    NonmetallicMineralProducts: 'nonmetallic_mineral_products',
    Nurses: 'nurses',
    Nutritionists: 'nutritionists',
    ObstetriciansAndGynecologists: 'obstetricians_and_gynecologists',
    Office: 'office',
    OfficeSupplies: 'office_supplies',
    OilAndGas: 'oil_and_gas',
    Oncologists: 'oncologists',
    OnlineAdvertising: 'online_advertising',
    OnlineSubscriptions: 'online_subscriptions',
    Ophthalmologists: 'ophthalmologists',
    Optometrists: 'optometrists',
    OrganizationsAndAssociations: 'organizations_and_associations',
    OrthopedicSurgeons: 'orthopedic_surgeons',
    Other: 'other',
    Outdoors: 'outdoors',
    Outlet: 'outlet',
    Overdraft: 'overdraft',
    Packaging: 'packaging',
    Paintball: 'paintball',
    Painting: 'painting',
    Paper: 'paper',
    PaperProducts: 'paper_products',
    Parking: 'parking',
    Parks: 'parks',
    PartyCenters: 'party_centers',
    Pathologists: 'pathologists',
    PawnShops: 'pawn_shops',
    Payment: 'payment',
    Paypal: 'paypal',
    Payroll: 'payroll',
    Pediatricians: 'pediatricians',
    PersonalCare: 'personal_care',
    PersonalTrainers: 'personal_trainers',
    PestControl: 'pest_control',
    Pet: 'pet',
    Petroleum: 'petroleum',
    Pets: 'pets',
    Pharmacies: 'pharmacies',
    Phone: 'phone',
    Photography: 'photography',
    PhotosAndFrames: 'photos_and_frames',
    PhysicalTherapy: 'physical_therapy',
    Physicians: 'physicians',
    PicnicAreas: 'picnic_areas',
    Piercing: 'piercing',
    Pizza: 'pizza',
    Plaid: 'plaid',
    PlasticProducts: 'plastic_products',
    PlasticSurgeons: 'plastic_surgeons',
    Plastics: 'plastics',
    Playgrounds: 'playgrounds',
    Plumbing: 'plumbing',
    Podiatrists: 'podiatrists',
    PoliceStations: 'police_stations',
    PoolsAndSpas: 'pools_and_spas',
    Portuguese: 'portuguese',
    PostOffices: 'post_offices',
    PregnancyAndSexualHealth: 'pregnancy_and_sexual_health',
    PrimaryAndSecondarySchools: 'primary_and_secondary_schools',
    PrintTvRadioAndOutdoorAdvertising: 'print_tv_radio_and_outdoor_advertising',
    PrintingAndPublishing: 'printing_and_publishing',
    PromotionalItems: 'promotional_items',
    PropertyManagement: 'property_management',
    Psychiatrists: 'psychiatrists',
    PsychicsAndAstrologers: 'psychics_and_astrologers',
    Psychologists: 'psychologists',
    PublicAndSocialServices: 'public_and_social_services',
    PublicRelations: 'public_relations',
    PublicTransportationServices: 'public_transportation_services',
    RaceTracks: 'race_tracks',
    RacquetSports: 'racquet_sports',
    Racquetball: 'racquetball',
    Radiologists: 'radiologists',
    Rafting: 'rafting',
    Rail: 'rail',
    RealEstate: 'real_estate',
    RealEstateAgents: 'real_estate_agents',
    RealEstateAppraiser: 'real_estate_appraiser',
    RealEstateDevelopmentAndTitleCompanies: 'real_estate_development_and_title_companies',
    Recreation: 'recreation',
    RecreationCenters: 'recreation_centers',
    RefrigerationAndIce: 'refrigeration_and_ice',
    Refund: 'refund',
    Religious: 'religious',
    RenewableEnergy: 'renewable_energy',
    Rent: 'rent',
    RepairServices: 'repair_services',
    Research: 'research',
    Resorts: 'resorts',
    Respiratory: 'respiratory',
    Restaurants: 'restaurants',
    Retirement: 'retirement',
    RideShare: 'ride_share',
    Rivers: 'rivers',
    RockClimbing: 'rock_climbing',
    Roofers: 'roofers',
    Rubber: 'rubber',
    RubberProducts: 'rubber_products',
    Running: 'running',
    RvsAndMotorHomes: 'rvs_and_motor_homes',
    SalvageYards: 'salvage_yards',
    SanitaryAndWasteManagement: 'sanitary_and_waste_management',
    SaveAsYouGo: 'save_as_you_go',
    Scandinavian: 'scandinavian',
    Scientific: 'scientific',
    ScubaDiving: 'scuba_diving',
    Seafood: 'seafood',
    SearchEngineMarketingAndOptimization: 'search_engine_marketing_and_optimization',
    SecurityAndSafety: 'security_and_safety',
    SeniorCitizenServices: 'senior_citizen_services',
    Service: 'service',
    ServiceInstruments: 'service_instruments',
    Services: 'services',
    Shipping: 'shipping',
    ShippingAndFreight: 'shipping_and_freight',
    ShoeStore: 'shoe_store',
    Shopping: 'shopping',
    ShoppingCentersAndMalls: 'shopping_centers_and_malls',
    Shops: 'shops',
    Skating: 'skating',
    SkinCare: 'skin_care',
    Skydiving: 'skydiving',
    SnowSports: 'snow_sports',
    Soccer: 'soccer',
    SocialClubs: 'social_clubs',
    Software: 'software',
    SoftwareDevelopment: 'software_development',
    Spanish: 'spanish',
    Spas: 'spas',
    Specialty: 'specialty',
    Sport: 'sport',
    SportingGoods: 'sporting_goods',
    SportsAndRecreationCamps: 'sports_and_recreation_camps',
    SportsBar: 'sports_bar',
    SportsClubs: 'sports_clubs',
    SportsVenues: 'sports_venues',
    Square: 'square',
    SquareCash: 'square_cash',
    StadiumsAndArenas: 'stadiums_and_arenas',
    Steakhouses: 'steakhouses',
    StockBrokers: 'stock_brokers',
    Storage: 'storage',
    StripClub: 'strip_club',
    StudentAidAndGrants: 'student_aid_and_grants',
    Subscription: 'subscription',
    SupermarketsAndGroceries: 'supermarkets_and_groceries',
    Sushi: 'sushi',
    Swimming: 'swimming',
    SwimmingPoolMaintenanceAndServices: 'swimming_pool_maintenance_and_services',
    Swimwear: 'swimwear',
    Swiss: 'swiss',
    SymphonyAndOpera: 'symphony_and_opera',
    Synagogues: 'synagogues',
    Tailors: 'tailors',
    TanningSalons: 'tanning_salons',
    Tattooing: 'tattooing',
    Tax: 'tax',
    Taxes: 'taxes',
    Taxi: 'taxi',
    TelecommunicationServices: 'telecommunication_services',
    Television: 'television',
    Temple: 'temple',
    Tennis: 'tennis',
    Textiles: 'textiles',
    Thai: 'thai',
    TheatricalProductions: 'theatrical_productions',
    ThirdParty: 'third_party',
    Tobacco: 'tobacco',
    TollsAndFees: 'tolls_and_fees',
    TouristInformationAndServices: 'tourist_information_and_services',
    Towing: 'towing',
    Toys: 'toys',
    Transfer: 'transfer',
    TransfersAndAdjustments: 'transfers_and_adjustments',
    Transport: 'transport',
    Transportation: 'transportation',
    TransportationCenters: 'transportation_centers',
    TransportationEquipment: 'transportation_equipment',
    Travel: 'travel',
    TravelAndTransportation: 'travel_and_transportation',
    TravelAgentsAndTourOperators: 'travel_agents_and_tour_operators',
    TreeService: 'tree_service',
    Turkish: 'turkish',
    TutoringAndEducationalServices: 'tutoring_and_educational_services',
    Upholstery: 'upholstery',
    Urologists: 'urologists',
    UsedCarDealers: 'used_car_dealers',
    Utilities: 'utilities',
    VeganAndVegetarian: 'vegan_and_vegetarian',
    Venmo: 'venmo',
    Veterinarians: 'veterinarians',
    VideoGames: 'video_games',
    VintageAndThrift: 'vintage_and_thrift',
    VocationalSchools: 'vocational_schools',
    WarehousesAndWholesaleStores: 'warehouses_and_wholesale_stores',
    Water: 'water',
    WaterAndWasteManagement: 'water_and_waste_management',
    WaterSports: 'water_sports',
    WebDesignAndDevelopment: 'web_design_and_development',
    WeddingAndBridal: 'wedding_and_bridal',
    Welding: 'welding',
    Wholesale: 'wholesale',
    WineBar: 'wine_bar',
    Winery: 'winery',
    Wire: 'wire',
    WireTransfer: 'wire_transfer',
    Withdrawal: 'withdrawal',
    WomensStore: 'women\'s_store',
    WoodProducts: 'wood_products',
    WritingCopywritingAndTechnicalWriting: 'writing_copywriting_and_technical_writing',
    YogaAndPilates: 'yoga_and_pilates',
    YouthOrganizations: 'youth_organizations',
    Zoo: 'zoo'
};
exports.TransactionStatusEnum = {
    Pending: 'pending',
    Posted: 'posted'
};
exports.TransactionTypeEnum = {
    Ach: 'ach',
    Adjustment: 'adjustment',
    Atm: 'atm',
    BankCharge: 'bank_charge',
    BillPayment: 'bill_payment',
    CardPayment: 'card_payment',
    Cash: 'cash',
    Cashback: 'cashback',
    Charge: 'charge',
    Cheque: 'cheque',
    Credit: 'credit',
    Debit: 'debit',
    Deposit: 'deposit',
    DigitalPayment: 'digital_payment',
    DirectDebit: 'direct_debit',
    Fee: 'fee',
    InStore: 'in_store',
    Interest: 'interest',
    Online: 'online',
    Other: 'other',
    Payment: 'payment',
    Purchase: 'purchase',
    StandingOrder: 'standing_order',
    Transaction: 'transaction',
    Transfer: 'transfer',
    Wire: 'wire',
    Withdrawal: 'withdrawal',
    Minus: '-'
};
/**
 * Detailed transaction category
 * @export
 * @enum {string}
 */
exports.TransactionCategoryDetailed = {
    AutoAndTransport: 'auto_and_transport',
    BillsAndUtilities: 'bills_and_utilities',
    BusinessServices: 'business_services',
    Education: 'education',
    Entertainment: 'entertainment',
    FeesAndCharges: 'fees_and_charges',
    Financial: 'financial',
    FoodAndDining: 'food_and_dining',
    GiftsAndDonations: 'gifts_and_donations',
    HealthAndFitness: 'health_and_fitness',
    Home: 'home',
    Income: 'income',
    Investments: 'investments',
    Kids: 'kids',
    PersonalCare: 'personal_care',
    Pets: 'pets',
    Shopping: 'shopping',
    Taxes: 'taxes',
    Transfer: 'transfer',
    Travel: 'travel',
    AutoInsurance: 'auto_insurance',
    AutoPayment: 'auto_payment',
    Gas: 'gas',
    Parking: 'parking',
    PublicTransportation: 'public_transportation',
    ServiceAndParts: 'service_and_parts',
    DomainNames: 'domain_names',
    FraudProtection: 'fraud_protection',
    HomePhone: 'home_phone',
    Hosting: 'hosting',
    Internet: 'internet',
    MobilePhone: 'mobile_phone',
    Television: 'television',
    Utilities: 'utilities',
    Advertising: 'advertising',
    Legal: 'legal',
    OfficeSupplies: 'office_supplies',
    Printing: 'printing',
    Shipping: 'shipping',
    BooksAndSupplies: 'books_and_supplies',
    StudentLoan: 'student_loan',
    Tuition: 'tuition',
    Amusement: 'amusement',
    Arts: 'arts',
    MoviesAndDvds: 'movies_and_dvds',
    Music: 'music',
    NewspapersAndMagazines: 'newspapers_and_magazines',
    AtmFee: 'atm_fee',
    BankingFee: 'banking_fee',
    FinanceCharge: 'finance_charge',
    LateFee: 'late_fee',
    ServiceFee: 'service_fee',
    TradeCommissions: 'trade_commissions',
    FinancialAdvisor: 'financial_advisor',
    LifeInsurance: 'life_insurance',
    AlcoholAndBars: 'alcohol_and_bars',
    CoffeeShops: 'coffee_shops',
    FastFood: 'fast_food',
    Groceries: 'groceries',
    Restaurants: 'restaurants',
    Charity: 'charity',
    Gift: 'gift',
    Dentist: 'dentist',
    Doctor: 'doctor',
    Eyecare: 'eyecare',
    Gym: 'gym',
    HealthInsurance: 'health_insurance',
    Pharmacy: 'pharmacy',
    Sports: 'sports',
    Furnishings: 'furnishings',
    HomeImprovement: 'home_improvement',
    HomeInsurance: 'home_insurance',
    HomeServices: 'home_services',
    HomeSupplies: 'home_supplies',
    LawnAndGarden: 'lawn_and_garden',
    MortgageAndRent: 'mortgage_and_rent',
    Bonus: 'bonus',
    InterestIncome: 'interest_income',
    Paycheck: 'paycheck',
    Reimbursement: 'reimbursement',
    RentalIncome: 'rental_income',
    ReturnedPurchase: 'returned_purchase',
    Buy: 'buy',
    Deposit: 'deposit',
    DividendAndCapGains: 'dividend_and_cap_gains',
    Sell: 'sell',
    Withdrawal: 'withdrawal',
    Allowance: 'allowance',
    BabySupplies: 'baby_supplies',
    BabysitterAndDaycare: 'babysitter_and_daycare',
    ChildSupport: 'child_support',
    KidsActivities: 'kids_activities',
    Toys: 'toys',
    Hair: 'hair',
    Laundry: 'laundry',
    SpaAndMassage: 'spa_and_massage',
    PetFoodAndSupplies: 'pet_food_and_supplies',
    PetGrooming: 'pet_grooming',
    Veterinary: 'veterinary',
    Books: 'books',
    Clothing: 'clothing',
    Hobbies: 'hobbies',
    SportingGoods: 'sporting_goods',
    FederalTax: 'federal_tax',
    LocalTax: 'local_tax',
    PropertyTax: 'property_tax',
    SalesTax: 'sales_tax',
    StateTax: 'state_tax',
    CreditCardPayment: 'credit_card_payment',
    TransferForCashSpending: 'transfer_for_cash_spending',
    MortgagePayment: 'mortgage_payment',
    AirTravel: 'air_travel',
    Hotel: 'hotel',
    RentalCarAndTaxi: 'rental_car_and_taxi',
    Vacation: 'vacation',
    Cash: 'cash',
    Check: 'check',
    Uncategorized: 'uncategorized'
};
/**
 * Primary transaction category
 * @export
 * @enum {string}
 */
exports.TransactionCategoryPrimary = {
    AutoAndTransport: 'auto_and_transport',
    BillsAndUtilities: 'bills_and_utilities',
    BusinessServices: 'business_services',
    Education: 'education',
    Entertainment: 'entertainment',
    FeesAndCharges: 'fees_and_charges',
    Financial: 'financial',
    FoodAndDining: 'food_and_dining',
    GiftsAndDonations: 'gifts_and_donations',
    HealthAndFitness: 'health_and_fitness',
    Home: 'home',
    Income: 'income',
    Investments: 'investments',
    Kids: 'kids',
    PersonalCare: 'personal_care',
    Pets: 'pets',
    Shopping: 'shopping',
    Taxes: 'taxes',
    Transfer: 'transfer',
    Travel: 'travel',
    Uncategorized: 'uncategorized'
};
/**
 * Type of the transaction, ie loan
 * @export
 * @enum {string}
 */
exports.TransactionEventType = {
    Ach: 'ach',
    Adjustment: 'adjustment',
    Atm: 'atm',
    BankCharge: 'bank_charge',
    BillPayment: 'bill_payment',
    CardPayment: 'card_payment',
    Cash: 'cash',
    Cashback: 'cashback',
    Charge: 'charge',
    Cheque: 'cheque',
    Credit: 'credit',
    Debit: 'debit',
    Deposit: 'deposit',
    DigitalPayment: 'digital_payment',
    DirectDebit: 'direct_debit',
    Fee: 'fee',
    InStore: 'in_store',
    Interest: 'interest',
    Online: 'online',
    Other: 'other',
    Payment: 'payment',
    Purchase: 'purchase',
    StandingOrder: 'standing_order',
    Transaction: 'transaction',
    Transfer: 'transfer',
    Wire: 'wire',
    Withdrawal: 'withdrawal'
};
exports.TransactionToEnrichDirectionEnum = {
    Incoming: 'incoming',
    Outgoing: 'outgoing'
};
exports.TransactionToEnrichOwnerTypeEnum = {
    Consumer: 'consumer',
    Business: 'business'
};
exports.UpdatedBalanceEventEventTypeEnum = {
    UpdatedBalance: 'updated_balance'
};
exports.WebhookEventEnvironmentEnum = {
    Sandbox: 'sandbox',
    Production: 'production'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.WebhookSource = {
    Plaid: 'plaid',
    Teller: 'teller',
    Mx: 'mx',
    Fuse: 'fuse',
    Snaptrade: 'snaptrade',
    Mono: 'mono',
    Truelayer: 'truelayer',
    Finverse: 'finverse'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.WebhookType = {
    FinancialConnectionSyncData: 'financial_connection.sync_data',
    FinancialConnectionDisconnected: 'financial_connection.disconnected',
    FinancialConnectionFinished: 'financial_connection.finished',
    TransactionsUpdates: 'transactions.updates',
    AssetsReportReady: 'assets.report_ready'
};
/**
 * FuseApi - axios parameter creator
 * @export
 */
const FuseApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} accountId
         * @param {AddAccountEventsRequest} [addAccountEventsRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountEvents: (accountId, addAccountEventsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'accountId' is not null or undefined
            (0, common_1.assertParamExists)('addAccountEvents', 'accountId', accountId);
            const localVarPath = `/v1/accounts/{account_id}/events`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(addAccountEventsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {CreateAssetReportRequest} [createAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetReport: (createAssetReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/financial_connections/asset_report/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createAssetReportRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Starts the background process that will calculate the consumer risk report depending on the customization passed in.
         * @param {CreateConsumerRiskReportRequest} [createConsumerRiskReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsumerRiskReport: (createConsumerRiskReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/risk_report/consumer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createConsumerRiskReportRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {CreateConsumerRiskReportCustomizationRequest} [createConsumerRiskReportCustomizationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsumerRiskReportCustomization: (createConsumerRiskReportCustomizationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/risk_report/consumer/customization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createConsumerRiskReportCustomizationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a link token to start the process of a user connecting to a specific financial institution.
         * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLinkToken: (createLinkTokenRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/link/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createLinkTokenRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {CreateSessionRequest} [createSessionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: (createSessionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createSessionRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a financial connection
         * @param {string} financialConnectionIdToDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFinancialConnection: (financialConnectionIdToDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'financialConnectionIdToDelete' is not null or undefined
            (0, common_1.assertParamExists)('deleteFinancialConnection', 'financialConnectionIdToDelete', financialConnectionIdToDelete);
            const localVarPath = `/v1/financial_connections/{financial_connection_id_to_delete}`
                .replace(`{${"financial_connection_id_to_delete"}}`, encodeURIComponent(String(financialConnectionIdToDelete)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} fuseClientId
         * @param {string} fuseApiKey
         * @param {EnrichTransactionsRequest} [enrichTransactionsRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrichTransactions: (fuseClientId, fuseApiKey, enrichTransactionsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fuseClientId' is not null or undefined
            (0, common_1.assertParamExists)('enrichTransactions', 'fuseClientId', fuseClientId);
            // verify required parameter 'fuseApiKey' is not null or undefined
            (0, common_1.assertParamExists)('enrichTransactions', 'fuseApiKey', fuseApiKey);
            const localVarPath = `/v1/transactions/enrich`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            if (fuseClientId != null) {
                localVarHeaderParameter['Fuse-Client-Id'] = String(fuseClientId);
            }
            if (fuseApiKey != null) {
                localVarHeaderParameter['Fuse-Api-Key'] = String(fuseApiKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(enrichTransactionsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * API to exchange a public token for an access token and financial connection id
         * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeFinancialConnectionsPublicToken: (exchangeFinancialConnectionsPublicTokenRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/financial_connections/public_token/exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(exchangeFinancialConnectionsPublicTokenRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {GetAssetReportRequest} [getAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetReport: (getAssetReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/financial_connections/asset_report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getAssetReportRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get consumer risk report
         * @param {string} consumerRiskReportId
         * @param {boolean} [recalculate] An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsumerRiskReport: (consumerRiskReportId, recalculate, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'consumerRiskReportId' is not null or undefined
            (0, common_1.assertParamExists)('getConsumerRiskReport', 'consumerRiskReportId', consumerRiskReportId);
            const localVarPath = `/v1/risk_report/consumer/{consumer_risk_report_id}`
                .replace(`{${"consumer_risk_report_id"}}`, encodeURIComponent(String(consumerRiskReportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            if (recalculate !== undefined) {
                localVarQueryParameter['recalculate'] = recalculate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the \'create session\' endpoint
         * @summary Get entity
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity: (entityId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'entityId' is not null or undefined
            (0, common_1.assertParamExists)('getEntity', 'entityId', entityId);
            const localVarPath = `/v1/entities/{entity_id}`
                .replace(`{${"entity_id"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get finance score
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinanceScore: (accountId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'accountId' is not null or undefined
            (0, common_1.assertParamExists)('getFinanceScore', 'accountId', accountId);
            const localVarPath = `/v1/accounts/{account_id}/finance_score`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get financial connection details
         * @param {string} financialConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnection: (financialConnectionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'financialConnectionId' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnection', 'financialConnectionId', financialConnectionId);
            const localVarPath = `/v1/financial_connections/{financial_connection_id}`
                .replace(`{${"financial_connection_id"}}`, encodeURIComponent(String(financialConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get account details
         * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountDetails: (getFinancialConnectionsAccountDetailsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getFinancialConnectionsAccountDetailsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsAccountDetails', 'getFinancialConnectionsAccountDetailsRequest', getFinancialConnectionsAccountDetailsRequest);
            const localVarPath = `/v1/financial_connections/accounts/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsAccountDetailsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
         * @param {GetFinancialConnectionsAccountStatementRequest} [getFinancialConnectionsAccountStatementRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountStatement: (getFinancialConnectionsAccountStatementRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/financial_connections/accounts/statement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsAccountStatementRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get accounts
         * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccounts: (getFinancialConnectionsAccountsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getFinancialConnectionsAccountsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsAccounts', 'getFinancialConnectionsAccountsRequest', getFinancialConnectionsAccountsRequest);
            const localVarPath = `/v1/financial_connections/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsAccountsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get balances
         * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsBalances: (getFinancialConnectionsBalanceRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getFinancialConnectionsBalanceRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsBalances', 'getFinancialConnectionsBalanceRequest', getFinancialConnectionsBalanceRequest);
            const localVarPath = `/v1/financial_connections/balances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsBalanceRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get account owners
         * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsOwners: (getFinancialConnectionsOwnersRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getFinancialConnectionsOwnersRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsOwners', 'getFinancialConnectionsOwnersRequest', getFinancialConnectionsOwnersRequest);
            const localVarPath = `/v1/financial_connections/owners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsOwnersRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get transactions
         * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsTransactions: (getFinancialConnectionsTransactionsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getFinancialConnectionsTransactionsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsTransactions', 'getFinancialConnectionsTransactionsRequest', getFinancialConnectionsTransactionsRequest);
            const localVarPath = `/v1/financial_connections/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsTransactionsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Receive metadata for a financial institution
         * @summary Get a financial institution
         * @param {string} institutionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialInstitution: (institutionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'institutionId' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialInstitution', 'institutionId', institutionId);
            const localVarPath = `/v1/financial_connections/institutions/{institution_id}`
                .replace(`{${"institution_id"}}`, encodeURIComponent(String(institutionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get investment holdings
         * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentHoldings: (getInvestmentHoldingsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getInvestmentHoldingsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getInvestmentHoldings', 'getInvestmentHoldingsRequest', getInvestmentHoldingsRequest);
            const localVarPath = `/v1/financial_connections/investments/holdings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getInvestmentHoldingsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get investment transactions
         * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentTransactions: (getInvestmentTransactionsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getInvestmentTransactionsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getInvestmentTransactions', 'getInvestmentTransactionsRequest', getInvestmentTransactionsRequest);
            const localVarPath = `/v1/financial_connections/investments/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getInvestmentTransactionsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
         * @summary Migrate financial connection
         * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateFinancialConnection: (migrateFinancialConnectionsTokenRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/financial_connections/migrate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(migrateFinancialConnectionsTokenRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAssetReport: (refreshAssetReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/financial_connections/asset_report/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(refreshAssetReportRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {string} fuseVerification
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsData: (fuseVerification, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'fuseVerification' is not null or undefined
            (0, common_1.assertParamExists)('syncFinancialConnectionsData', 'fuseVerification', fuseVerification);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('syncFinancialConnectionsData', 'body', body);
            const localVarPath = `/v1/financial_connections/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            if (fuseVerification != null) {
                localVarHeaderParameter['Fuse-Verification'] = String(fuseVerification);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update consumer risk report customization
         * @param {string} consumerRiskReportCustomizationId
         * @param {UpdateConsumerRiskReportCustomizationRequest} [updateConsumerRiskReportCustomizationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConsumerRiskReportCustomization: (consumerRiskReportCustomizationId, updateConsumerRiskReportCustomizationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'consumerRiskReportCustomizationId' is not null or undefined
            (0, common_1.assertParamExists)('updateConsumerRiskReportCustomization', 'consumerRiskReportCustomizationId', consumerRiskReportCustomizationId);
            const localVarPath = `/v1/risk_report/consumer/customization/{consumer_risk_report_customization_id}`
                .replace(`{${"consumer_risk_report_customization_id"}}`, encodeURIComponent(String(consumerRiskReportCustomizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateConsumerRiskReportCustomizationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get liabilities
         * @param {GetLiabilitiesRequest} getLiabilitiesRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FinancialConnectionsLiabilitiesPost: (getLiabilitiesRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getLiabilitiesRequest' is not null or undefined
            (0, common_1.assertParamExists)('v1FinancialConnectionsLiabilitiesPost', 'getLiabilitiesRequest', getLiabilitiesRequest);
            const localVarPath = `/v1/financial_connections/liabilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getLiabilitiesRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.FuseApiAxiosParamCreator = FuseApiAxiosParamCreator;
/**
 * FuseApi - functional programming interface
 * @export
 */
const FuseApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FuseApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} accountId
         * @param {AddAccountEventsRequest} [addAccountEventsRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountEvents(accountId, addAccountEventsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAccountEvents(accountId, addAccountEventsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {CreateAssetReportRequest} [createAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetReport(createAssetReportRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssetReport(createAssetReportRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Starts the background process that will calculate the consumer risk report depending on the customization passed in.
         * @param {CreateConsumerRiskReportRequest} [createConsumerRiskReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsumerRiskReport(createConsumerRiskReportRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createConsumerRiskReport(createConsumerRiskReportRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {CreateConsumerRiskReportCustomizationRequest} [createConsumerRiskReportCustomizationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsumerRiskReportCustomization(createConsumerRiskReportCustomizationRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createConsumerRiskReportCustomization(createConsumerRiskReportCustomizationRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a link token to start the process of a user connecting to a specific financial institution.
         * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLinkToken(createLinkTokenRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createLinkToken(createLinkTokenRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {CreateSessionRequest} [createSessionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(createSessionRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createSession(createSessionRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Delete a financial connection
         * @param {string} financialConnectionIdToDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFinancialConnection(financialConnectionIdToDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFinancialConnection(financialConnectionIdToDelete, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} fuseClientId
         * @param {string} fuseApiKey
         * @param {EnrichTransactionsRequest} [enrichTransactionsRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrichTransactions(fuseClientId, fuseApiKey, enrichTransactionsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.enrichTransactions(fuseClientId, fuseApiKey, enrichTransactionsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * API to exchange a public token for an access token and financial connection id
         * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {GetAssetReportRequest} [getAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetReport(getAssetReportRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAssetReport(getAssetReportRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get consumer risk report
         * @param {string} consumerRiskReportId
         * @param {boolean} [recalculate] An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsumerRiskReport(consumerRiskReportId, recalculate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConsumerRiskReport(consumerRiskReportId, recalculate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the \'create session\' endpoint
         * @summary Get entity
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity(entityId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getEntity(entityId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get finance score
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinanceScore(accountId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinanceScore(accountId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get financial connection details
         * @param {string} financialConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnection(financialConnectionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnection(financialConnectionId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get account details
         * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
         * @param {GetFinancialConnectionsAccountStatementRequest} [getFinancialConnectionsAccountStatementRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get accounts
         * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get balances
         * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get account owners
         * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get transactions
         * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Receive metadata for a financial institution
         * @summary Get a financial institution
         * @param {string} institutionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialInstitution(institutionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialInstitution(institutionId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get investment holdings
         * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentHoldings(getInvestmentHoldingsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getInvestmentHoldings(getInvestmentHoldingsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get investment transactions
         * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentTransactions(getInvestmentTransactionsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getInvestmentTransactions(getInvestmentTransactionsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
         * @summary Migrate financial connection
         * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAssetReport(refreshAssetReportRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.refreshAssetReport(refreshAssetReportRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {string} fuseVerification
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsData(fuseVerification, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.syncFinancialConnectionsData(fuseVerification, body, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Update consumer risk report customization
         * @param {string} consumerRiskReportCustomizationId
         * @param {UpdateConsumerRiskReportCustomizationRequest} [updateConsumerRiskReportCustomizationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConsumerRiskReportCustomization(consumerRiskReportCustomizationId, updateConsumerRiskReportCustomizationRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateConsumerRiskReportCustomization(consumerRiskReportCustomizationId, updateConsumerRiskReportCustomizationRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get liabilities
         * @param {GetLiabilitiesRequest} getLiabilitiesRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.FuseApiFp = FuseApiFp;
/**
 * FuseApi - factory interface
 * @export
 */
const FuseApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FuseApiFp)(configuration);
    return {
        /**
         *
         * @param {string} accountId
         * @param {AddAccountEventsRequest} [addAccountEventsRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountEvents(accountId, addAccountEventsRequest, options) {
            return localVarFp.addAccountEvents(accountId, addAccountEventsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {CreateAssetReportRequest} [createAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetReport(createAssetReportRequest, options) {
            return localVarFp.createAssetReport(createAssetReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts the background process that will calculate the consumer risk report depending on the customization passed in.
         * @param {CreateConsumerRiskReportRequest} [createConsumerRiskReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsumerRiskReport(createConsumerRiskReportRequest, options) {
            return localVarFp.createConsumerRiskReport(createConsumerRiskReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CreateConsumerRiskReportCustomizationRequest} [createConsumerRiskReportCustomizationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsumerRiskReportCustomization(createConsumerRiskReportCustomizationRequest, options) {
            return localVarFp.createConsumerRiskReportCustomization(createConsumerRiskReportCustomizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a link token to start the process of a user connecting to a specific financial institution.
         * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLinkToken(createLinkTokenRequest, options) {
            return localVarFp.createLinkToken(createLinkTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {CreateSessionRequest} [createSessionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(createSessionRequest, options) {
            return localVarFp.createSession(createSessionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a financial connection
         * @param {string} financialConnectionIdToDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFinancialConnection(financialConnectionIdToDelete, options) {
            return localVarFp.deleteFinancialConnection(financialConnectionIdToDelete, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} fuseClientId
         * @param {string} fuseApiKey
         * @param {EnrichTransactionsRequest} [enrichTransactionsRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrichTransactions(fuseClientId, fuseApiKey, enrichTransactionsRequest, options) {
            return localVarFp.enrichTransactions(fuseClientId, fuseApiKey, enrichTransactionsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API to exchange a public token for an access token and financial connection id
         * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options) {
            return localVarFp.exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {GetAssetReportRequest} [getAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetReport(getAssetReportRequest, options) {
            return localVarFp.getAssetReport(getAssetReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get consumer risk report
         * @param {string} consumerRiskReportId
         * @param {boolean} [recalculate] An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsumerRiskReport(consumerRiskReportId, recalculate, options) {
            return localVarFp.getConsumerRiskReport(consumerRiskReportId, recalculate, options).then((request) => request(axios, basePath));
        },
        /**
         * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the \'create session\' endpoint
         * @summary Get entity
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity(entityId, options) {
            return localVarFp.getEntity(entityId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get finance score
         * @param {string} accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinanceScore(accountId, options) {
            return localVarFp.getFinanceScore(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get financial connection details
         * @param {string} financialConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnection(financialConnectionId, options) {
            return localVarFp.getFinancialConnection(financialConnectionId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get account details
         * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options) {
            return localVarFp.getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
         * @param {GetFinancialConnectionsAccountStatementRequest} [getFinancialConnectionsAccountStatementRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest, options) {
            return localVarFp.getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get accounts
         * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options) {
            return localVarFp.getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get balances
         * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options) {
            return localVarFp.getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get account owners
         * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options) {
            return localVarFp.getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get transactions
         * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options) {
            return localVarFp.getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Receive metadata for a financial institution
         * @summary Get a financial institution
         * @param {string} institutionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialInstitution(institutionId, options) {
            return localVarFp.getFinancialInstitution(institutionId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get investment holdings
         * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentHoldings(getInvestmentHoldingsRequest, options) {
            return localVarFp.getInvestmentHoldings(getInvestmentHoldingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get investment transactions
         * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentTransactions(getInvestmentTransactionsRequest, options) {
            return localVarFp.getInvestmentTransactions(getInvestmentTransactionsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
         * @summary Migrate financial connection
         * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options) {
            return localVarFp.migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
         * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAssetReport(refreshAssetReportRequest, options) {
            return localVarFp.refreshAssetReport(refreshAssetReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {string} fuseVerification
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsData(fuseVerification, body, options) {
            return localVarFp.syncFinancialConnectionsData(fuseVerification, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update consumer risk report customization
         * @param {string} consumerRiskReportCustomizationId
         * @param {UpdateConsumerRiskReportCustomizationRequest} [updateConsumerRiskReportCustomizationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConsumerRiskReportCustomization(consumerRiskReportCustomizationId, updateConsumerRiskReportCustomizationRequest, options) {
            return localVarFp.updateConsumerRiskReportCustomization(consumerRiskReportCustomizationId, updateConsumerRiskReportCustomizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get liabilities
         * @param {GetLiabilitiesRequest} getLiabilitiesRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options) {
            return localVarFp.v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FuseApiFactory = FuseApiFactory;
/**
 * FuseApi - object-oriented interface
 * @export
 * @class FuseApi
 * @extends {BaseAPI}
 */
class FuseApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} accountId
     * @param {AddAccountEventsRequest} [addAccountEventsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    addAccountEvents(accountId, addAccountEventsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).addAccountEvents(accountId, addAccountEventsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {CreateAssetReportRequest} [createAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createAssetReport(createAssetReportRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).createAssetReport(createAssetReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Starts the background process that will calculate the consumer risk report depending on the customization passed in.
     * @param {CreateConsumerRiskReportRequest} [createConsumerRiskReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createConsumerRiskReport(createConsumerRiskReportRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).createConsumerRiskReport(createConsumerRiskReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CreateConsumerRiskReportCustomizationRequest} [createConsumerRiskReportCustomizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createConsumerRiskReportCustomization(createConsumerRiskReportCustomizationRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).createConsumerRiskReportCustomization(createConsumerRiskReportCustomizationRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a link token to start the process of a user connecting to a specific financial institution.
     * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createLinkToken(createLinkTokenRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).createLinkToken(createLinkTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
     * @param {CreateSessionRequest} [createSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createSession(createSessionRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).createSession(createSessionRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a financial connection
     * @param {string} financialConnectionIdToDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    deleteFinancialConnection(financialConnectionIdToDelete, options) {
        return (0, exports.FuseApiFp)(this.configuration).deleteFinancialConnection(financialConnectionIdToDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {EnrichTransactionsRequest} [enrichTransactionsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    enrichTransactions(fuseClientId, fuseApiKey, enrichTransactionsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).enrichTransactions(fuseClientId, fuseApiKey, enrichTransactionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * API to exchange a public token for an access token and financial connection id
     * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {GetAssetReportRequest} [getAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getAssetReport(getAssetReportRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getAssetReport(getAssetReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get consumer risk report
     * @param {string} consumerRiskReportId
     * @param {boolean} [recalculate] An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getConsumerRiskReport(consumerRiskReportId, recalculate, options) {
        return (0, exports.FuseApiFp)(this.configuration).getConsumerRiskReport(consumerRiskReportId, recalculate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the \'create session\' endpoint
     * @summary Get entity
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getEntity(entityId, options) {
        return (0, exports.FuseApiFp)(this.configuration).getEntity(entityId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get finance score
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinanceScore(accountId, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinanceScore(accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get financial connection details
     * @param {string} financialConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnection(financialConnectionId, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnection(financialConnectionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get account details
     * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
     * @param {GetFinancialConnectionsAccountStatementRequest} [getFinancialConnectionsAccountStatementRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsAccountStatement(getFinancialConnectionsAccountStatementRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get accounts
     * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get balances
     * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get account owners
     * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get transactions
     * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Receive metadata for a financial institution
     * @summary Get a financial institution
     * @param {string} institutionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialInstitution(institutionId, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialInstitution(institutionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get investment holdings
     * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getInvestmentHoldings(getInvestmentHoldingsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getInvestmentHoldings(getInvestmentHoldingsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get investment transactions
     * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getInvestmentTransactions(getInvestmentTransactionsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getInvestmentTransactions(getInvestmentTransactionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
     * @summary Migrate financial connection
     * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    refreshAssetReport(refreshAssetReportRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).refreshAssetReport(refreshAssetReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
     * @summary Sync financial connections data
     * @param {string} fuseVerification
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    syncFinancialConnectionsData(fuseVerification, body, options) {
        return (0, exports.FuseApiFp)(this.configuration).syncFinancialConnectionsData(fuseVerification, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update consumer risk report customization
     * @param {string} consumerRiskReportCustomizationId
     * @param {UpdateConsumerRiskReportCustomizationRequest} [updateConsumerRiskReportCustomizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    updateConsumerRiskReportCustomization(consumerRiskReportCustomizationId, updateConsumerRiskReportCustomizationRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).updateConsumerRiskReportCustomization(consumerRiskReportCustomizationId, updateConsumerRiskReportCustomizationRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get liabilities
     * @param {GetLiabilitiesRequest} getLiabilitiesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FuseApi = FuseApi;
/**
 * RiskReportApi - axios parameter creator
 * @export
 */
const RiskReportApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Delete consumer risk report
         * @param {string} consumerRiskReportId
         * @param {string} fuseClientId
         * @param {string} fuseApiKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConsumerRiskReport: (consumerRiskReportId, fuseClientId, fuseApiKey, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'consumerRiskReportId' is not null or undefined
            (0, common_1.assertParamExists)('deleteConsumerRiskReport', 'consumerRiskReportId', consumerRiskReportId);
            // verify required parameter 'fuseClientId' is not null or undefined
            (0, common_1.assertParamExists)('deleteConsumerRiskReport', 'fuseClientId', fuseClientId);
            // verify required parameter 'fuseApiKey' is not null or undefined
            (0, common_1.assertParamExists)('deleteConsumerRiskReport', 'fuseApiKey', fuseApiKey);
            const localVarPath = `/v1/risk_report/consumer/{consumer_risk_report_id}`
                .replace(`{${"consumer_risk_report_id"}}`, encodeURIComponent(String(consumerRiskReportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            if (fuseClientId != null) {
                localVarHeaderParameter['Fuse-Client-Id'] = String(fuseClientId);
            }
            if (fuseApiKey != null) {
                localVarHeaderParameter['Fuse-Api-Key'] = String(fuseApiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get consumer risk report customization
         * @param {string} consumerRiskReportCustomizationId
         * @param {string} fuseClientId
         * @param {string} fuseApiKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsumerRiskReportCustomization: (consumerRiskReportCustomizationId, fuseClientId, fuseApiKey, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'consumerRiskReportCustomizationId' is not null or undefined
            (0, common_1.assertParamExists)('getConsumerRiskReportCustomization', 'consumerRiskReportCustomizationId', consumerRiskReportCustomizationId);
            // verify required parameter 'fuseClientId' is not null or undefined
            (0, common_1.assertParamExists)('getConsumerRiskReportCustomization', 'fuseClientId', fuseClientId);
            // verify required parameter 'fuseApiKey' is not null or undefined
            (0, common_1.assertParamExists)('getConsumerRiskReportCustomization', 'fuseApiKey', fuseApiKey);
            const localVarPath = `/v1/risk_report/consumer/customization/{consumer_risk_report_customization_id}`
                .replace(`{${"consumer_risk_report_customization_id"}}`, encodeURIComponent(String(consumerRiskReportCustomizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            if (fuseClientId != null) {
                localVarHeaderParameter['Fuse-Client-Id'] = String(fuseClientId);
            }
            if (fuseApiKey != null) {
                localVarHeaderParameter['Fuse-Api-Key'] = String(fuseApiKey);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.RiskReportApiAxiosParamCreator = RiskReportApiAxiosParamCreator;
/**
 * RiskReportApi - functional programming interface
 * @export
 */
const RiskReportApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.RiskReportApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Delete consumer risk report
         * @param {string} consumerRiskReportId
         * @param {string} fuseClientId
         * @param {string} fuseApiKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConsumerRiskReport(consumerRiskReportId, fuseClientId, fuseApiKey, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteConsumerRiskReport(consumerRiskReportId, fuseClientId, fuseApiKey, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get consumer risk report customization
         * @param {string} consumerRiskReportCustomizationId
         * @param {string} fuseClientId
         * @param {string} fuseApiKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsumerRiskReportCustomization(consumerRiskReportCustomizationId, fuseClientId, fuseApiKey, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConsumerRiskReportCustomization(consumerRiskReportCustomizationId, fuseClientId, fuseApiKey, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.RiskReportApiFp = RiskReportApiFp;
/**
 * RiskReportApi - factory interface
 * @export
 */
const RiskReportApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.RiskReportApiFp)(configuration);
    return {
        /**
         *
         * @summary Delete consumer risk report
         * @param {string} consumerRiskReportId
         * @param {string} fuseClientId
         * @param {string} fuseApiKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConsumerRiskReport(consumerRiskReportId, fuseClientId, fuseApiKey, options) {
            return localVarFp.deleteConsumerRiskReport(consumerRiskReportId, fuseClientId, fuseApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get consumer risk report customization
         * @param {string} consumerRiskReportCustomizationId
         * @param {string} fuseClientId
         * @param {string} fuseApiKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsumerRiskReportCustomization(consumerRiskReportCustomizationId, fuseClientId, fuseApiKey, options) {
            return localVarFp.getConsumerRiskReportCustomization(consumerRiskReportCustomizationId, fuseClientId, fuseApiKey, options).then((request) => request(axios, basePath));
        },
    };
};
exports.RiskReportApiFactory = RiskReportApiFactory;
/**
 * RiskReportApi - object-oriented interface
 * @export
 * @class RiskReportApi
 * @extends {BaseAPI}
 */
class RiskReportApi extends base_1.BaseAPI {
    /**
     *
     * @summary Delete consumer risk report
     * @param {string} consumerRiskReportId
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiskReportApi
     */
    deleteConsumerRiskReport(consumerRiskReportId, fuseClientId, fuseApiKey, options) {
        return (0, exports.RiskReportApiFp)(this.configuration).deleteConsumerRiskReport(consumerRiskReportId, fuseClientId, fuseApiKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get consumer risk report customization
     * @param {string} consumerRiskReportCustomizationId
     * @param {string} fuseClientId
     * @param {string} fuseApiKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RiskReportApi
     */
    getConsumerRiskReportCustomization(consumerRiskReportCustomizationId, fuseClientId, fuseApiKey, options) {
        return (0, exports.RiskReportApiFp)(this.configuration).getConsumerRiskReportCustomization(consumerRiskReportCustomizationId, fuseClientId, fuseApiKey, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RiskReportApi = RiskReportApi;
