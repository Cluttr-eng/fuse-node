"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FuseApi = exports.FuseApiFactory = exports.FuseApiFp = exports.FuseApiAxiosParamCreator = exports.WebhookType = exports.WebhookSource = exports.WebhookEventEnvironmentEnum = exports.TransactionStatusEnum = exports.Product = exports.MigrateFinancialConnectionsTokenRequestAggregatorEnum = exports.FuseApiWarningDataWarningsInnerSourceEnum = exports.FuseApiWarningSourceEnum = exports.FuseApiErrorSourceEnum = exports.FuseApiErrorTypeEnum = exports.FuseApiErrorCodeEnum = exports.FinancialInstitutionLogoFormatEnum = exports.FinancialInstitutionLogoTypeEnum = exports.FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum = exports.FinancialConnectionsOwnerEmailsInnerTypeEnum = exports.FinancialConnectionDetailsConnectionStatusEnum = exports.CountryCode = exports.Aggregator = exports.AccountType = exports.AccountSubtype = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * The account\'s subtype
 * @export
 * @enum {string}
 */
exports.AccountSubtype = {
    Checking: 'checking',
    Savings: 'savings',
    MoneyMarket: 'money_market',
    CertificateOfDeposit: 'certificate_of_deposit',
    Treasury: 'treasury',
    CreditCard: 'credit_card',
    Hsa: 'hsa',
    Paypal: 'paypal',
    Prepaid: 'prepaid',
    CashManagement: 'cash_management',
    Ebt: 'ebt',
    Auto: 'auto',
    Business: 'business',
    Commercial: 'commercial',
    Construction: 'construction',
    Consumer: 'consumer',
    HomeEquity: 'home_equity',
    Loan: 'loan',
    Mortgage: 'mortgage',
    Overdraft: 'overdraft',
    LineOfCredit: 'line_of_credit',
    Student: 'student',
    _529: '529',
    _401A: '401_a',
    _401K: '401_k',
    _403B: '403_b',
    _457B: '457_b',
    Brokerage: 'brokerage',
    CashIsa: 'cash_isa',
    CryptoExchange: 'crypto_exchange',
    EducationSavingAccount: 'education_saving_account',
    FixedAnnuity: 'fixed_annuity',
    Gic: 'gic',
    HealthReimbursementArrangement: 'health_reimbursement_arrangement',
    Ira: 'ira',
    Isa: 'isa',
    Keogh: 'keogh',
    Lif: 'lif',
    LifeInsurance: 'life_insurance',
    Lira: 'lira',
    Lrif: 'lrif',
    Lrsp: 'lrsp',
    MutualFund: 'mutual_fund',
    NonCustodialWallet: 'non_custodial_wallet',
    NonTaxableBrokerageAccount: 'non_taxable_brokerage_account',
    OtherAnnuity: 'other_annuity',
    OtherInsurance: 'other_insurance',
    Pension: 'pension',
    Prif: 'prif',
    ProfitSharingPlan: 'profit_sharing_plan',
    Qshr: 'qshr',
    Rdsp: 'rdsp',
    Resp: 'resp',
    Retirement: 'retirement',
    Rlif: 'rlif',
    RothIra: 'roth_ira',
    Roth401K: 'roth_401_k',
    Rrif: 'rrif',
    Rrsp: 'rrsp',
    Sarsep: 'sarsep',
    SepIra: 'sep_ira',
    SimpleIra: 'simple_ira',
    Sipp: 'sipp',
    StockPlan: 'stock_plan',
    Tfsa: 'tfsa',
    Trust: 'trust',
    Ugma: 'ugma',
    Utma: 'utma',
    VariableAnnuity: 'variable_annuity',
    SmallBusiness: 'small_business',
    Personal: 'personal',
    PersonalWithCollateral: 'personal_with_collateral',
    _457: '457',
    RolloverIra: 'rollover_ira',
    Taxable: 'taxable',
    NonTaxable: 'non_taxable',
    EmployeeStockOwnershipPlan: 'employee_stock_ownership_plan',
    Individual: 'individual',
    CashManagementAccount: 'cash_management_account',
    EmployeeStockPurchasePlan: 'employee_stock_purchase_plan',
    RegisteredEducationSavingsPlan: 'registered_education_savings_plan',
    FixedAnnuityTraditionalIra: 'fixed_annuity_traditional_ira',
    InheritedTraditionalIra: 'inherited_traditional_ira',
    FixedAnnuityRothIra: 'fixed_annuity_roth_ira',
    VariableAnnuityRothIra: 'variable_annuity_roth_ira',
    InheritedRothIra: 'inherited_roth_ira',
    AdvisoryAccount: 'advisory_account',
    BrokerageMargin: 'brokerage_margin',
    CharitableGiftAccount: 'charitable_gift_account',
    ChurchAccount: 'church_account',
    Conservatorship: 'conservatorship',
    Custodial: 'custodial',
    DefinedBenefitPlan: 'defined_benefit_plan',
    DefinedContributionPlan: 'defined_contribution_plan',
    Educational: 'educational',
    Estate: 'estate',
    Executor: 'executor',
    GroupRetirementSavingsPlan: 'group_retirement_savings_plan',
    GuaranteedInvestmentCertificate: 'guaranteed_investment_certificate',
    IndexedAnnuity: 'indexed_annuity',
    InvestmentClub: 'investment_club',
    IrrevocableTrust: 'irrevocable_trust',
    JointTenantsByEntirety: 'joint_tenants_by_entirety',
    JointTenantsCommunityProperty: 'joint_tenants_community_property',
    JointTenantsInCommon: 'joint_tenants_in_common',
    JointTenantsWithRightsOfSurvivorship: 'joint_tenants_with_rights_of_survivorship',
    KeoughPlan: 'keough_plan',
    LivingTrust: 'living_trust',
    LockedInRetirementAccount: 'locked_in_retirement_account',
    LockedInRetirementInvestmentFund: 'locked_in_retirement_investment_fund',
    LockedInRetirementSavingsAccount: 'locked_in_retirement_savings_account',
    MoneyPurchasePlan: 'money_purchase_plan',
    Partnership: 'partnership',
    _409A: '409_a',
    Rpp: 'rpp',
    RevocableTrust: 'revocable_trust',
    RothConversion: 'roth_conversion',
    SoleProprietorship: 'sole_proprietorship',
    SpousalIra: 'spousal_ira',
    SpousalRothIra: 'spousal_roth_ira',
    TestamentaryTrust: 'testamentary_trust',
    ThriftSavingsPlan: 'thrift_savings_plan',
    InheritedAnnuity: 'inherited_annuity',
    CorporateAccount: 'corporate_account',
    LimitedLiabilityAccount: 'limited_liability_account',
    Boat: 'boat',
    Powersports: 'powersports',
    Rv: 'rv',
    Heloc: 'heloc',
    VehicleInsurance: 'vehicle_insurance',
    Disability: 'disability',
    Health: 'health',
    LongTermCare: 'long_term_care',
    PropertyAndCasualty: 'property_and_casualty',
    UniversalLife: 'universal_life',
    TermLife: 'term_life',
    WholeLife: 'whole_life',
    AccidentalDeathAndDismemberment: 'accidental_death_and_dismemberment',
    VariableUniversalLife: 'variable_universal_life',
    Other: 'other'
};
/**
 * The account\'s type
 * @export
 * @enum {string}
 */
exports.AccountType = {
    Depository: 'depository',
    Credit: 'credit',
    Loan: 'loan',
    Investment: 'investment',
    Insurance: 'insurance',
    Property: 'property',
    Other: 'other'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.Aggregator = {
    Plaid: 'plaid',
    Teller: 'teller',
    Mx: 'mx',
    Snaptrade: 'snaptrade'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.CountryCode = {
    Us: 'US',
    Ca: 'CA'
};
exports.FinancialConnectionDetailsConnectionStatusEnum = {
    Connected: 'connected',
    Disconnected: 'disconnected',
    Finished: 'finished'
};
exports.FinancialConnectionsOwnerEmailsInnerTypeEnum = {
    Primary: 'primary',
    Secondary: 'secondary',
    Other: 'other'
};
exports.FinancialConnectionsOwnerPhoneNumbersInnerTypeEnum = {
    Home: 'home',
    Work: 'work',
    Mobile: 'mobile'
};
exports.FinancialInstitutionLogoTypeEnum = {
    Base64: 'base64',
    Url: 'url'
};
exports.FinancialInstitutionLogoFormatEnum = {
    Png: 'png',
    Jpeg: 'jpeg',
    Gif: 'gif',
    Svgxml: 'svg+xml'
};
exports.FuseApiErrorCodeEnum = {
    ClientError: 'client_error',
    InvalidHeaders: 'invalid_headers',
    InvalidRequestBody: 'invalid_request_body',
    InternalServerError: 'internal_server_error',
    OrganizationNotFound: 'organization_not_found',
    EntityNotFound: 'entity_not_found',
    SessionNotFound: 'session_not_found',
    FinancialInstitutionNotFound: 'financial_institution_not_found',
    MissingAccessToken: 'missing_access_token',
    MissingPlaidClientIdHeader: 'missing_plaid_client_id_header',
    MissingPlaidSecretHeader: 'missing_plaid_secret_header',
    MissingMxClientIdHeader: 'missing_mx_client_id_header',
    MissingMxApiKeyHeader: 'missing_mx_api_key_header',
    MissingTellerPrivateKeyHeader: 'missing_teller_private_key_header',
    MissingTellerCertificateHeader: 'missing_teller_certificate_header',
    MissingTellerApplicationIdHeader: 'missing_teller_application_id_header',
    AggregatorError: 'aggregator_error',
    AggregatorDisconnectedError: 'aggregator_disconnected_error',
    AggregatorConnectionFinishedError: 'aggregator_connection_finished_error',
    RequestBodyMissing: 'request_body_missing'
};
exports.FuseApiErrorTypeEnum = {
    AuthError: 'auth_error',
    NotFound: 'not_found',
    BadRequest: 'bad_request',
    ServerError: 'server_error'
};
exports.FuseApiErrorSourceEnum = {
    Internal: 'internal',
    Aggregator: 'aggregator'
};
exports.FuseApiWarningSourceEnum = {
    Internal: 'internal',
    Aggregator: 'aggregator'
};
exports.FuseApiWarningDataWarningsInnerSourceEnum = {
    Internal: 'internal',
    Aggregator: 'aggregator'
};
exports.MigrateFinancialConnectionsTokenRequestAggregatorEnum = {
    Plaid: 'plaid',
    Mx: 'mx'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.Product = {
    AccountDetails: 'account_details',
    Balance: 'balance',
    Ownership: 'ownership',
    Transactions: 'transactions',
    Investments: 'investments',
    AssetReport: 'asset_report'
};
exports.TransactionStatusEnum = {
    Pending: 'pending',
    Posted: 'posted'
};
exports.WebhookEventEnvironmentEnum = {
    Sandbox: 'sandbox',
    Production: 'production'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.WebhookSource = {
    Plaid: 'plaid',
    Teller: 'teller',
    Mx: 'mx',
    Fuse: 'fuse',
    Snaptrade: 'snaptrade'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.WebhookType = {
    FinancialConnectionSyncData: 'financial_connection.sync_data',
    FinancialConnectionDisconnected: 'financial_connection.disconnected',
    FinancialConnectionFinished: 'financial_connection.finished',
    TransactionUpdates: 'transaction.updates'
};
/**
 * FuseApi - axios parameter creator
 * @export
 */
const FuseApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this endpoint to generate an Asset Report for a user.
         * @param {CreateAssetReportRequest} [createAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetReport: (createAssetReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/asset_report/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createAssetReportRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create a link token to start the process of a user connecting to a specific financial institution.
         * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLinkToken: (createLinkTokenRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/link/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createLinkTokenRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {CreateSessionRequest} [createSessionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: (createSessionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createSessionRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a financial connection
         * @param {string} financialConnectionIdToDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFinancialConnection: (financialConnectionIdToDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'financialConnectionIdToDelete' is not null or undefined
            (0, common_1.assertParamExists)('deleteFinancialConnection', 'financialConnectionIdToDelete', financialConnectionIdToDelete);
            const localVarPath = `/v1/financial_connections/{financial_connection_id_to_delete}`
                .replace(`{${"financial_connection_id_to_delete"}}`, encodeURIComponent(String(financialConnectionIdToDelete)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * API to exchange a public token for an access token and financial connection id
         * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeFinancialConnectionsPublicToken: (exchangeFinancialConnectionsPublicTokenRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/financial_connections/public_token/exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(exchangeFinancialConnectionsPublicTokenRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves the Asset Report in JSON format.
         * @param {GetAssetReportRequest} [getAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetReport: (getAssetReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/asset_report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getAssetReportRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get an entity - an entity is automatically created after a successful institution connection
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity: (entityId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'entityId' is not null or undefined
            (0, common_1.assertParamExists)('getEntity', 'entityId', entityId);
            const localVarPath = `/v1/entities/{entity_id}`
                .replace(`{${"entity_id"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get financial connection details
         * @param {string} financialConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnection: (financialConnectionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'financialConnectionId' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnection', 'financialConnectionId', financialConnectionId);
            const localVarPath = `/v1/financial_connections/{financial_connection_id}`
                .replace(`{${"financial_connection_id"}}`, encodeURIComponent(String(financialConnectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get account details
         * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountDetails: (getFinancialConnectionsAccountDetailsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getFinancialConnectionsAccountDetailsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsAccountDetails', 'getFinancialConnectionsAccountDetailsRequest', getFinancialConnectionsAccountDetailsRequest);
            const localVarPath = `/v1/financial_connections/accounts/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsAccountDetailsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get accounts
         * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccounts: (getFinancialConnectionsAccountsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getFinancialConnectionsAccountsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsAccounts', 'getFinancialConnectionsAccountsRequest', getFinancialConnectionsAccountsRequest);
            const localVarPath = `/v1/financial_connections/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsAccountsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get balances
         * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsBalances: (getFinancialConnectionsBalanceRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getFinancialConnectionsBalanceRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsBalances', 'getFinancialConnectionsBalanceRequest', getFinancialConnectionsBalanceRequest);
            const localVarPath = `/v1/financial_connections/balances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsBalanceRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get account owners
         * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsOwners: (getFinancialConnectionsOwnersRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getFinancialConnectionsOwnersRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsOwners', 'getFinancialConnectionsOwnersRequest', getFinancialConnectionsOwnersRequest);
            const localVarPath = `/v1/financial_connections/owners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsOwnersRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get transactions
         * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsTransactions: (getFinancialConnectionsTransactionsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getFinancialConnectionsTransactionsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialConnectionsTransactions', 'getFinancialConnectionsTransactionsRequest', getFinancialConnectionsTransactionsRequest);
            const localVarPath = `/v1/financial_connections/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getFinancialConnectionsTransactionsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Receive metadata for a financial institution
         * @summary Get a financial institution
         * @param {string} institutionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialInstitution: (institutionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'institutionId' is not null or undefined
            (0, common_1.assertParamExists)('getFinancialInstitution', 'institutionId', institutionId);
            const localVarPath = `/v1/financial_connections/institutions/{institution_id}`
                .replace(`{${"institution_id"}}`, encodeURIComponent(String(institutionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get investment holdings
         * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentHoldings: (getInvestmentHoldingsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getInvestmentHoldingsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getInvestmentHoldings', 'getInvestmentHoldingsRequest', getInvestmentHoldingsRequest);
            const localVarPath = `/v1/financial_connections/investments/holdings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getInvestmentHoldingsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get investment transactions
         * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentTransactions: (getInvestmentTransactionsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getInvestmentTransactionsRequest' is not null or undefined
            (0, common_1.assertParamExists)('getInvestmentTransactions', 'getInvestmentTransactionsRequest', getInvestmentTransactionsRequest);
            const localVarPath = `/v1/financial_connections/investments/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getInvestmentTransactionsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
         * @summary Migrate financial connection
         * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateFinancialConnection: (migrateFinancialConnectionsTokenRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/financial_connections/migrate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(migrateFinancialConnectionsTokenRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Refreshes the Asset Report in JSON format.
         * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAssetReport: (refreshAssetReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/asset_report/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(refreshAssetReportRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsData: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('syncFinancialConnectionsData', 'body', body);
            const localVarPath = `/v1/financial_connections/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get liabilities
         * @param {GetLiabilitiesRequest} getLiabilitiesRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FinancialConnectionsLiabilitiesPost: (getLiabilitiesRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'getLiabilitiesRequest' is not null or undefined
            (0, common_1.assertParamExists)('v1FinancialConnectionsLiabilitiesPost', 'getLiabilitiesRequest', getLiabilitiesRequest);
            const localVarPath = `/v1/financial_connections/liabilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication fuseApiKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Api-Key", configuration);
            // authentication fuseClientId required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Fuse-Client-Id", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getLiabilitiesRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.FuseApiAxiosParamCreator = FuseApiAxiosParamCreator;
/**
 * FuseApi - functional programming interface
 * @export
 */
const FuseApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FuseApiAxiosParamCreator)(configuration);
    return {
        /**
         * Use this endpoint to generate an Asset Report for a user.
         * @param {CreateAssetReportRequest} [createAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetReport(createAssetReportRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAssetReport(createAssetReportRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create a link token to start the process of a user connecting to a specific financial institution.
         * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLinkToken(createLinkTokenRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createLinkToken(createLinkTokenRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {CreateSessionRequest} [createSessionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(createSessionRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createSession(createSessionRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Delete a financial connection
         * @param {string} financialConnectionIdToDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFinancialConnection(financialConnectionIdToDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFinancialConnection(financialConnectionIdToDelete, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * API to exchange a public token for an access token and financial connection id
         * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieves the Asset Report in JSON format.
         * @param {GetAssetReportRequest} [getAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetReport(getAssetReportRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAssetReport(getAssetReportRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get an entity - an entity is automatically created after a successful institution connection
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity(entityId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getEntity(entityId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get financial connection details
         * @param {string} financialConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnection(financialConnectionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnection(financialConnectionId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get account details
         * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get accounts
         * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get balances
         * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get account owners
         * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get transactions
         * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Receive metadata for a financial institution
         * @summary Get a financial institution
         * @param {string} institutionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialInstitution(institutionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFinancialInstitution(institutionId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get investment holdings
         * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentHoldings(getInvestmentHoldingsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getInvestmentHoldings(getInvestmentHoldingsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get investment transactions
         * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentTransactions(getInvestmentTransactionsRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getInvestmentTransactions(getInvestmentTransactionsRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
         * @summary Migrate financial connection
         * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Refreshes the Asset Report in JSON format.
         * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAssetReport(refreshAssetReportRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.refreshAssetReport(refreshAssetReportRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsData(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.syncFinancialConnectionsData(body, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get liabilities
         * @param {GetLiabilitiesRequest} getLiabilitiesRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.FuseApiFp = FuseApiFp;
/**
 * FuseApi - factory interface
 * @export
 */
const FuseApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FuseApiFp)(configuration);
    return {
        /**
         * Use this endpoint to generate an Asset Report for a user.
         * @param {CreateAssetReportRequest} [createAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssetReport(createAssetReportRequest, options) {
            return localVarFp.createAssetReport(createAssetReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a link token to start the process of a user connecting to a specific financial institution.
         * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLinkToken(createLinkTokenRequest, options) {
            return localVarFp.createLinkToken(createLinkTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
         * @param {CreateSessionRequest} [createSessionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(createSessionRequest, options) {
            return localVarFp.createSession(createSessionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a financial connection
         * @param {string} financialConnectionIdToDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFinancialConnection(financialConnectionIdToDelete, options) {
            return localVarFp.deleteFinancialConnection(financialConnectionIdToDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * API to exchange a public token for an access token and financial connection id
         * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options) {
            return localVarFp.exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the Asset Report in JSON format.
         * @param {GetAssetReportRequest} [getAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetReport(getAssetReportRequest, options) {
            return localVarFp.getAssetReport(getAssetReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get an entity - an entity is automatically created after a successful institution connection
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity(entityId, options) {
            return localVarFp.getEntity(entityId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get financial connection details
         * @param {string} financialConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnection(financialConnectionId, options) {
            return localVarFp.getFinancialConnection(financialConnectionId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get account details
         * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options) {
            return localVarFp.getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get accounts
         * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options) {
            return localVarFp.getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get balances
         * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options) {
            return localVarFp.getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get account owners
         * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options) {
            return localVarFp.getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get transactions
         * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options) {
            return localVarFp.getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Receive metadata for a financial institution
         * @summary Get a financial institution
         * @param {string} institutionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialInstitution(institutionId, options) {
            return localVarFp.getFinancialInstitution(institutionId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get investment holdings
         * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentHoldings(getInvestmentHoldingsRequest, options) {
            return localVarFp.getInvestmentHoldings(getInvestmentHoldingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get investment transactions
         * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvestmentTransactions(getInvestmentTransactionsRequest, options) {
            return localVarFp.getInvestmentTransactions(getInvestmentTransactionsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
         * @summary Migrate financial connection
         * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options) {
            return localVarFp.migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Refreshes the Asset Report in JSON format.
         * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAssetReport(refreshAssetReportRequest, options) {
            return localVarFp.refreshAssetReport(refreshAssetReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
         * @summary Sync financial connections data
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncFinancialConnectionsData(body, options) {
            return localVarFp.syncFinancialConnectionsData(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get liabilities
         * @param {GetLiabilitiesRequest} getLiabilitiesRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options) {
            return localVarFp.v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FuseApiFactory = FuseApiFactory;
/**
 * FuseApi - object-oriented interface
 * @export
 * @class FuseApi
 * @extends {BaseAPI}
 */
class FuseApi extends base_1.BaseAPI {
    /**
     * Use this endpoint to generate an Asset Report for a user.
     * @param {CreateAssetReportRequest} [createAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createAssetReport(createAssetReportRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).createAssetReport(createAssetReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a link token to start the process of a user connecting to a specific financial institution.
     * @param {CreateLinkTokenRequest} [createLinkTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createLinkToken(createLinkTokenRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).createLinkToken(createLinkTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
     * @param {CreateSessionRequest} [createSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    createSession(createSessionRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).createSession(createSessionRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a financial connection
     * @param {string} financialConnectionIdToDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    deleteFinancialConnection(financialConnectionIdToDelete, options) {
        return (0, exports.FuseApiFp)(this.configuration).deleteFinancialConnection(financialConnectionIdToDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * API to exchange a public token for an access token and financial connection id
     * @param {ExchangeFinancialConnectionsPublicTokenRequest} [exchangeFinancialConnectionsPublicTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).exchangeFinancialConnectionsPublicToken(exchangeFinancialConnectionsPublicTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the Asset Report in JSON format.
     * @param {GetAssetReportRequest} [getAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getAssetReport(getAssetReportRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getAssetReport(getAssetReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get an entity - an entity is automatically created after a successful institution connection
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getEntity(entityId, options) {
        return (0, exports.FuseApiFp)(this.configuration).getEntity(entityId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get financial connection details
     * @param {string} financialConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnection(financialConnectionId, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnection(financialConnectionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get account details
     * @param {GetFinancialConnectionsAccountDetailsRequest} getFinancialConnectionsAccountDetailsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsAccountDetails(getFinancialConnectionsAccountDetailsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get accounts
     * @param {GetFinancialConnectionsAccountsRequest} getFinancialConnectionsAccountsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsAccounts(getFinancialConnectionsAccountsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get balances
     * @param {GetFinancialConnectionsBalanceRequest} getFinancialConnectionsBalanceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsBalances(getFinancialConnectionsBalanceRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get account owners
     * @param {GetFinancialConnectionsOwnersRequest} getFinancialConnectionsOwnersRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsOwners(getFinancialConnectionsOwnersRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get transactions
     * @param {GetFinancialConnectionsTransactionsRequest} getFinancialConnectionsTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialConnectionsTransactions(getFinancialConnectionsTransactionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Receive metadata for a financial institution
     * @summary Get a financial institution
     * @param {string} institutionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getFinancialInstitution(institutionId, options) {
        return (0, exports.FuseApiFp)(this.configuration).getFinancialInstitution(institutionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get investment holdings
     * @param {GetInvestmentHoldingsRequest} getInvestmentHoldingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getInvestmentHoldings(getInvestmentHoldingsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getInvestmentHoldings(getInvestmentHoldingsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get investment transactions
     * @param {GetInvestmentTransactionsRequest} getInvestmentTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    getInvestmentTransactions(getInvestmentTransactionsRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).getInvestmentTransactions(getInvestmentTransactionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection\'s data, access token, ID, and request ID.
     * @summary Migrate financial connection
     * @param {MigrateFinancialConnectionsTokenRequest} [migrateFinancialConnectionsTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).migrateFinancialConnection(migrateFinancialConnectionsTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Refreshes the Asset Report in JSON format.
     * @param {RefreshAssetReportRequest} [refreshAssetReportRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    refreshAssetReport(refreshAssetReportRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).refreshAssetReport(refreshAssetReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
     * @summary Sync financial connections data
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    syncFinancialConnectionsData(body, options) {
        return (0, exports.FuseApiFp)(this.configuration).syncFinancialConnectionsData(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get liabilities
     * @param {GetLiabilitiesRequest} getLiabilitiesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuseApi
     */
    v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options) {
        return (0, exports.FuseApiFp)(this.configuration).v1FinancialConnectionsLiabilitiesPost(getLiabilitiesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FuseApi = FuseApi;
